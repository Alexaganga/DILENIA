//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.85;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.85] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * ---
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Status
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 * 
 * - Status
 *   - Adds a status command to view the current inputting actor's status.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * <Help Description>
 *  text
 *  text
 * </Help Description>
 *
 * - Used for: State Notetags
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - This is used as a common notetag between Battle Core's state descriptions
 *   and State Tooltips' state descriptions.
 * 
 * ---
 * 
 * <In-Battle Status Description>
 *  text
 *  text
 * </In-Battle Status Description>
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - The description used here will not be used for State Tooltips.
 * - If both <Help Description> and <In-Battle Status Description> notetags
 *   exist in the same state, priority will be given to this one for the
 *   In-Battle Status Window.
 *
 * ---
 * 
 * <Exclude From Status Listing>
 * 
 * - Used for: State Notetags
 * - Excludes the state from being displayed in the status listing.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 *   - This is NOT used for filtering out who the player can or cannot select.
 *   - This determines a final result.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 * 
 * <Popup Position: Head>
 * <Popup Position: Center>
 * <Popup Position: Base>
 * 
 * - Used for: Enemy Notetags
 * - Determines the popup starting position for this enemy.
 *   - Head makes the popups start at the top of the ennemy.
 *   - Center makes the popups start at the center of the ennemy.
 *   - Base makes the popups start at the bottom of the ennemy.
 * - If this notetag is not used, refer to the default Plugin Parameter setting
 *   found in Damage Settings.
 * 
 * ---
 * 
 * <Popup Offset X: +x>
 * <Popup Offset X: -x>
 * <Popup Offset Y: +y>
 * <Popup Offset Y: -y>
 * 
 * - Used for: Enemy Notetags
 * - Alters the popup x/y position offset for this enemy.
 * - Replace 'x' with a number representing the horizontal position x offset.
 *   - Negative: left. Positive: right.
 * - Replace 'y' with a number representing the vertical position y offset.
 *   - Negative: up. Positive: down.
 * - If these notetags are not used, refer to the default Plugin Parameter
 *   settings found in Damage Settings.
 * 
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 * 
 * <Aspect Name: name>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'name' with text for how enemy aspect should be renamed.
 * 
 * ---
 * 
 * <Aspect Color: color>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name color shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'color' with either a number from 0 to 31 representing the text
 *   color or in the format of '#rrggbb' to custom pick a hex color.
 * 
 * ---
 * 
 * <Aspect Icon: x>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect icon shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'x' with a number representing the icon index used to represent
 *   the enemy aspect.
 * 
 * ---
 * 
 * <Aspect Description>
 *  text
 *  text
 * </Aspect Description>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect description shown in the In-Battle Status and other
 *   supported plugin menus.
 * - Replace 'text' with the text you would like to appear as a description for
 *   the enemy's aspect.
 * 
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Change Battle Portrait (JS)
 * - Changes the battle portrait of the actor through JavaScript.
 * - Can be used outside of battle/action sequences.
 * 
 *   JS: Actor ID:
 *   - Enter which Actor ID to affect.
 *   - Uses JavaScript code.
 * 
 *   JS: Filename:
 *   - Enter the filename you wish to use.
 *   - Uses JavaScript code.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Status?:
 *   - Add the "Status" command to the Command Window?
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Status
 *       - Adds the status command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: In-Battle Status Window
 * ============================================================================
 *
 * Added with Battle Core version 1.84, this new window allows the player to
 * view the status of the current active party. If the actors have states and
 * buffs, the player can scroll through them and read about their effects
 * through the help window.
 * 
 * If you would like to manage which parameters can appear here, this can be
 * done through the VisuMZ_0_CoreEngine's "Parameter Settings" and adjust which
 * parameters are shown through "Extended Parameters". These settings will
 * reflect in the In-Battle Status window, too. Otherwise, the parameters that
 * will be shown will only be MaxHP, MaxMP, ATK, DEF, MAT, MDF, AGI, and LUK.
 * 
 * The In-Battle Status can also be used to view enemies (if the parameter is
 * enabled). To view enemies, players must scroll through all the actors before
 * viewing enemies. Enemies will have their battler graphic displayed. If the
 * enemy has a SV Battler graphic, that will be displayed instead. However, if
 * the enemy has a Dragonbones, then the database battler graphic is displayed
 * to match any of the turn order displays as those also use the same graphic.
 * 
 * Enemies will not display the current HP on their In-Battle Status gauges.
 * Instead, they will display what percentage their HP, MP, and/or TP is at.
 * This is primarily due to how gauges do not support large numbers well and
 * showing the percentage values are better for this scene.
 *
 * ---
 * 
 * General Settings
 * 
 *   Status Icon:
 *   - The icon used for the Status command.
 * 
 *   Status Graphic:
 *   - Choose how the actor graphic appears for In-Battle Status.
 * 
 *   Help Description:
 *   - Text displayed when selecting the Status command.
 * 
 * ---
 * 
 * Enemy Settings
 * 
 *   Allow View Enemies?:
 *   - Allows players to view enemy stats (even if limited)?
 * 
 *   Show Level?:
 *   - Shows the enemy's level in the In-Battle Status?
 * 
 *   Hidden Parameter:
 *   - The text that appears if a parameter value is hidden.
 * 
 *     Show Params Always:
 *     - Always show exact enemy parameter values.
 * 
 *     Show Battle Test:
 *     - Show exact enemy parameter values in battle test.
 * 
 *     Show If Defeated:
 *     - Show exact enemy parameter values if enemy has been defeated before.
 * 
 * ---
 * 
 * Page Buttons:
 * 
 *   Show Page Buttons?:
 *   - Shows page buttons to switch between actors?
 *   - Still requires Touch UI option to be on.
 * 
 *   Large UI Position?:
 *   - If using a large resolution, position the page buttons on which side?
 * 
 *  Offset X
 *  - Offsets the page buttons x position.
 *  - Negative: left. Positive: right.
 * 
 *  Offset Y
 *  - Offsets the page buttons y position.
 *  - Negative: up. Positive: down.
 * 
 * ---
 * 
 * Parameter Display
 * 
 *   Increased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 *   Decreased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 * ---
 * 
 * States Display
 * 
 *   Max Width
 *   - Maximum width of the states list display.
 * 
 *   List States?
 *   - Lists states in the states list display?
 * 
 *   List Buffs?
 *   - Lists buffs in the states list display?
 * 
 *   List Debuffs?
 *   - Lists debuffs in the states list display?
 * 
 *   Buffs/Debuffs Display:
 * 
 *     Buff Name Format
 *     - Text format used to represent buffs.
 *     - %1 - Parameter Name
 * 
 *     Debuff Name Format
 *     - Text format used to represent debuffs.
 *     - %1 - Parameter Name
 * 
 *   Normal State:
 * 
 *     Normal Icon
 *     - Icon used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 *     Normal Text
 *     - Text used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 * ---
 * 
 * Help Descriptions
 * 
 *   State Help Format:
 *   - Text format used for state help descriptions
 *   - %1 - Description; %2 - Turns/Actions Remaining
 * 
 *   Buff Help Format:
 *   - Text format used for Buff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Debuff Help Format:
 *   - Text format used for Debuff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Normal State:
 *   - Help description used to explain normal state (unaffected by states,
 *     buffs, or debuffs).
 * 
 *   Turns/Actions Left:
 * 
 *     Actions Format:
 *     - Text format used to represent actions remaining.
 *     - %1 - Actions; %2 - Color
 * 
 *     Turns Format:
 *     - Text format used to represent turns remaining.
 *     - %1 - Turns; %2 - Color
 * 
 *     Passive Text:
 *     - Text used to represent a passive.
 * 
 * ---
 * 
 * Window Settings
 * 
 *   Background Type:
 *   - Select background type for this window.
 * 
 *   JS: Draw Data:
 *   - Code used to draw battler data.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 * 
 * Frontview Battlers
 * 
 *   Portrait Animations:
 * 
 *     Each Target:
 *     - Place animations on top for "Each Target" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of All:
 *     - Place animations on top for "Center of All" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of Screen:
 *     - Place animations on top for "Center of Screen" display types?
 *     - Does not apply to MV animations.
 * 
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 * 
 * Aspect Defaults
 * 
 *   Name Format:
 *   - Default name aspect format.
 *   - %1 - Original Enemy Name
 * 
 *   Name Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Icon:
 *   - Default icon used for aspect.
 *   - Use <Aspect Icon: x> to change icon.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.85: October 17, 2024
 * * Bug Fixes!
 * ** Fixed a bug where the enemy name's visibility would remain after an
 *    action has taken place and before inputting is done. Fix made by Olivia.
 * ** Fixed a bug where the "Name Visibility As Target" plugin parameter did
 *    not work properly. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Updated <Help Description> notetag documentation:
 * *** This is used as a common notetag between Battle Core's state
 *     descriptions and State Tooltips' state descriptions.
 * * New Features!
 * ** New Notetag added by Olivia:
 * *** <In-Battle Status Description>
 * **** A prioritized help description used to separate from the common help
 *      description notetag shared with State Tooltips.
 * ** New Plugin Parameters added by Olivia:
 * *** Actor Battlers > Frontview > Portrait Animations > Each Target
 * *** Actor Battlers > Frontview > Portrait Animations > Center of All
 * *** Actor Battlers > Frontview > Portrait Animations > Center of Screen
 * **** Place animations on top or behind for these display types?
 * *** Battle Log > Action Changes > Show Counter? > Wait Frames
 * *** Battle Log > Action Changes > Show Reflect? > Wait Frames
 * *** Battle Log > Action Changes > Show Substitute? > Wait Frames
 * **** If devs allow the results of counters, reflects, and substitutes, there
 *      wasn't enough time before to allow the text to be visible on screen.
 *      You can now adjust how many frames are now visible if text is shown.
 * **** Default values are left at 0 as to not interrupt currently existing
 *      action sequences.
 * 
 * Version 1.84: September 19, 2024
 * * Bug Fixes!
 * ** Fixed a bug where Action Sequence "MOVE: Change Home By Distance" would
 *    also be affected by the actor and enemy position offsets. Fixed by Irina.
 * ** Fixed a bug where Action Sequence "MECH: STB Exploit Effect" caused a
 *    crash. Fix made by Arisu.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Command added by Arisu:
 * *** ANIM: Change Battle Portrait (JS)
 * **** Changes the battle portrait of the actor through JavaScript.
 * **** Can be used outside of battle/action sequences.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > In-Battle Status Window
 * **** This new window allows the player to view the status of the current
 *      active party. If the actors have states and buffs, the player can
 *      scroll through them and read about their effects through the help
 *      window.
 * ** New Notetags added by Olivia:
 * *** <Help Description>
 * **** Assigns a help description for the state that's displayed under the
 *      new "Status" actor command.
 * *** <Exclude From Status Listing>
 * **** Excludes the state from being displayed in the status listing.
 * *** <Aspect Name: x>
 * *** <Aspect Icon: x>
 * *** <Aspect Color: x>
 * *** <Aspect Description>
 * **** Used to define enemy aspect that will show up in the In-Battle Status
 *      as well as other supported plugins.
 * *** <Popup Position: Head>
 * *** <Popup Position: Center>
 * *** <Popup Position: Base>
 * **** Changes the popup starting position for this enemy.
 * *** <Popup Offset X: +x>
 * *** <Popup Offset X: -x>
 * *** <Popup Offset Y: +y>
 * *** <Popup Offset Y: -y>
 * **** Changes the popup X/Y position offset for this enemy.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Party Command Window > Add Status?
 * **** Add the "Status" command to the Command Window? 
 * *** Plugin Parameters > Actor Command Window > Command List
 * **** Updated to have the "Status" command.
 * *** Plugin Parameters > In-Battle Status Window
 * **** Completely new! View the help file for more information.
 * *** Plugin Parameters > Enemy > Aspects
 * **** Used for the In-Battle Status as well as other supported plugins.
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait_JS
 * @text ANIM: Change Battle Portrait (JS)
 * @desc Changes the battle portrait of the actor through JavaScript.
 * Can be used outside of battle/action sequences.
 *
 * @arg ActorJS:func
 * @text JS: Actor ID
 * @type note
 * @desc Enter which Actor ID to affect.
 * Uses JavaScript code.
 * @default "// Get Actor ID here.\nlet actorID = 0;\nactorID = $gameParty.members()[0].actorId();\n\n// Return Actor ID\nreturn actorID;"
 *
 * @arg FilenameJS:func
 * @text JS: Filename
 * @type note
 * @desc Enter the filename you wish to use.
 * Uses JavaScript code.
 * @default "// Get Filename here.\nlet filename = 'Actor1_';\nfilename += String(Math.randomInt(8) + 1);\n\n// Return Filename\nreturn filename;"
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","ShowCosts:eval":"true","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat.","HelpParty:str":"Automatically choose an action suitable for combat."}
 *
 * @param InBattleStatus:struct
 * @text In-Battle Status Window
 * @type struct<InBattleStatus>
 * @desc Settings that alter the In-Battle Status window accessed
 * through the "Status" command.
 * @default {"General":"","CmdIconStatus:num":"87","StatusGraphic:str":"face","HelpStatus:str":"View battle member status.","Enemy":"","enemyStatus:eval":"true","enemyShowLevel:eval":"true","enemyHiddenParameter:str":"???","enemyShowParametersAlways:eval":"false","enemyShowParametersIfBattleTest:eval":"true","enemyShowParametersIfDefeated:eval":"true","PageButtons":"","pageOffsetX:num":"+0","pageOffsetY:num":"+0","pageButtons:eval":"true","Parameters":"","buffValueFmt:str":"▲%1","debuffValueFmt:str":"▼%1","States":"","statesMaxWidth:num":"384","drawStates:eval":"true","drawBuffs:eval":"true","drawDebuffs:eval":"true","BuffsDebuffs":"","buffNameFmt:str":"%1▲","debuffNameFmt:str":"%1▼","NormalState":"","normalIcon:num":"84","normalText:str":"Normal","HelpDesc":"","stateHelpFmt:json":"\"%1 %2\"","buffHelpFmt:json":"\"Increases %1 to %3%2\\\\C[0]. %4\"","debuffHelpFmt:json":"\"Decreases %1 to %3%2\\\\C[0]. %4\"","normalHelp:json":"\"Status is currently normal.\"","TurnHelpDesc":"","actionsFmt:str":"\\C[6](Actions %2%1\\C[6])\\C[0]","TurnsFmt:str":"\\C[5](Turns %2%1\\C[5])\\C[0]","passiveText:str":"\\C[4](Passive)\\C[0]","Window":"","StatusWindow_BgType:num":"0","StatusWindow_DrawJS:func":"\"{ // Draw Face and Simple Status\\n    const x = this.colSpacing() / 2;\\n    const h = ImageManager.faceHeight;\\n    const y = h / 2 - this.lineHeight() * 1.5;\\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\\n}\\n{ // Draw Actor Parameters\\n    let maxWidth = this.drawingAreaWidth();\\n    let x1 = 0;\\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\\n\\n    let counter = 0;\\n    const params = this.displayedParams();\\n\\n    let px = x1;\\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\\n    let pw = Math.floor(maxWidth / 2);\\n\\n    if (this._statesWindow.y !== 0) {\\n        this._statesWindow.y = py;\\n    }\\n\\n    for (const param of params) {\\n        this.drawDarkRect(px, py, pw, this.lineHeight());\\n        this.drawParamData(param, px, py, pw);\\n        counter++;\\n        if (counter % 2 === 0) {\\n            px = x1;\\n            py += this.lineHeight();\\n        } else {\\n            px = x2;\\n        }\\n    }\\n}\"","StatusWindow_RectJS:func":"\"const wx = Graphics.boxWidth > 1000 ? 120 : 0;\\nconst wy = this._helpWindow.y + this._helpWindow.height;\\nconst ww = Graphics.boxWidth - (wx * 2);\\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\\nreturn new Rectangle(wx, wy, ww, wh);\""}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowCounterWait:eval
 * @text Wait Frames
 * @parent ShowCounter:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowReflectWait:eval
 * @text Wait Frames
 * @parent ShowReflect:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ShowSubstituteWait:eval
 * @text Wait Frames
 * @parent ShowSubstitute:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddStatus:eval
 * @text Add Status?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Status" command to the Command Window?
 * @default true
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent CommandAddStatus:eval
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option status
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * In_Battle Status Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~InBattleStatus:
 *
 * @param General
 * @text General Settings
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent General
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param StatusGraphic:str
 * @text Status Graphic
 * @parent General
 * @type select
 * @option None
 * @value none
 * @option Face
 * @value face
 * @option Map Sprite
 * @value sprite
 * @option Sideview Battler
 * @value svbattler
 * @desc Choose how the actor graphic appears for In-Battle Status.
 * @default face
 *
 * @param HelpStatus:str
 * @text Help Description
 * @parent General
 * @desc Text displayed when selecting the Status command.
 * @default View battle member status.
 *
 * @param Enemy
 * @text Enemy Settings
 *
 * @param enemyStatus:eval
 * @text Allow View Enemies?
 * @parent Enemy
 * @type boolean
 * @on Allow
 * @off Forbid
 * @desc Allows players to view enemy stats (even if limited)?
 * @default true
 *
 * @param enemyShowLevel:eval
 * @text Show Level?
 * @parent Enemy
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the enemy's level in the In-Battle Status?
 * @default true
 *
 * @param enemyHiddenParameter:str
 * @text Hidden Parameter
 * @parent Enemy
 * @desc The text that appears if a parameter value is hidden.
 * @default ???
 *
 * @param enemyShowParametersAlways:eval
 * @text Show Params Always
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Always show exact enemy parameter values.
 * @default false
 *
 * @param enemyShowParametersIfBattleTest:eval
 * @text Show Battle Test
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values in battle test.
 * @default true
 *
 * @param enemyShowParametersIfDefeated:eval
 * @text Show If Defeated
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values if enemy has been defeated before.
 * @default true
 *
 * @param PageButtons
 * @text Page Buttons
 *
 * @param pageButtons:eval
 * @text Show Page Buttons?
 * @parent PageButtons
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows page buttons to switch between actors?
 * Still requires Touch UI option to be on.
 * @default true
 *
 * @param pageButtonPosition:str
 * @text Large UI Position?
 * @parent pageButtons:eval
 * @type select
 * @option left
 * @option right
 * @desc If using a large resolution, position the page buttons on which side?
 * @default left
 *
 * @param pageOffsetX:num
 * @text Offset X
 * @parent PageButtons
 * @desc Offsets the page buttons x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param pageOffsetY:num
 * @text Offset Y
 * @parent PageButtons
 * @desc Offsets the page buttons y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param Parameters
 * @text Parameter Display
 *
 * @param buffValueFmt:str
 * @text Increased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▲%1
 *
 * @param debuffValueFmt:str
 * @text Decreased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▼%1
 *
 * @param States
 * @text States Display
 *
 * @param statesMaxWidth:num
 * @text Max Width
 * @parent States
 * @desc Maximum width of the states list display.
 * @default 384
 *
 * @param drawStates:eval
 * @text List States?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists states in the states list display?
 * @default true
 *
 * @param drawBuffs:eval
 * @text List Buffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists buffs in the states list display?
 * @default true
 *
 * @param drawDebuffs:eval
 * @text List Debuffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists debuffs in the states list display?
 * @default true
 *
 * @param BuffsDebuffs
 * @text Buffs/Debuffs Display
 * @parent States
 *
 * @param buffNameFmt:str
 * @text Buff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent buffs.
 * %1 - Parameter Name
 * @default %1▲
 *
 * @param debuffNameFmt:str
 * @text Debuff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent debuffs.
 * %1 - Parameter Name
 * @default %1▼
 *
 * @param NormalState
 * @text Normal State
 * @parent States
 *
 * @param normalIcon:num
 * @text Normal Icon
 * @parent NormalState
 * @desc Icon used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default 84
 *
 * @param normalText:str
 * @text Normal Text
 * @parent NormalState
 * @desc Text used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default Normal
 *
 * @param HelpDesc
 * @text Help Descriptions
 *
 * @param stateHelpFmt:json
 * @text State Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for state help descriptions
 * %1 - Description; %2 - Turns/Actions Remaining
 * @default "%1 %2"
 *
 * @param buffHelpFmt:json
 * @text Buff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Buff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Increases %1 to %3%2\\C[0]. %4"
 *
 * @param debuffHelpFmt:json
 * @text Debuff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Debuff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Decreases %1 to %3%2\\C[0]. %4"
 *
 * @param normalHelp:json
 * @text Normal State
 * @parent HelpDesc
 * @type note
 * @desc Help description used to explain normal state (unaffected by states, buffs, or debuffs).
 * @default "Status is currently normal."
 *
 * @param TurnHelpDesc
 * @text Turns/Actions Left
 * @parent HelpDesc
 *
 * @param actionsFmt:str
 * @text Actions Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent actions remaining.
 * %1 - Actions; %2 - Color
 * @default \C[6](Actions %2%1\C[6])\C[0]
 *
 * @param TurnsFmt:str
 * @text Turns Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent turns remaining.
 * %1 - Turns; %2 - Color
 * @default \C[5](Turns %2%1\C[5])\C[0]
 *
 * @param passiveText:str
 * @text Passive Text
 * @parent TurnHelpDesc
 * @desc Text used to represent a passive.
 * @default \C[4](Passive)\C[0]
 *
 * @param Window
 * @text Window Settings
 *
 * @param StatusWindow_BgType:num
 * @text Background Type
 * @parent Window
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for this window.
 * @default 0
 *
 * @param StatusWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Window
 * @type note
 * @desc Code used to draw battler data.
 * @default "{ // Draw Face and Simple Status\n    const x = this.colSpacing() / 2;\n    const h = ImageManager.faceHeight;\n    const y = h / 2 - this.lineHeight() * 1.5;\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\n}\n{ // Draw Actor Parameters\n    let maxWidth = this.drawingAreaWidth();\n    let x1 = 0;\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\n\n    let counter = 0;\n    const params = this.displayedParams();\n\n    let px = x1;\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\n    let pw = Math.floor(maxWidth / 2);\n\n    if (this._statesWindow.y !== 0) {\n        this._statesWindow.y = py;\n    }\n\n    for (const param of params) {\n        this.drawDarkRect(px, py, pw, this.lineHeight());\n        this.drawParamData(param, px, py, pw);\n        counter++;\n        if (counter % 2 === 0) {\n            px = x1;\n            py += this.lineHeight();\n        } else {\n            px = x2;\n        }\n    }\n}"
 *
 * @param StatusWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Window
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const wx = Graphics.boxWidth > 1000 ? 120 : 0;\nconst wy = this._helpWindow.y + this._helpWindow.height;\nconst ww = Graphics.boxWidth - (wx * 2);\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param FvBattlers
 * @text Frontview Battlers
 * 
 * @param FvPortraitAni
 * @text Portrait Animations
 * @parent FvBattlers
 *
 * @param FvAniEachTarget:eval
 * @text Each Target
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Each Target" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterAll:eval
 * @text Center of All
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of All" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterScreen:eval
 * @text Center of Screen
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of Screen" display types?
 * Does not apply to MV animations.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 * @param Aspect
 * @text Aspect Defaults
 *
 * @param AspectNameFmt:str
 * @text Name Format
 * @parent Aspect
 * @desc Default name aspect format.
 * %1 - Original Enemy Name
 * @default %1 Aspect
 *
 * @param AspectColor:str
 * @text Name Color
 * @parent Aspect
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 2
 *
 * @param AspectIcon:num
 * @text Icon
 * @parent Aspect
 * @desc Default icon used for aspect.
 * Use <Aspect Icon: x> to change icon.
 * @default 26
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x478a06=_0x56f6;(function(_0x1b80a9,_0x38331b){const _0x56e434=_0x56f6,_0x5ccf69=_0x1b80a9();while(!![]){try{const _0x3d5453=-parseInt(_0x56e434(0x238))/0x1+parseInt(_0x56e434(0x5f0))/0x2+parseInt(_0x56e434(0x739))/0x3*(-parseInt(_0x56e434(0x6f1))/0x4)+-parseInt(_0x56e434(0xb98))/0x5+-parseInt(_0x56e434(0x823))/0x6+parseInt(_0x56e434(0x292))/0x7+parseInt(_0x56e434(0x25b))/0x8*(parseInt(_0x56e434(0x76f))/0x9);if(_0x3d5453===_0x38331b)break;else _0x5ccf69['push'](_0x5ccf69['shift']());}catch(_0x95872c){_0x5ccf69['push'](_0x5ccf69['shift']());}}}(_0x412f,0xd68b1));var label='BattleCore',tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x478a06(0x4d3)](function(_0x1d62e6){const _0x2b16de=_0x478a06;return _0x1d62e6['status']&&_0x1d62e6[_0x2b16de(0x42b)][_0x2b16de(0x982)]('['+label+']');})[0x0];VisuMZ[label][_0x478a06(0x468)]=VisuMZ[label][_0x478a06(0x468)]||{},VisuMZ[_0x478a06(0x91e)]=function(_0x3ddd2f,_0x5bdaa6){const _0x3f72b0=_0x478a06;for(const _0x264e4d in _0x5bdaa6){if(_0x264e4d[_0x3f72b0(0x85a)](/(.*):(.*)/i)){const _0x285e0a=String(RegExp['$1']),_0x51bbc4=String(RegExp['$2'])['toUpperCase']()[_0x3f72b0(0xb7d)]();let _0x1149dc,_0x4e614c,_0x2afe99;switch(_0x51bbc4){case _0x3f72b0(0x693):_0x1149dc=_0x5bdaa6[_0x264e4d]!==''?Number(_0x5bdaa6[_0x264e4d]):0x0;break;case _0x3f72b0(0xe0):_0x4e614c=_0x5bdaa6[_0x264e4d]!==''?JSON['parse'](_0x5bdaa6[_0x264e4d]):[],_0x1149dc=_0x4e614c[_0x3f72b0(0x77a)](_0x5834e0=>Number(_0x5834e0));break;case _0x3f72b0(0x88c):_0x1149dc=_0x5bdaa6[_0x264e4d]!==''?eval(_0x5bdaa6[_0x264e4d]):null;break;case _0x3f72b0(0x863):_0x4e614c=_0x5bdaa6[_0x264e4d]!==''?JSON['parse'](_0x5bdaa6[_0x264e4d]):[],_0x1149dc=_0x4e614c[_0x3f72b0(0x77a)](_0x1fec7e=>eval(_0x1fec7e));break;case _0x3f72b0(0x71f):_0x1149dc=_0x5bdaa6[_0x264e4d]!==''?JSON[_0x3f72b0(0x7bc)](_0x5bdaa6[_0x264e4d]):'';break;case _0x3f72b0(0x345):_0x4e614c=_0x5bdaa6[_0x264e4d]!==''?JSON[_0x3f72b0(0x7bc)](_0x5bdaa6[_0x264e4d]):[],_0x1149dc=_0x4e614c[_0x3f72b0(0x77a)](_0x2b6787=>JSON[_0x3f72b0(0x7bc)](_0x2b6787));break;case _0x3f72b0(0x86b):_0x1149dc=_0x5bdaa6[_0x264e4d]!==''?new Function(JSON['parse'](_0x5bdaa6[_0x264e4d])):new Function(_0x3f72b0(0xed));break;case _0x3f72b0(0x454):_0x4e614c=_0x5bdaa6[_0x264e4d]!==''?JSON[_0x3f72b0(0x7bc)](_0x5bdaa6[_0x264e4d]):[],_0x1149dc=_0x4e614c[_0x3f72b0(0x77a)](_0x1a0057=>new Function(JSON['parse'](_0x1a0057)));break;case _0x3f72b0(0x28d):_0x1149dc=_0x5bdaa6[_0x264e4d]!==''?String(_0x5bdaa6[_0x264e4d]):'';break;case'ARRAYSTR':_0x4e614c=_0x5bdaa6[_0x264e4d]!==''?JSON[_0x3f72b0(0x7bc)](_0x5bdaa6[_0x264e4d]):[],_0x1149dc=_0x4e614c[_0x3f72b0(0x77a)](_0xdb56a2=>String(_0xdb56a2));break;case'STRUCT':_0x2afe99=_0x5bdaa6[_0x264e4d]!==''?JSON[_0x3f72b0(0x7bc)](_0x5bdaa6[_0x264e4d]):{},_0x3ddd2f[_0x285e0a]={},VisuMZ[_0x3f72b0(0x91e)](_0x3ddd2f[_0x285e0a],_0x2afe99);continue;case _0x3f72b0(0xce):_0x4e614c=_0x5bdaa6[_0x264e4d]!==''?JSON[_0x3f72b0(0x7bc)](_0x5bdaa6[_0x264e4d]):[],_0x1149dc=_0x4e614c[_0x3f72b0(0x77a)](_0x2b63dd=>VisuMZ['ConvertParams']({},JSON[_0x3f72b0(0x7bc)](_0x2b63dd)));break;default:continue;}_0x3ddd2f[_0x285e0a]=_0x1149dc;}}return _0x3ddd2f;},(_0x25aaef=>{const _0x33a4b9=_0x478a06,_0x8df694=_0x25aaef[_0x33a4b9(0x8ff)];for(const _0x13a08a of dependencies){if(!Imported[_0x13a08a]){alert(_0x33a4b9(0x1c7)['format'](_0x8df694,_0x13a08a)),SceneManager[_0x33a4b9(0x834)]();break;}}const _0x486e02=_0x25aaef[_0x33a4b9(0x42b)];if(_0x486e02['match'](/\[Version[ ](.*?)\]/i)){const _0x3f4756=Number(RegExp['$1']);_0x3f4756!==VisuMZ[label][_0x33a4b9(0x784)]&&(alert(_0x33a4b9(0x7e2)[_0x33a4b9(0x177)](_0x8df694,_0x3f4756)),SceneManager[_0x33a4b9(0x834)]());}if(_0x486e02['match'](/\[Tier[ ](\d+)\]/i)){const _0xd43259=Number(RegExp['$1']);_0xd43259<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x33a4b9(0x177)](_0x8df694,_0xd43259,tier)),SceneManager[_0x33a4b9(0x834)]()):tier=Math[_0x33a4b9(0x896)](_0xd43259,tier);}VisuMZ['ConvertParams'](VisuMZ[label][_0x33a4b9(0x468)],_0x25aaef[_0x33a4b9(0xac4)]);})(pluginData),VisuMZ[_0x478a06(0x10b)]=function(_0x209d60){const _0x3de104=_0x478a06;let _0x551406=[];for(const _0x5a954d of _0x209d60){_0x551406=_0x551406['concat'](VisuMZ[_0x3de104(0x312)](_0x5a954d));}return _0x551406['filter'](_0x24883d=>_0x24883d);},VisuMZ[_0x478a06(0x312)]=function(_0x3710e4){const _0x64c8b3=_0x478a06,_0x595d89=BattleManager[_0x64c8b3(0x3df)]()[_0x64c8b3(0x4d3)](_0x2ebb2c=>_0x2ebb2c&&_0x2ebb2c[_0x64c8b3(0x9c8)]()),_0x12a0f6=BattleManager['_subject'],_0x33d8da=BattleManager[_0x64c8b3(0x39a)],_0x904aac=BattleManager[_0x64c8b3(0x807)]?BattleManager[_0x64c8b3(0x807)]['slice'](0x0):_0x595d89;_0x3710e4=_0x3710e4[_0x64c8b3(0xbd5)]()[_0x64c8b3(0xb7d)]();if(_0x3710e4==='user')return[_0x12a0f6];else{if(_0x3710e4===_0x64c8b3(0x15b))return[_0x33d8da];else{if(_0x3710e4===_0x64c8b3(0x590)){if(_0x33d8da){const _0x31247f=_0x904aac[_0x64c8b3(0x960)](_0x33d8da);return _0x31247f>=0x0?[_0x904aac[_0x31247f-0x1]||_0x33d8da]:[_0x33d8da];}}else{if(_0x3710e4===_0x64c8b3(0x241)){if(_0x33d8da){const _0x458aa3=_0x904aac['indexOf'](_0x33d8da);return _0x458aa3>=0x0?[_0x904aac[_0x458aa3+0x1]||_0x33d8da]:[_0x33d8da];}}else{if(_0x3710e4===_0x64c8b3(0x114))return _0x904aac;else{if(_0x3710e4===_0x64c8b3(0xaea))return[_0x12a0f6][_0x64c8b3(0x74a)](_0x904aac);else{if(_0x3710e4===_0x64c8b3(0x94f))return _0x595d89[_0x64c8b3(0x4d3)](_0x3fb7f9=>_0x3fb7f9!==_0x12a0f6&&!_0x904aac['includes'](_0x3fb7f9)&&_0x3fb7f9[_0x64c8b3(0xb62)]());else{if(_0x3710e4===_0x64c8b3(0xb2e))return[VisuMZ[_0x64c8b3(0x9b3)]()];else{if(_0x3710e4[_0x64c8b3(0x85a)](/SPECIAL (.*)>/i)){const _0x3ce073=String(RegExp['$1'])['split'](',')[_0x64c8b3(0x77a)](_0x40d1ba=>_0x40d1ba[_0x64c8b3(0xb7d)]());return[VisuMZ['GetActionSequenceSpecialTargetWithFlags'](_0x3ce073)];}}}}}}}}}if(_0x12a0f6){if(_0x3710e4===_0x64c8b3(0x73e))return _0x12a0f6[_0x64c8b3(0xac5)]()[_0x64c8b3(0x7bb)]();else{if(_0x3710e4===_0x64c8b3(0xbf))return _0x12a0f6[_0x64c8b3(0xac5)]()[_0x64c8b3(0x7bb)]()[_0x64c8b3(0x4d3)](_0x12be84=>_0x12be84!==_0x12a0f6);else{if(_0x3710e4==='alive\x20friends\x20not\x20target')return _0x12a0f6[_0x64c8b3(0xac5)]()['aliveMembers']()[_0x64c8b3(0x4d3)](_0x454e7d=>_0x454e7d!==_0x33d8da);else{if(_0x3710e4===_0x64c8b3(0x744))return _0x12a0f6[_0x64c8b3(0xac5)]()['deadMembers']();else{if(_0x3710e4[_0x64c8b3(0x85a)](/FRIEND INDEX (\d+)/i)){const _0x2266ac=Number(RegExp['$1']);return[_0x12a0f6[_0x64c8b3(0xac5)]()[_0x64c8b3(0x645)]()[_0x2266ac]];}}}}}if(_0x3710e4===_0x64c8b3(0x98a))return _0x12a0f6[_0x64c8b3(0x2fb)]()['aliveMembers']();else{if(_0x3710e4===_0x64c8b3(0x6fe))return _0x12a0f6['opponentsUnit']()[_0x64c8b3(0x7bb)]()[_0x64c8b3(0x4d3)](_0x302d94=>_0x302d94!==_0x33d8da);else{if(_0x3710e4==='dead\x20opponents')return _0x12a0f6['opponentsUnit']()[_0x64c8b3(0x3e9)]();else{if(_0x3710e4[_0x64c8b3(0x85a)](/OPPONENT INDEX (\d+)/i)){const _0x58c8ae=Number(RegExp['$1']);return[_0x12a0f6[_0x64c8b3(0x2fb)]()['members']()[_0x58c8ae]];}}}}}if(_0x3710e4===_0x64c8b3(0xa26))return $gameParty[_0x64c8b3(0x7bb)]();else{if(_0x3710e4===_0x64c8b3(0x599))return $gameParty[_0x64c8b3(0x7bb)]()[_0x64c8b3(0x4d3)](_0x2e4ac5=>_0x2e4ac5!==_0x12a0f6);else{if(_0x3710e4===_0x64c8b3(0x709))return $gameParty['aliveMembers']()['filter'](_0x137b80=>_0x137b80!==_0x33d8da);else{if(_0x3710e4===_0x64c8b3(0x64e))return $gameParty['deadMembers']();else{if(_0x3710e4[_0x64c8b3(0x85a)](/ACTOR INDEX (\d+)/i)){const _0x485303=Number(RegExp['$1']);return[$gameParty[_0x64c8b3(0x645)]()[_0x485303]];}else{if(_0x3710e4[_0x64c8b3(0x85a)](/ACTOR ID (\d+)/i)){const _0x23700a=Number(RegExp['$1']);return[$gameActors[_0x64c8b3(0x421)](_0x23700a)];}}}}}}if(_0x3710e4===_0x64c8b3(0x23c))return $gameTroop['aliveMembers']();else{if(_0x3710e4===_0x64c8b3(0xa0e))return $gameTroop[_0x64c8b3(0x7bb)]()[_0x64c8b3(0x4d3)](_0x17940d=>_0x17940d!==_0x12a0f6);else{if(_0x3710e4===_0x64c8b3(0xb41))return $gameTroop[_0x64c8b3(0x7bb)]()['filter'](_0x3ebf32=>_0x3ebf32!==_0x33d8da);else{if(_0x3710e4===_0x64c8b3(0x813))return $gameTroop[_0x64c8b3(0x3e9)]();else{if(_0x3710e4[_0x64c8b3(0x85a)](/ENEMY INDEX (\d+)/i)){const _0x2c5718=Number(RegExp['$1']);return[$gameTroop[_0x64c8b3(0x645)]()[_0x2c5718]];}else{if(_0x3710e4['match'](/ENEMY ID (\d+)/i)){const _0x347fac=Number(RegExp['$1']);return $gameTroop[_0x64c8b3(0x7bb)]()[_0x64c8b3(0x4d3)](_0x2a8e67=>_0x2a8e67['enemyId']()===_0x347fac);}}}}}}if(_0x3710e4===_0x64c8b3(0x681))return _0x595d89[_0x64c8b3(0x4d3)](_0xdb8552=>_0xdb8552['isAlive']());else{if(_0x3710e4===_0x64c8b3(0x79c))return _0x595d89[_0x64c8b3(0x4d3)](_0x46da63=>_0x46da63[_0x64c8b3(0x1f5)]()&&_0x46da63!==_0x12a0f6);else{if(_0x3710e4===_0x64c8b3(0x9f0))return _0x595d89[_0x64c8b3(0x4d3)](_0xb3089d=>_0xb3089d[_0x64c8b3(0x1f5)]()&&_0xb3089d!==_0x33d8da);else{if(_0x3710e4==='dead\x20battlers')return _0x595d89[_0x64c8b3(0x4d3)](_0x41080a=>_0x41080a[_0x64c8b3(0x9c0)]());}}}return[];},VisuMZ[_0x478a06(0x9b3)]=function(){return BattleManager['_target'];},VisuMZ['GetActionSequenceSpecialTargetWithFlags']=function(_0x204efb){return BattleManager['_target'];},PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x3f8),_0x5c295b=>{const _0x4daae0=_0x478a06;if(!SceneManager[_0x4daae0(0x785)]())return;VisuMZ['ConvertParams'](_0x5c295b,_0x5c295b);const _0x265679=$gameTemp[_0x4daae0(0xa99)](),_0x3a0672=BattleManager[_0x4daae0(0x686)],_0x5a0758=BattleManager[_0x4daae0(0x6f3)],_0xccc776=BattleManager[_0x4daae0(0x807)]?BattleManager[_0x4daae0(0x807)][_0x4daae0(0x144)](0x0):[],_0x12c5bc=BattleManager[_0x4daae0(0xae5)];if(!_0x265679||!_0x3a0672||!_0x5a0758)return;if(!_0x3a0672[_0x4daae0(0x8dd)]())return;if(_0x5c295b[_0x4daae0(0x869)])_0x12c5bc[_0x4daae0(0xa43)](_0x5a0758,_0x3a0672[_0x4daae0(0x8dd)]());_0x5c295b['ApplyImmortal']&&_0x12c5bc[_0x4daae0(0x6b3)](_0x4daae0(0x703),_0x5a0758,_0xccc776,!![]);if(_0x5c295b[_0x4daae0(0x262)])_0x12c5bc[_0x4daae0(0x6b3)](_0x4daae0(0xb97),_0x5a0758,_0x3a0672);if(_0x5c295b[_0x4daae0(0x6a1)])_0x12c5bc['push'](_0x4daae0(0x81a));if(_0x5c295b[_0x4daae0(0x80d)])_0x12c5bc[_0x4daae0(0x6b3)]('performCastAnimation',_0x5a0758,_0x3a0672);if(_0x5c295b[_0x4daae0(0x445)])_0x12c5bc[_0x4daae0(0x6b3)](_0x4daae0(0xbf2));_0x265679['setWaitMode']('battlelog');}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x3b0),_0x1b6512=>{const _0x2a8e41=_0x478a06;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1b6512,_0x1b6512);const _0x2ab387=$gameTemp[_0x2a8e41(0xa99)](),_0x4758a9=BattleManager[_0x2a8e41(0x686)],_0x150abe=BattleManager[_0x2a8e41(0x6f3)],_0x4bf7e8=BattleManager[_0x2a8e41(0x807)]?BattleManager[_0x2a8e41(0x807)][_0x2a8e41(0x144)](0x0):[],_0x419e10=BattleManager['_logWindow'],_0x1d3e8c=_0x1b6512[_0x2a8e41(0x88b)]??![];if(!_0x2ab387||!_0x4758a9||!_0x150abe)return;if(!_0x4758a9[_0x2a8e41(0x8dd)]())return;let _0x3e9046=_0x1d3e8c?_0x419e10[_0x2a8e41(0xb8d)](_0x150abe):0x1;for(let _0x2e58e9=0x0;_0x2e58e9<_0x3e9046;_0x2e58e9++){_0x1d3e8c&&_0x150abe[_0x2a8e41(0x847)]()&&_0x419e10[_0x2a8e41(0x6b3)]('setActiveWeaponSet',_0x150abe,_0x2e58e9);if(_0x1b6512[_0x2a8e41(0xb2c)])_0x419e10[_0x2a8e41(0x6b3)](_0x2a8e41(0x661),_0x150abe,_0x4758a9);if(_0x1b6512[_0x2a8e41(0x8b6)]>0x0)_0x419e10[_0x2a8e41(0x6b3)]('waitCount',_0x1b6512['WaitCount']);if(_0x1b6512[_0x2a8e41(0xae6)])_0x419e10[_0x2a8e41(0x6b3)](_0x2a8e41(0x736),_0x150abe,_0x4bf7e8,_0x4758a9[_0x2a8e41(0x8dd)]()[_0x2a8e41(0x1a3)]);if(_0x1b6512[_0x2a8e41(0x445)])_0x419e10[_0x2a8e41(0x6b3)](_0x2a8e41(0xbf2));for(const _0x219fb8 of _0x4bf7e8){if(!_0x219fb8)continue;if(_0x1b6512['ActionEffect'])_0x419e10[_0x2a8e41(0x6b3)](_0x2a8e41(0x4a4),_0x150abe,_0x219fb8);}}_0x1d3e8c&&_0x150abe[_0x2a8e41(0x847)]()&&_0x419e10[_0x2a8e41(0x6b3)]('clearActiveWeaponSet',_0x150abe);if(_0x1b6512[_0x2a8e41(0x689)])_0x419e10[_0x2a8e41(0x6b3)](_0x2a8e41(0x703),_0x150abe,_0x4bf7e8,![]);_0x2ab387[_0x2a8e41(0x2d6)]('battlelog');}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x990),_0x57cd35=>{const _0x8b2e9e=_0x478a06;if(!SceneManager[_0x8b2e9e(0x785)]())return;VisuMZ[_0x8b2e9e(0x91e)](_0x57cd35,_0x57cd35);const _0x1e32e1=$gameTemp[_0x8b2e9e(0xa99)](),_0x1fbf11=BattleManager[_0x8b2e9e(0x686)],_0x5cf6c5=BattleManager['_subject'],_0x2af4fa=BattleManager[_0x8b2e9e(0x807)]?BattleManager[_0x8b2e9e(0x807)][_0x8b2e9e(0x144)](0x0):[],_0x188337=BattleManager[_0x8b2e9e(0xae5)],_0x2aaeb8=_0x57cd35[_0x8b2e9e(0x88b)]??![];if(!_0x1e32e1||!_0x1fbf11||!_0x5cf6c5)return;if(!_0x1fbf11['item']())return;let _0x56b40b=_0x2aaeb8?_0x188337[_0x8b2e9e(0xb8d)](_0x5cf6c5):0x1;for(let _0x219436=0x0;_0x219436<_0x56b40b;_0x219436++){for(const _0x1cad9d of _0x2af4fa){if(!_0x1cad9d)continue;_0x2aaeb8&&_0x5cf6c5['isActor']()&&_0x188337['push'](_0x8b2e9e(0x260),_0x5cf6c5,_0x219436);if(_0x57cd35[_0x8b2e9e(0xb2c)])_0x188337[_0x8b2e9e(0x6b3)](_0x8b2e9e(0x661),_0x5cf6c5,_0x1fbf11);if(_0x57cd35['WaitCount1']>0x0)_0x188337[_0x8b2e9e(0x6b3)](_0x8b2e9e(0xa9e),_0x57cd35['WaitCount1']);if(_0x57cd35[_0x8b2e9e(0xae6)])_0x188337[_0x8b2e9e(0x6b3)]('showAnimation',_0x5cf6c5,[_0x1cad9d],_0x1fbf11['item']()[_0x8b2e9e(0x1a3)]);if(_0x57cd35[_0x8b2e9e(0x286)]>0x0)_0x188337[_0x8b2e9e(0x6b3)](_0x8b2e9e(0xa9e),_0x57cd35[_0x8b2e9e(0x286)]);if(_0x57cd35['ActionEffect'])_0x188337[_0x8b2e9e(0x6b3)]('actionEffect',_0x5cf6c5,_0x1cad9d);}}_0x2aaeb8&&_0x5cf6c5['isActor']()&&_0x188337[_0x8b2e9e(0x6b3)]('clearActiveWeaponSet',_0x5cf6c5);if(_0x57cd35[_0x8b2e9e(0x689)])_0x188337['push'](_0x8b2e9e(0x703),_0x5cf6c5,_0x2af4fa,![]);_0x1e32e1[_0x8b2e9e(0x2d6)](_0x8b2e9e(0xa0f));}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x6ad),_0x620c74=>{const _0x1ab2e2=_0x478a06;if(!SceneManager[_0x1ab2e2(0x785)]())return;VisuMZ[_0x1ab2e2(0x91e)](_0x620c74,_0x620c74);const _0x345434=$gameTemp['getLastPluginCommandInterpreter'](),_0x5d2360=BattleManager[_0x1ab2e2(0x686)],_0x550d71=BattleManager[_0x1ab2e2(0x6f3)],_0x38a0b9=BattleManager[_0x1ab2e2(0x807)]?BattleManager[_0x1ab2e2(0x807)][_0x1ab2e2(0x144)](0x0):[],_0x2e30f0=BattleManager[_0x1ab2e2(0xae5)];if(!_0x345434||!_0x5d2360||!_0x550d71)return;if(!_0x5d2360[_0x1ab2e2(0x8dd)]())return;if(_0x620c74[_0x1ab2e2(0x689)])_0x2e30f0['push'](_0x1ab2e2(0x703),_0x550d71,_0x38a0b9,![]);if(_0x620c74[_0x1ab2e2(0x775)])_0x2e30f0[_0x1ab2e2(0x6b3)]('waitForNewLine');if(_0x620c74[_0x1ab2e2(0xaf7)])_0x2e30f0[_0x1ab2e2(0x6b3)]('waitForEffect');if(_0x620c74[_0x1ab2e2(0x367)])_0x2e30f0[_0x1ab2e2(0x6b3)](_0x1ab2e2(0x87d));if(_0x620c74[_0x1ab2e2(0x776)])_0x2e30f0[_0x1ab2e2(0x6b3)](_0x1ab2e2(0x7d3),_0x550d71);if(_0x620c74[_0x1ab2e2(0x6a1)])_0x2e30f0['push'](_0x1ab2e2(0x81a));_0x345434[_0x1ab2e2(0x2d6)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0xb8e),_0x2d4b93=>{const _0x39bfaf=_0x478a06;if(!SceneManager[_0x39bfaf(0x785)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x39bfaf(0x91e)](_0x2d4b93,_0x2d4b93);const _0x19967a=$gameTemp[_0x39bfaf(0xa99)](),_0x5da034=_0x2d4b93[_0x39bfaf(0x9a2)];if(!_0x19967a)return;$gameScreen[_0x39bfaf(0x1c8)](_0x2d4b93[_0x39bfaf(0x35e)],_0x2d4b93[_0x39bfaf(0x9e6)],_0x2d4b93[_0x39bfaf(0x48f)]);if(_0x5da034)_0x19967a[_0x39bfaf(0x2d6)]('battleAngle');}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x6fc),_0xfa3b27=>{const _0x7bd741=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x7bd741(0x7b2)])return;VisuMZ[_0x7bd741(0x91e)](_0xfa3b27,_0xfa3b27);const _0xdeedbd=$gameTemp[_0x7bd741(0xa99)](),_0x12a7a8=_0xfa3b27['WaitForAngle'];if(!_0xdeedbd)return;$gameScreen[_0x7bd741(0x1c8)](0x0,_0xfa3b27['Duration'],_0xfa3b27['EasingType']);if(_0x12a7a8)_0xdeedbd[_0x7bd741(0x2d6)](_0x7bd741(0x4f2));}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],'ActSeq_Angle_WaitForAngle',_0x4cfa1e=>{const _0x370d62=_0x478a06;if(!SceneManager[_0x370d62(0x785)]())return;if(!Imported[_0x370d62(0x7b2)])return;const _0x98cda1=$gameTemp[_0x370d62(0xa99)]();if(!_0x98cda1)return;_0x98cda1['setWaitMode'](_0x370d62(0x4f2));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x1a2),_0x27d4ff=>{const _0xe953d3=_0x478a06;if(!SceneManager[_0xe953d3(0x785)]())return;VisuMZ[_0xe953d3(0x91e)](_0x27d4ff,_0x27d4ff);const _0x25d453=$gameTemp[_0xe953d3(0xa99)](),_0x3fc635=BattleManager['_action'],_0x3ec44b=BattleManager['_subject'],_0x2d50f7=VisuMZ[_0xe953d3(0x10b)](_0x27d4ff[_0xe953d3(0x1e7)]),_0xe95453=_0x27d4ff[_0xe953d3(0x330)],_0x3fb4e7=BattleManager['_logWindow'];if(!_0x25d453||!_0x3fc635||!_0x3ec44b)return;if(!_0x3fc635[_0xe953d3(0x8dd)]())return;let _0x4d344d=_0x3fc635[_0xe953d3(0x8dd)]()['animationId'];if(_0x4d344d<0x0)_0x4d344d=_0x3ec44b['attackAnimationId1']();$gameTemp[_0xe953d3(0x251)](_0x2d50f7,_0x4d344d,_0xe95453),_0x27d4ff['WaitForAnimation']&&_0x25d453[_0xe953d3(0x2d6)](_0xe953d3(0x2d8));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Animation_AttackAnimation',_0x47023a=>{const _0x943fbc=_0x478a06;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x943fbc(0x91e)](_0x47023a,_0x47023a);const _0x21e2cf=$gameTemp[_0x943fbc(0xa99)](),_0xcb5f72=BattleManager['_subject'],_0x3a2a29=VisuMZ[_0x943fbc(0x10b)](_0x47023a[_0x943fbc(0x1e7)]),_0x237ce2=_0x47023a[_0x943fbc(0x330)],_0x529b66=BattleManager[_0x943fbc(0xae5)];if(!_0x21e2cf||!_0xcb5f72)return;const _0x9202f6=_0xcb5f72['attackAnimationId1']();$gameTemp[_0x943fbc(0x251)](_0x3a2a29,_0x9202f6,_0x237ce2),_0x47023a[_0x943fbc(0x445)]&&_0x21e2cf[_0x943fbc(0x2d6)](_0x943fbc(0x2d8));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Animation_AttackAnimation2',_0x70c777=>{const _0x1a24b0=_0x478a06;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1a24b0(0x91e)](_0x70c777,_0x70c777);const _0x2e8b42=_0x299689['attackAnimationIdSlot'](_0x70c777['Slot']);if(_0x2e8b42<=0x0)return;const _0x32c41=$gameTemp['getLastPluginCommandInterpreter'](),_0x299689=BattleManager[_0x1a24b0(0x6f3)],_0x16c766=VisuMZ['CreateActionSequenceTargets'](_0x70c777['Targets']),_0x2e566e=_0x70c777[_0x1a24b0(0x330)],_0xacd6bd=BattleManager[_0x1a24b0(0xae5)];if(!_0x32c41||!_0x299689)return;$gameTemp[_0x1a24b0(0x251)](_0x16c766,_0x2e8b42,_0x2e566e),_0x70c777['WaitForAnimation']&&_0x32c41[_0x1a24b0(0x2d6)](_0x1a24b0(0x2d8));}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],'ActSeq_Animation_BalloonAnimation',_0x2837b2=>{const _0x1da13d=_0x478a06;if(!SceneManager[_0x1da13d(0x785)]())return;VisuMZ[_0x1da13d(0x91e)](_0x2837b2,_0x2837b2);const _0x2dbdc3=$gameTemp[_0x1da13d(0xa99)](),_0x4d11f2=VisuMZ[_0x1da13d(0x10b)](_0x2837b2[_0x1da13d(0x1e7)]),_0x5cee4c=_0x2837b2[_0x1da13d(0xbcb)];let _0x354e05=0x0;switch(_0x5cee4c[_0x1da13d(0xabf)]()[_0x1da13d(0xb7d)]()){case'!':case _0x1da13d(0x2b8):_0x354e05=0x1;break;case'?':case _0x1da13d(0x658):_0x354e05=0x2;break;case _0x1da13d(0x275):case'NOTE':case _0x1da13d(0xa9f):case _0x1da13d(0x1eb):case'MUSICNOTE':_0x354e05=0x3;break;case _0x1da13d(0xbc3):case _0x1da13d(0xa65):_0x354e05=0x4;break;case'ANGLE':case _0x1da13d(0x572):_0x354e05=0x5;break;case'SWEAT':_0x354e05=0x6;break;case _0x1da13d(0xab7):case _0x1da13d(0xa1f):case'FRUSTRATION':_0x354e05=0x7;break;case'SILENCE':case _0x1da13d(0x5da):_0x354e05=0x8;break;case _0x1da13d(0x443):case'BULB':case'LIGHT\x20BULB':case _0x1da13d(0x106):case _0x1da13d(0x58e):_0x354e05=0x9;break;case'Z':case'ZZ':case _0x1da13d(0x697):case _0x1da13d(0x4b5):_0x354e05=0xa;break;case'USER-DEFINED\x201':_0x354e05=0xb;break;case'USER-DEFINED\x202':_0x354e05=0xc;break;case _0x1da13d(0x35b):_0x354e05=0xd;break;case _0x1da13d(0x654):_0x354e05=0xe;break;case _0x1da13d(0x827):_0x354e05=0xf;break;}for(const _0x36ee77 of _0x4d11f2){if(!_0x36ee77)continue;$gameTemp[_0x1da13d(0x40c)](_0x36ee77,_0x354e05);}_0x2837b2[_0x1da13d(0x190)]&&_0x2dbdc3&&(_0x2dbdc3[_0x1da13d(0xe3)](0x1),_0x2dbdc3['setWaitMode']('battleBalloon'));}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x29d),_0x352171=>{const _0x4b7a7e=_0x478a06;if(!SceneManager[_0x4b7a7e(0x785)]())return;if(!Imported[_0x4b7a7e(0x1fc)])return;VisuMZ[_0x4b7a7e(0x91e)](_0x352171,_0x352171);const _0x4d3445=$gameTemp['getLastPluginCommandInterpreter'](),_0x5de823=VisuMZ[_0x4b7a7e(0x10b)](_0x352171['Targets']),_0x38e2c2=_0x352171[_0x4b7a7e(0x714)];for(const _0x5a29f9 of _0x5de823){if(!_0x5a29f9)continue;$gameTemp[_0x4b7a7e(0x40c)](_0x5a29f9,[_0x38e2c2]);}_0x352171[_0x4b7a7e(0x190)]&&_0x4d3445&&(_0x4d3445[_0x4b7a7e(0xe3)](0x1),_0x4d3445[_0x4b7a7e(0x2d6)]('battleBalloon'));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Animation_BalloonIconRange',_0x1a624f=>{const _0x385f00=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_4_IconBalloons'])return;VisuMZ[_0x385f00(0x91e)](_0x1a624f,_0x1a624f);const _0x432a94=$gameTemp[_0x385f00(0xa99)](),_0x2b9201=VisuMZ[_0x385f00(0x10b)](_0x1a624f['Targets']),_0x33048d=Math[_0x385f00(0x7a1)](Number(_0x1a624f[_0x385f00(0xa89)]||0x0),Number(_0x1a624f[_0x385f00(0x8db)]||0x0)),_0x17d1a9=Math['max'](Number(_0x1a624f['startIcon']||0x0),Number(_0x1a624f[_0x385f00(0x8db)]||0x0)),_0x167ee2=[];for(let _0x24c3ae=_0x33048d;_0x24c3ae<=_0x17d1a9;_0x24c3ae++){_0x167ee2[_0x385f00(0x6b3)](_0x24c3ae);}for(const _0x2fa6c2 of _0x2b9201){if(!_0x2fa6c2)continue;$gameTemp[_0x385f00(0x40c)](_0x2fa6c2,_0x167ee2);}_0x1a624f['WaitComplete']&&_0x432a94&&(_0x432a94[_0x385f00(0xe3)](0x1),_0x432a94[_0x385f00(0x2d6)](_0x385f00(0x7ab)));}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x62a),_0x409ef3=>{const _0x50e055=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x50e055(0x1fc)])return;VisuMZ[_0x50e055(0x91e)](_0x409ef3,_0x409ef3);const _0x5a1018=$gameTemp['getLastPluginCommandInterpreter'](),_0x6e68e9=VisuMZ['CreateActionSequenceTargets'](_0x409ef3[_0x50e055(0x1e7)]),_0x37374c=_0x409ef3[_0x50e055(0x213)];for(const _0xbaf98e of _0x6e68e9){if(!_0xbaf98e)continue;$gameTemp[_0x50e055(0x40c)](_0xbaf98e,_0x37374c);}_0x409ef3[_0x50e055(0x190)]&&_0x5a1018&&(_0x5a1018['wait'](0x1),_0x5a1018[_0x50e055(0x2d6)](_0x50e055(0x7ab)));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Animation_CastAnimation',_0x22bf91=>{const _0x4cd74e=_0x478a06;if(!SceneManager[_0x4cd74e(0x785)]())return;VisuMZ['ConvertParams'](_0x22bf91,_0x22bf91);const _0x1ed916=$gameTemp[_0x4cd74e(0xa99)](),_0x7fcbe7=BattleManager[_0x4cd74e(0x686)],_0xd8246a=_0x22bf91[_0x4cd74e(0x330)],_0x26de12=VisuMZ[_0x4cd74e(0x10b)](_0x22bf91[_0x4cd74e(0x1e7)]);if(!_0x1ed916||!_0x7fcbe7)return;if(!_0x7fcbe7[_0x4cd74e(0x8dd)]())return;for(const _0x17f4ff of _0x26de12){if(!_0x17f4ff)continue;_0x17f4ff[_0x4cd74e(0x880)](_0x7fcbe7,_0xd8246a);}if(_0x22bf91[_0x4cd74e(0x445)])_0x1ed916['setWaitMode'](_0x4cd74e(0x2d8));}),PluginManager['registerCommand'](pluginData['name'],_0x478a06(0x8a4),_0x43547b=>{const _0x444f30=_0x478a06;VisuMZ[_0x444f30(0x91e)](_0x43547b,_0x43547b);const _0x595c4d=$gameTemp[_0x444f30(0xa99)](),_0x385530=VisuMZ[_0x444f30(0x10b)](_0x43547b[_0x444f30(0x1e7)]),_0x1f27f1=_0x43547b[_0x444f30(0x5e0)];if(!_0x1f27f1)return;for(const _0x442f31 of _0x385530){if(!_0x442f31)continue;if(!_0x442f31['isActor']())continue;_0x442f31[_0x444f30(0x609)](_0x1f27f1);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x615),_0x5075bd=>{const _0x2522fc=_0x478a06;VisuMZ['ConvertParams'](_0x5075bd,_0x5075bd);const _0x52d13d=_0x5075bd['ActorJS'](),_0x2b6a39=$gameActors[_0x2522fc(0x421)](_0x52d13d)||null;if(!_0x2b6a39){console['log'](_0x2522fc(0x5de));return;}const _0x332d58=_0x5075bd[_0x2522fc(0xaae)]();_0x2b6a39[_0x2522fc(0x609)](_0x332d58);}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x471),_0x4d4fa3=>{const _0x3c1fc8=_0x478a06;if(!SceneManager[_0x3c1fc8(0x785)]())return;VisuMZ[_0x3c1fc8(0x91e)](_0x4d4fa3,_0x4d4fa3);const _0x366025=$gameTemp[_0x3c1fc8(0xa99)](),_0x22ddd7=BattleManager['_subject'],_0x1f6c1e=VisuMZ[_0x3c1fc8(0x10b)](_0x4d4fa3[_0x3c1fc8(0x1e7)]),_0x48cdb0=_0x4d4fa3[_0x3c1fc8(0x330)];if(!_0x366025||!_0x22ddd7)return;const _0x5b5cf9=$dataSkilles[_0x22ddd7[_0x3c1fc8(0x2c3)]()],_0x472b5d=_0x5b5cf9[_0x3c1fc8(0x1a3)];$gameTemp['requestAnimation'](_0x1f6c1e,_0x472b5d,_0x48cdb0),_0x4d4fa3[_0x3c1fc8(0x445)]&&_0x366025['setWaitMode'](_0x3c1fc8(0x2d8));}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x69c),_0x173919=>{const _0x3f10a8=_0x478a06;if(!SceneManager[_0x3f10a8(0x785)]())return;VisuMZ[_0x3f10a8(0x91e)](_0x173919,_0x173919);const _0x294e5a=$gameTemp[_0x3f10a8(0xa99)](),_0x25d737=VisuMZ[_0x3f10a8(0x10b)](_0x173919[_0x3f10a8(0x1e7)]),_0x457ade=Number(_0x173919[_0x3f10a8(0xa24)]||0x1),_0x1fef16=$dataItems[_0x457ade],_0x5d12d5=_0x173919[_0x3f10a8(0x330)];if(!_0x294e5a)return;if(!_0x1fef16)return;let _0x408a95=_0x1fef16[_0x3f10a8(0x1a3)];$gameTemp[_0x3f10a8(0x251)](_0x25d737,_0x408a95,_0x5d12d5),_0x173919[_0x3f10a8(0x445)]&&_0x294e5a[_0x3f10a8(0x2d6)]('battleAnimation');}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Animation_PlayAtCoordinate',_0x547d63=>{const _0x2db68b=_0x478a06;if(!SceneManager[_0x2db68b(0x143)])return;if(!SceneManager[_0x2db68b(0x143)]['_spriteset'])return;if(!Imported[_0x2db68b(0x1a1)])return;VisuMZ['ConvertParams'](_0x547d63,_0x547d63);const _0x5b2825=$gameTemp['getLastPluginCommandInterpreter'](),_0x52e7f7=Math[_0x2db68b(0x801)](_0x547d63[_0x2db68b(0xb19)]),_0x221723=Math['round'](_0x547d63[_0x2db68b(0x9c2)]);$gameTemp['requestPointAnimation'](_0x52e7f7,_0x221723,_0x547d63[_0x2db68b(0x655)],_0x547d63[_0x2db68b(0x330)],_0x547d63['Mute']),_0x547d63['WaitComplete']&&_0x5b2825&&(SceneManager['_scene'][_0x2db68b(0x526)]['updatePointAnimations'](),_0x5b2825[_0x2db68b(0x2d6)]('battleAnimation'));}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x792),_0x18d37e=>{const _0xe7e22e=_0x478a06;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x18d37e,_0x18d37e);const _0x3c7be4=$gameTemp['getLastPluginCommandInterpreter'](),_0xcbd365=VisuMZ[_0xe7e22e(0x10b)](_0x18d37e['Targets']),_0x449e00=_0x18d37e['AnimationID'],_0x547ccf=_0x18d37e[_0xe7e22e(0x330)];if(!_0x3c7be4)return;$gameTemp[_0xe7e22e(0x251)](_0xcbd365,_0x449e00,_0x547ccf);if(_0x18d37e[_0xe7e22e(0x445)])_0x3c7be4['setWaitMode']('battleAnimation');}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],'ActSeq_Animation_ShowAnimationJS',_0x285639=>{const _0x6f25bb=_0x478a06;if(!SceneManager[_0x6f25bb(0x785)]())return;VisuMZ[_0x6f25bb(0x91e)](_0x285639,_0x285639);const _0x65f195=$gameTemp[_0x6f25bb(0xa99)](),_0x5b16c6=VisuMZ['CreateActionSequenceTargets'](_0x285639[_0x6f25bb(0x1e7)]),_0x58cf0b=Number(_0x285639[_0x6f25bb(0x655)])||0x1,_0x7e14a0=_0x285639['Mirror'];if(!_0x65f195)return;$gameTemp[_0x6f25bb(0x251)](_0x5b16c6,_0x58cf0b,_0x7e14a0);if(_0x285639[_0x6f25bb(0x445)])_0x65f195['setWaitMode'](_0x6f25bb(0x2d8));}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x761),_0x264474=>{const _0x5f3ac8=_0x478a06;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5f3ac8(0x91e)](_0x264474,_0x264474);const _0x2802a1=$gameTemp[_0x5f3ac8(0xa99)](),_0x391664=VisuMZ[_0x5f3ac8(0x10b)](_0x264474[_0x5f3ac8(0x1e7)]),_0x26452c=Number(_0x264474[_0x5f3ac8(0x5b9)]||0x1),_0x44e300=$dataSkills[_0x26452c],_0x32a43b=_0x264474[_0x5f3ac8(0x330)];if(!_0x2802a1)return;if(!_0x44e300)return;let _0x177dfb=_0x44e300[_0x5f3ac8(0x1a3)];$gameTemp[_0x5f3ac8(0x251)](_0x391664,_0x177dfb,_0x32a43b),_0x264474[_0x5f3ac8(0x445)]&&_0x2802a1[_0x5f3ac8(0x2d6)](_0x5f3ac8(0x2d8));}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x28c),_0x530518=>{const _0x483a37=_0x478a06;if(!SceneManager[_0x483a37(0x785)]())return;const _0x138f14=$gameTemp[_0x483a37(0xa99)]();if(!_0x138f14)return;_0x138f14['setWaitMode']('battleAnimation');}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x4d8),_0x5aef83=>{const _0x400373=_0x478a06;if(!SceneManager[_0x400373(0x785)]())return;VisuMZ[_0x400373(0x91e)](_0x5aef83,_0x5aef83);const _0x56d13c=BattleManager[_0x400373(0xae5)],_0x2ae6d5=_0x5aef83[_0x400373(0x6a0)]&&Imported['VisuMZ_4_CombatLog'];_0x56d13c['addText'](_0x5aef83[_0x400373(0x2a3)]),_0x2ae6d5&&Imported[_0x400373(0xb6e)]&&$gameSystem[_0x400373(0x4ae)](_0x5aef83[_0x400373(0x2a3)]||'',_0x5aef83[_0x400373(0x69d)]||0x0);}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x134),_0x48662d=>{const _0x1d94f0=_0x478a06;if(!SceneManager[_0x1d94f0(0x785)]())return;const _0x14935d=BattleManager[_0x1d94f0(0xae5)];_0x14935d[_0x1d94f0(0x87d)]();}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x55b),_0x48b846=>{const _0x5bff6a=_0x478a06;if(!SceneManager[_0x5bff6a(0x785)]())return;const _0x30528e=$gameTemp[_0x5bff6a(0xa99)](),_0x52cd66=BattleManager[_0x5bff6a(0x686)],_0x3d0cd3=BattleManager['_subject'],_0x26672a=BattleManager[_0x5bff6a(0xae5)];if(!_0x30528e||!_0x52cd66||!_0x3d0cd3)return;if(!_0x52cd66[_0x5bff6a(0x8dd)]())return;_0x26672a['displayAction'](_0x3d0cd3,_0x52cd66[_0x5bff6a(0x8dd)]()),_0x30528e[_0x5bff6a(0x2d6)](_0x5bff6a(0xa0f));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x8fe),_0x5da6a4=>{const _0x21a317=_0x478a06;if(!SceneManager['isSceneBattle']())return;const _0x135f36=BattleManager[_0x21a317(0xae5)];_0x135f36['popBaseLine']();}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_BattleLog_PushBaseLine',_0x50cc5f=>{const _0x3cd6e3=_0x478a06;if(!SceneManager['isSceneBattle']())return;const _0x4947c9=BattleManager[_0x3cd6e3(0xae5)];_0x4947c9[_0x3cd6e3(0x9aa)]();}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x99e),_0x2fbc03=>{const _0x222126=_0x478a06;if(!SceneManager[_0x222126(0x785)]())return;const _0x4e9453=BattleManager[_0x222126(0xae5)];_0x4e9453[_0x222126(0x85c)]();}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x147),_0x21c0dd=>{const _0x258a19=_0x478a06;if(!SceneManager[_0x258a19(0x785)]())return;VisuMZ[_0x258a19(0x91e)](_0x21c0dd,_0x21c0dd),SceneManager[_0x258a19(0x143)][_0x258a19(0x311)](_0x21c0dd[_0x258a19(0xa73)]);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0xb34),_0x3c16cf=>{const _0x257a08=_0x478a06;if(!SceneManager[_0x257a08(0x785)]())return;const _0x15b723=$gameTemp[_0x257a08(0xa99)]();_0x15b723[_0x257a08(0x2d6)]('battlelog');}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_BattleLog_WaitForNewLine',_0xbf207e=>{const _0x55f264=_0x478a06;if(!SceneManager[_0x55f264(0x785)]())return;const _0x27c900=$gameTemp[_0x55f264(0xa99)](),_0xccdaa0=BattleManager[_0x55f264(0xae5)];_0xccdaa0[_0x55f264(0x39f)](),_0x27c900[_0x55f264(0x2d6)]('battlelog');}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x56c),_0x326ae1=>{const _0x520ac8=_0x478a06;if(!SceneManager[_0x520ac8(0x785)]())return;if(!Imported[_0x520ac8(0x7b2)])return;VisuMZ['ConvertParams'](_0x326ae1,_0x326ae1);const _0x23bbef=$gameScreen['battleCameraData']();_0x23bbef['cameraClamp']=_0x326ae1['Setting'];}),PluginManager[_0x478a06(0x35c)](pluginData['name'],'ActSeq_Camera_FocusPoint',_0x598ee=>{const _0x325645=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x325645(0x7b2)])return;VisuMZ[_0x325645(0x91e)](_0x598ee,_0x598ee);const _0x5aed89=$gameTemp['getLastPluginCommandInterpreter'](),_0x457706=_0x598ee[_0x325645(0x5e1)];$gameScreen[_0x325645(0x6a8)](_0x598ee[_0x325645(0x2e1)],_0x598ee['FocusY'],_0x598ee[_0x325645(0x9e6)],_0x598ee[_0x325645(0x48f)]);if(_0x457706)_0x5aed89[_0x325645(0x2d6)]('battleCamera');}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x619),_0xe76739=>{const _0x1c6edd=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1c6edd(0x7b2)])return;VisuMZ[_0x1c6edd(0x91e)](_0xe76739,_0xe76739);const _0x71491=$gameTemp[_0x1c6edd(0xa99)](),_0x38bbc9=VisuMZ['CreateActionSequenceTargets'](_0xe76739['Targets']),_0x2e6d4d=_0xe76739['WaitForCamera'];$gameScreen[_0x1c6edd(0x448)](_0x38bbc9,_0xe76739[_0x1c6edd(0x9e6)],_0xe76739[_0x1c6edd(0x48f)]);if(_0x2e6d4d)_0x71491['setWaitMode'](_0x1c6edd(0x3b2));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Camera_Offset',_0xc39f03=>{const _0x4bc9bf=_0x478a06;if(!SceneManager[_0x4bc9bf(0x785)]())return;if(!Imported[_0x4bc9bf(0x7b2)])return;VisuMZ[_0x4bc9bf(0x91e)](_0xc39f03,_0xc39f03);const _0x27dd3d=$gameTemp[_0x4bc9bf(0xa99)](),_0x59fbe1=_0xc39f03[_0x4bc9bf(0x5e1)];$gameScreen['setBattleCameraOffset'](_0xc39f03[_0x4bc9bf(0xa50)],_0xc39f03[_0x4bc9bf(0x1e8)],_0xc39f03['Duration'],_0xc39f03[_0x4bc9bf(0x48f)]);if(_0x59fbe1)_0x27dd3d[_0x4bc9bf(0x2d6)](_0x4bc9bf(0x3b2));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x855),_0x148216=>{const _0x5892e2=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5892e2(0x7b2)])return;VisuMZ[_0x5892e2(0x91e)](_0x148216,_0x148216);const _0x2186d6=$gameTemp[_0x5892e2(0xa99)](),_0x27d31c=_0x148216['ResetFocus'],_0x4886d0=_0x148216['ResetOffset'],_0x24763e=_0x148216[_0x5892e2(0x5e1)];if(_0x27d31c){const _0x27d120=Math[_0x5892e2(0x801)](Graphics[_0x5892e2(0xaad)]/0x2),_0x45db02=Math[_0x5892e2(0x801)](Graphics[_0x5892e2(0x15a)]/0x2);$gameScreen[_0x5892e2(0x6a8)](_0x27d120,_0x45db02,_0x148216[_0x5892e2(0x9e6)],_0x148216[_0x5892e2(0x48f)]);}_0x4886d0&&$gameScreen['setBattleCameraOffset'](0x0,0x0,_0x148216[_0x5892e2(0x9e6)],_0x148216[_0x5892e2(0x48f)]);if(_0x24763e)_0x2186d6[_0x5892e2(0x2d6)](_0x5892e2(0x3b2));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Camera_WaitForCamera',_0x5aef14=>{const _0x24c99f=_0x478a06;if(!SceneManager[_0x24c99f(0x785)]())return;if(!Imported[_0x24c99f(0x7b2)])return;const _0xa4a4f4=$gameTemp[_0x24c99f(0xa99)]();if(!_0xa4a4f4)return;_0xa4a4f4[_0x24c99f(0x2d6)](_0x24c99f(0x3b2));}),VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x3ba)]=function(_0x5abdb4){const _0x16ad05=_0x478a06;_0x5abdb4[_0x16ad05(0x8c8)]='';const _0x29de4c=VisuMZ[_0x16ad05(0x2fd)][_0x16ad05(0x3ba)](_0x5abdb4),_0x45c4c6=VisuMZ[_0x16ad05(0x10b)](_0x5abdb4[_0x16ad05(0x1e7)])[0x0]||null;return _0x45c4c6&&(_0x29de4c[_0x16ad05(0x8c8)]=_0x45c4c6[_0x16ad05(0xf7)](),_0x29de4c['portraitIndex']=_0x45c4c6[_0x16ad05(0x6c6)](),_0x29de4c['portraitHue']=_0x45c4c6[_0x16ad05(0x577)](),_0x29de4c['portraitType']=_0x45c4c6['visualCutinPortraitType'](),_0x45c4c6['isEnemy']()&&(_0x45c4c6[_0x16ad05(0x78d)]()&&(_0x29de4c[_0x16ad05(0x49f)]=!_0x29de4c[_0x16ad05(0x49f)]),_0x45c4c6[_0x16ad05(0xb45)]()&&(_0x29de4c['portraitFlipVert']=!_0x29de4c[_0x16ad05(0x794)]),_0x29de4c[_0x16ad05(0x12d)]===_0x16ad05(0x298)&&(_0x29de4c['portraitFlipHorz']=!_0x29de4c['portraitFlipHorz']),_0x5abdb4[_0x16ad05(0x650)][_0x16ad05(0x5a5)]&&(_0x29de4c[_0x16ad05(0x1e3)]*=-0x1),_0x5abdb4[_0x16ad05(0x650)]['parallaxScrollYinvertEnemy']&&(_0x29de4c[_0x16ad05(0x150)]*=-0x1),_0x29de4c[_0x16ad05(0x289)]+=_0x5abdb4[_0x16ad05(0x650)][_0x16ad05(0x1ea)]??0x0)),_0x29de4c;},PluginManager[_0x478a06(0x35c)](pluginData['name'],'ActSeq_Cutin_AddVisualCutinEffect',_0x2be547=>{const _0x21a573=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x21a573(0x9be)])return;VisuMZ[_0x21a573(0x91e)](_0x2be547,_0x2be547);const _0x54c805=VisuMZ['BattleCore'][_0x21a573(0x3ba)](_0x2be547);SceneManager[_0x21a573(0x143)]['startVisualCutin'](_0x54c805);const _0x371dbb=$gameTemp[_0x21a573(0xa99)]();_0x371dbb&&_0x2be547[_0x21a573(0xbad)]&&_0x371dbb[_0x21a573(0x2d6)]('cutinEnter');}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x554),_0x26df33=>{const _0x330f89=_0x478a06;if(!SceneManager[_0x330f89(0x785)]())return;if(!Imported[_0x330f89(0x9be)])return;VisuMZ[_0x330f89(0x91e)](_0x26df33,_0x26df33),SceneManager['_scene'][_0x330f89(0x919)]();const _0x39a445=$gameTemp[_0x330f89(0xa99)]();_0x39a445&&_0x26df33['WaitForExit']&&_0x39a445['setWaitMode'](_0x330f89(0x415));}),PluginManager[_0x478a06(0x35c)](pluginData['name'],'ActSeq_Cutin_EndVisualCutinEffectType',_0x5b6b7d=>{const _0x1e1223=_0x478a06;if(!SceneManager[_0x1e1223(0x785)]())return;if(!Imported[_0x1e1223(0x9be)])return;VisuMZ['ConvertParams'](_0x5b6b7d,_0x5b6b7d);const _0x31f955=_0x5b6b7d[_0x1e1223(0x47c)]['toLowerCase']()['trim']();SceneManager['_scene'][_0x1e1223(0x949)](_0x31f955);const _0x3680be=$gameTemp[_0x1e1223(0xa99)]();_0x3680be&&_0x5b6b7d['WaitForExit']&&_0x3680be[_0x1e1223(0x2d6)](_0x1e1223(0x415));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x4dc),_0xf7342c=>{const _0x37b340=_0x478a06;if(!SceneManager[_0x37b340(0x785)]())return;if(!Imported[_0x37b340(0x9be)])return;const _0x58e2d3=$gameTemp[_0x37b340(0xa99)]();_0x58e2d3[_0x37b340(0x2d6)](_0x37b340(0x293));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x428),_0x126ecc=>{const _0x1dbd9f=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1dbd9f(0x9be)])return;const _0x3430f7=$gameTemp[_0x1dbd9f(0xa99)]();_0x3430f7[_0x1dbd9f(0x2d6)](_0x1dbd9f(0x415));}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],'ActSeq_DB_DragonbonesMotionAni',_0x21701d=>{const _0x51e74b=_0x478a06;if(!SceneManager[_0x51e74b(0x785)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ['ConvertParams'](_0x21701d,_0x21701d);const _0x1d0632=VisuMZ[_0x51e74b(0x10b)](_0x21701d['Targets']),_0x417ccb=_0x21701d[_0x51e74b(0x3d5)]['toLowerCase']()['trim']();for(const _0x795216 of _0x1d0632){if(!_0x795216)continue;_0x795216['requestDragonbonesAnimation'](_0x417ccb);}}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x44b),_0x29c1c7=>{const _0x19d8dd=_0x478a06;if(!SceneManager[_0x19d8dd(0x785)]())return;if(!Imported[_0x19d8dd(0x795)])return;VisuMZ[_0x19d8dd(0x91e)](_0x29c1c7,_0x29c1c7);const _0x219883=VisuMZ[_0x19d8dd(0x10b)](_0x29c1c7[_0x19d8dd(0x1e7)]),_0x3c77ae=_0x29c1c7[_0x19d8dd(0x8ad)];for(const _0x2bca1d of _0x219883){if(!_0x2bca1d)continue;_0x2bca1d[_0x19d8dd(0x932)]()[_0x19d8dd(0x7cd)]=_0x3c77ae;}}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x691),_0x50f161=>{const _0x21a867=_0x478a06;if(!SceneManager[_0x21a867(0x785)]())return;if(!Imported[_0x21a867(0xa7a)])return;VisuMZ['ConvertParams'](_0x50f161,_0x50f161);const _0x1464ab=BattleManager['_action'],_0xf64010=_0x50f161['Elements'];if(!_0x1464ab)return;_0x1464ab[_0x21a867(0x5bd)]=_0xf64010;}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Element_Clear',_0x386118=>{const _0x32d90e=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x32d90e(0xa7a)])return;const _0x3088ba=BattleManager[_0x32d90e(0x686)];if(!_0x3088ba)return;_0x3088ba[_0x32d90e(0xbae)]();}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x5b6),_0x2ae9db=>{const _0x2d399b=_0x478a06;if(!SceneManager[_0x2d399b(0x785)]())return;if(!Imported[_0x2d399b(0xa7a)])return;VisuMZ[_0x2d399b(0x91e)](_0x2ae9db,_0x2ae9db);const _0x1f4ce0=BattleManager['_action'],_0x88d7b6=_0x2ae9db[_0x2d399b(0x4bd)];if(!_0x1f4ce0)return;_0x1f4ce0['_battleCoreForcedElements']=_0x88d7b6;}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x135),_0x3f4798=>{const _0x345698=_0x478a06;if(!SceneManager[_0x345698(0x785)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x2ba66e=BattleManager[_0x345698(0x686)];if(!_0x2ba66e)return;_0x2ba66e['_battleCoreNoElement']=!![];}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x9e0),_0x20aed3=>{const _0x7dcf1c=_0x478a06;VisuMZ['BattleGridSystem'][_0x7dcf1c(0x9e0)](_0x20aed3);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x19a),_0x1f2d0a=>{const _0x24c781=_0x478a06;VisuMZ[_0x24c781(0x2bb)][_0x24c781(0x19a)](_0x1f2d0a);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0xb39),_0x27f470=>{const _0x112920=_0x478a06;VisuMZ[_0x112920(0x2bb)][_0x112920(0xb39)](_0x27f470);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x550),_0x2000c8=>{const _0x4bc13c=_0x478a06;VisuMZ[_0x4bc13c(0x2bb)][_0x4bc13c(0xb39)](_0x2000c8);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x52c),_0x13005b=>{const _0x5ae304=_0x478a06;VisuMZ[_0x5ae304(0x2bb)][_0x5ae304(0x52c)](_0x13005b);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Grid_AnimationJsAtNode',_0x1b6850=>{const _0x11ca38=_0x478a06;VisuMZ[_0x11ca38(0x2bb)]['ActSeq_Grid_AnimationJsAtNode'](_0x1b6850);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x5cb),_0x2ba8f2=>{const _0x532e35=_0x478a06;VisuMZ[_0x532e35(0x2bb)]['ActSeq_Grid_AnimationTypeAtNode'](_0x2ba8f2);}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x50f),_0x72d152=>{const _0x569960=_0x478a06;VisuMZ[_0x569960(0x2bb)][_0x569960(0x50f)](_0x72d152);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Grid_MoveTargetsInDirection',_0x5a2f2c=>{const _0x13aa58=_0x478a06;VisuMZ[_0x13aa58(0x2bb)][_0x13aa58(0x4d9)](_0x5a2f2c);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x996),_0x77f3bc=>{const _0x1f54e4=_0x478a06;VisuMZ[_0x1f54e4(0x2bb)]['ActSeq_Grid_PullToTargetNode'](_0x77f3bc);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x9c4),_0x3b389c=>{const _0x31f44b=_0x478a06;VisuMZ['BattleGridSystem'][_0x31f44b(0x9c4)](_0x3b389c);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x266),_0x5afe2a=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_RemovePassiveStatesFromNode'](_0x5afe2a);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x96b),_0x3a0abc=>{const _0x2cc586=_0x478a06;VisuMZ[_0x2cc586(0x2bb)][_0x2cc586(0x96b)](_0x3a0abc);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x397),_0x397eda=>{const _0x2857ea=_0x478a06;VisuMZ[_0x2857ea(0x2bb)]['ActSeq_Grid_TeleportToNode'](_0x397eda);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0xa93),_0x23b58c=>{const _0x125f54=_0x478a06;VisuMZ['BattleGridSystem'][_0x125f54(0xa93)](_0x23b58c);}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x8b1),_0x40a28e=>{const _0x282b6e=_0x478a06;if(!Imported[_0x282b6e(0xfd)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x282b6e(0x91e)](_0x40a28e,_0x40a28e);const _0x50c282=VisuMZ[_0x282b6e(0x10b)](_0x40a28e[_0x282b6e(0x1e7)]);for(const _0xf94124 of _0x50c282){if(!_0xf94124)continue;_0xf94124['removeHorrorEffect']('noise'),_0xf94124[_0x282b6e(0x9bf)]('glitch'),_0xf94124[_0x282b6e(0x9bf)]('tv'),_0xf94124['clearHorrorEffects']();}$gamePlayer[_0x282b6e(0x85c)]();}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0xbc5),_0x2e2d8c=>{const _0x2c15d9=_0x478a06;if(!Imported[_0x2c15d9(0xfd)])return;if(!SceneManager[_0x2c15d9(0x785)]())return;VisuMZ['ConvertParams'](_0x2e2d8c,_0x2e2d8c);const _0x5f50b0=VisuMZ[_0x2c15d9(0x10b)](_0x2e2d8c[_0x2c15d9(0x1e7)]),_0x5a1088='glitch';_0x2e2d8c['sliceMin']=Math[_0x2c15d9(0x4f5)](_0x2e2d8c[_0x2c15d9(0x8b9)]/0x2),_0x2e2d8c[_0x2c15d9(0x809)]=_0x2e2d8c[_0x2c15d9(0x8b9)],_0x2e2d8c[_0x2c15d9(0x482)]=!![];for(const _0x1f8ed2 of _0x5f50b0){if(!_0x1f8ed2)continue;_0x1f8ed2[_0x2c15d9(0x180)](_0x5a1088,_0x2e2d8c);}$gamePlayer[_0x2c15d9(0x85c)]();}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0xb42),_0x246962=>{const _0x445f71=_0x478a06;if(!Imported[_0x445f71(0xfd)])return;if(!SceneManager[_0x445f71(0x785)]())return;VisuMZ[_0x445f71(0x91e)](_0x246962,_0x246962);const _0x340f7f=VisuMZ[_0x445f71(0x10b)](_0x246962[_0x445f71(0x1e7)]);for(const _0x3ceba6 of _0x340f7f){if(!_0x3ceba6)continue;_0x3ceba6['removeHorrorEffect'](_0x445f71(0x2dd));}$gamePlayer[_0x445f71(0x85c)]();}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x977),_0x1b8b18=>{const _0x19331b=_0x478a06;if(!Imported[_0x19331b(0xfd)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x19331b(0x91e)](_0x1b8b18,_0x1b8b18);const _0x7e8d5d=VisuMZ[_0x19331b(0x10b)](_0x1b8b18[_0x19331b(0x1e7)]),_0x5f08f0=_0x19331b(0x102);for(const _0x361262 of _0x7e8d5d){if(!_0x361262)continue;_0x361262[_0x19331b(0x180)](_0x5f08f0,_0x1b8b18);}$gamePlayer['refresh']();}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Horror_NoiseRemove',_0x5c8779=>{const _0x4f5402=_0x478a06;if(!Imported[_0x4f5402(0xfd)])return;if(!SceneManager[_0x4f5402(0x785)]())return;VisuMZ[_0x4f5402(0x91e)](_0x5c8779,_0x5c8779);const _0xffd7f=VisuMZ[_0x4f5402(0x10b)](_0x5c8779['Targets']);for(const _0x1033b5 of _0xffd7f){if(!_0x1033b5)continue;_0x1033b5[_0x4f5402(0x9bf)]('noise');}$gamePlayer[_0x4f5402(0x85c)]();}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Horror_TVCreate',_0x22992e=>{const _0x23c274=_0x478a06;if(!Imported[_0x23c274(0xfd)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x23c274(0x91e)](_0x22992e,_0x22992e);const _0x34db31=VisuMZ[_0x23c274(0x10b)](_0x22992e[_0x23c274(0x1e7)]),_0x844d78='tv';for(const _0x2641de of _0x34db31){if(!_0x2641de)continue;_0x2641de[_0x23c274(0x180)](_0x844d78,_0x22992e);}$gamePlayer[_0x23c274(0x85c)]();}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Horror_TVRemove',_0x1d23b5=>{const _0x321f5a=_0x478a06;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x321f5a(0x785)]())return;VisuMZ[_0x321f5a(0x91e)](_0x1d23b5,_0x1d23b5);const _0x97e741=VisuMZ[_0x321f5a(0x10b)](_0x1d23b5['Targets']);for(const _0xee2a00 of _0x97e741){if(!_0xee2a00)continue;_0xee2a00[_0x321f5a(0x9bf)]('tv');}$gamePlayer[_0x321f5a(0x85c)]();}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x8df),_0x475ecd=>{const _0x5fe1ee=_0x478a06;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x4d2910=SceneManager[_0x5fe1ee(0x143)]['_spriteset'];if(!_0x4d2910)return;if(VisuMZ[_0x5fe1ee(0xba4)][_0x5fe1ee(0x784)]<=1.04){alert(_0x5fe1ee(0x364)),SceneManager[_0x5fe1ee(0x834)]();return;}VisuMZ[_0x5fe1ee(0x91e)](_0x475ecd,_0x475ecd);const _0x463bec=_0x475ecd['Enable'];_0x4d2910[_0x5fe1ee(0x25d)](_0x463bec);}),PluginManager['registerCommand'](pluginData['name'],_0x478a06(0x1bf),_0x20526a=>{const _0x3a443b=_0x478a06;if(!SceneManager[_0x3a443b(0x785)]())return;if(!Imported[_0x3a443b(0x21d)])return;const _0x48e735=SceneManager[_0x3a443b(0x143)][_0x3a443b(0x526)];if(!_0x48e735)return;VisuMZ[_0x3a443b(0x91e)](_0x20526a,_0x20526a);const _0x560e0f=_0x20526a['Intensity']||0x1,_0x5ae6b1=_0x20526a[_0x3a443b(0x9e6)]||0x1,_0x538392=_0x20526a[_0x3a443b(0x48f)]||_0x3a443b(0x4df);_0x48e735[_0x3a443b(0xb14)](_0x560e0f,_0x5ae6b1,_0x538392);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Impact_Desaturate',_0x36a67d=>{const _0x26b9e8=_0x478a06;if(!Imported[_0x26b9e8(0x21d)])return;const _0xe15a23=SceneManager['_scene'][_0x26b9e8(0x526)];if(!_0xe15a23)return;if(VisuMZ[_0x26b9e8(0xba4)][_0x26b9e8(0x784)]<=1.04){alert(_0x26b9e8(0x364)),SceneManager[_0x26b9e8(0x834)]();return;}VisuMZ[_0x26b9e8(0x91e)](_0x36a67d,_0x36a67d);const _0x4a09c4=_0x36a67d[_0x26b9e8(0x35f)];_0xe15a23[_0x26b9e8(0x8bd)](_0x4a09c4);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Impact_MotionBlurScreen',_0x3e56ce=>{const _0x5dadaf=_0x478a06;if(!SceneManager[_0x5dadaf(0x785)]())return;if(!Imported[_0x5dadaf(0x21d)])return;const _0x2d9b04=SceneManager['_scene'][_0x5dadaf(0x526)];if(!_0x2d9b04)return;VisuMZ['ConvertParams'](_0x3e56ce,_0x3e56ce);const _0x33c94a=Number(_0x3e56ce[_0x5dadaf(0x35e)])||0x0,_0x2a22dd=Number(_0x3e56ce['Rate']),_0x14ac92=_0x3e56ce[_0x5dadaf(0x9e6)]||0x1,_0x3b86ce=_0x3e56ce['EasingType']||_0x5dadaf(0x4df);_0x2d9b04[_0x5dadaf(0x322)](_0x33c94a,_0x2a22dd,_0x14ac92,_0x3b86ce);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x432),_0x4550ce=>{const _0x1df445=_0x478a06;if(!SceneManager[_0x1df445(0x785)]())return;if(!Imported[_0x1df445(0x21d)])return;const _0x10528a=SceneManager[_0x1df445(0x143)][_0x1df445(0x526)];if(!_0x10528a)return;VisuMZ[_0x1df445(0x91e)](_0x4550ce,_0x4550ce);const _0x1eefaf=Number(_0x4550ce[_0x1df445(0x35e)])||0x0,_0x11dc09=Number(_0x4550ce[_0x1df445(0x2ba)]),_0xade0dd=_0x4550ce[_0x1df445(0x9e6)]||0x1,_0x3de5ac=_0x4550ce['EasingType']||_0x1df445(0x4df),_0x578d5b=VisuMZ['CreateActionSequenceTargets'](_0x4550ce[_0x1df445(0x1e7)]);for(const _0x1d8585 of _0x578d5b){if(!_0x1d8585)continue;if(!_0x1d8585['battler']())continue;_0x1d8585[_0x1df445(0x244)]()[_0x1df445(0x322)](_0x1eefaf,_0x11dc09,_0xade0dd,_0x3de5ac);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Impact_MotionTrailCreate',_0x5a9fc9=>{const _0x171dd7=_0x478a06;if(!SceneManager[_0x171dd7(0x785)]())return;if(!Imported[_0x171dd7(0x21d)])return;VisuMZ[_0x171dd7(0x91e)](_0x5a9fc9,_0x5a9fc9);const _0x5271c0={'delay':_0x5a9fc9[_0x171dd7(0x206)],'duration':_0x5a9fc9[_0x171dd7(0x3a2)],'hue':_0x5a9fc9[_0x171dd7(0x430)],'opacityStart':_0x5a9fc9[_0x171dd7(0x82d)],'tone':_0x5a9fc9['tone'],'visible':!![]},_0xab689=VisuMZ[_0x171dd7(0x10b)](_0x5a9fc9['Targets']);for(const _0x18389a of _0xab689){if(!_0x18389a)continue;_0x18389a[_0x171dd7(0x54e)](_0x5271c0);}}),PluginManager[_0x478a06(0x35c)](pluginData['name'],'ActSeq_Impact_MotionTrailRemove',_0x2746cf=>{const _0x3a9e97=_0x478a06;if(!SceneManager[_0x3a9e97(0x785)]())return;if(!Imported[_0x3a9e97(0x21d)])return;VisuMZ[_0x3a9e97(0x91e)](_0x2746cf,_0x2746cf);const _0x1053f3=VisuMZ['CreateActionSequenceTargets'](_0x2746cf['Targets']);for(const _0x2b3606 of _0x1053f3){if(!_0x2b3606)continue;_0x2b3606['clearBattlerMotionTrailData']();}}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x23e),_0x8ca675=>{const _0x27fc1c=_0x478a06;if(!Imported[_0x27fc1c(0x21d)])return;const _0x2319c3=SceneManager['_scene'][_0x27fc1c(0x526)];if(!_0x2319c3)return;if(VisuMZ[_0x27fc1c(0xba4)][_0x27fc1c(0x784)]<=1.04){alert(_0x27fc1c(0x364)),SceneManager[_0x27fc1c(0x834)]();return;}VisuMZ[_0x27fc1c(0x91e)](_0x8ca675,_0x8ca675);const _0x3cdaf5=_0x8ca675[_0x27fc1c(0x35f)];_0x2319c3['setupNegativeImpactFilter'](_0x3cdaf5);}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x29f),_0x493f22=>{const _0x2731d3=_0x478a06;if(!Imported[_0x2731d3(0x21d)])return;const _0x1939a2=SceneManager[_0x2731d3(0x143)][_0x2731d3(0x526)];if(!_0x1939a2)return;if(VisuMZ[_0x2731d3(0xba4)][_0x2731d3(0x784)]<=1.04){alert(_0x2731d3(0x364)),SceneManager[_0x2731d3(0x834)]();return;}VisuMZ[_0x2731d3(0x91e)](_0x493f22,_0x493f22);const _0x28af83=_0x493f22[_0x2731d3(0x35f)];_0x1939a2['setupOversaturateImpactFilter'](_0x28af83);}),PluginManager[_0x478a06(0x35c)](pluginData['name'],'ActSeq_Impact_ShockwavePoint',_0x78fdfe=>{const _0x272bd0=_0x478a06;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3b47c5=SceneManager[_0x272bd0(0x143)][_0x272bd0(0x526)];if(!_0x3b47c5)return;VisuMZ[_0x272bd0(0x91e)](_0x78fdfe,_0x78fdfe);const _0x46bc32=_0x78fdfe['X']||0x0,_0x28cf04=_0x78fdfe['Y']||0x0,_0x5298c3=_0x78fdfe[_0x272bd0(0xb01)]||0x0,_0x7e4b3c=_0x78fdfe[_0x272bd0(0x3b5)]||0x0,_0x1cf31=_0x78fdfe[_0x272bd0(0x9e6)]||0x1;_0x3b47c5[_0x272bd0(0x234)](_0x46bc32,_0x28cf04,_0x5298c3,_0x7e4b3c,_0x1cf31);}),PluginManager['registerCommand'](pluginData['name'],_0x478a06(0x122),_0x5caa5a=>{const _0x302890=_0x478a06;if(!SceneManager[_0x302890(0x785)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3e5944=SceneManager['_scene'][_0x302890(0x526)];if(!_0x3e5944)return;VisuMZ[_0x302890(0x91e)](_0x5caa5a,_0x5caa5a);const _0x2d5564=VisuMZ[_0x302890(0x10b)](_0x5caa5a[_0x302890(0x1e7)]),_0x12cccf=_0x5caa5a[_0x302890(0x6f8)],_0x172d24=_0x5caa5a[_0x302890(0xa50)]||0x0,_0x3561fb=_0x5caa5a[_0x302890(0x1e8)]||0x0,_0x440b43=_0x5caa5a[_0x302890(0xb01)]||0x0,_0xd9da3=_0x5caa5a['Wave']||0x0,_0x403264=_0x5caa5a[_0x302890(0x9e6)]||0x1;for(const _0x18a755 of _0x2d5564){if(!_0x18a755)continue;if(!_0x18a755['battler']())continue;const _0x54aee8=_0x18a755['battler']();let _0x5e68ff=_0x54aee8[_0x302890(0x392)],_0x1716b8=_0x54aee8[_0x302890(0xb38)];_0x5e68ff+=(Graphics[_0x302890(0xaad)]-Graphics[_0x302890(0xb0a)])/0x2,_0x1716b8+=(Graphics[_0x302890(0x15a)]-Graphics[_0x302890(0xb21)])/0x2;if(_0x12cccf[_0x302890(0x85a)](/front/i))_0x5e68ff+=(_0x18a755[_0x302890(0x8e3)]()?0x1:-0x1)*_0x54aee8[_0x302890(0x738)]()/0x2;else _0x12cccf['match'](/back/i)&&(_0x5e68ff+=(_0x18a755[_0x302890(0x8e3)]()?-0x1:0x1)*_0x54aee8['mainSpriteWidth']()/0x2);if(_0x12cccf[_0x302890(0x85a)](/head/i))_0x1716b8-=_0x54aee8[_0x302890(0x4c9)]();else _0x12cccf['match'](/center/i)&&(_0x1716b8-=_0x54aee8[_0x302890(0x4c9)]()/0x2);_0x5e68ff+=_0x172d24,_0x1716b8+=_0x3561fb,_0x3e5944[_0x302890(0x234)](_0x5e68ff,_0x1716b8,_0x440b43,_0xd9da3,_0x403264);}}),PluginManager[_0x478a06(0x35c)](pluginData['name'],'ActSeq_Impact_ShockwaveCenterTargets',_0x4bd6e4=>{const _0x4d89ec=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4d89ec(0x21d)])return;const _0xcd0fc8=SceneManager['_scene'][_0x4d89ec(0x526)];if(!_0xcd0fc8)return;VisuMZ[_0x4d89ec(0x91e)](_0x4bd6e4,_0x4bd6e4);const _0x41d6e3=VisuMZ[_0x4d89ec(0x10b)](_0x4bd6e4[_0x4d89ec(0x1e7)]),_0xb8f8a7=_0x4bd6e4['TargetLocation'],_0x209c13=_0x4bd6e4['OffsetX']||0x0,_0x10e6cd=_0x4bd6e4[_0x4d89ec(0x1e8)]||0x0,_0x485de7=_0x4bd6e4[_0x4d89ec(0xb01)]||0x0,_0x4e1d83=_0x4bd6e4[_0x4d89ec(0x3b5)]||0x0,_0xa6909c=_0x4bd6e4[_0x4d89ec(0x9e6)]||0x1,_0x43bfec=Math[_0x4d89ec(0x7a1)](..._0x41d6e3['map'](_0x1266fd=>_0x1266fd['battler']()[_0x4d89ec(0x392)]-_0x1266fd[_0x4d89ec(0x244)]()[_0x4d89ec(0x738)]()/0x2)),_0x3c7a56=Math[_0x4d89ec(0x896)](..._0x41d6e3['map'](_0x47da11=>_0x47da11['battler']()[_0x4d89ec(0x392)]+_0x47da11[_0x4d89ec(0x244)]()[_0x4d89ec(0x738)]()/0x2)),_0x436510=Math[_0x4d89ec(0x7a1)](..._0x41d6e3[_0x4d89ec(0x77a)](_0x195a1b=>_0x195a1b[_0x4d89ec(0x244)]()[_0x4d89ec(0xb38)]-_0x195a1b['battler']()[_0x4d89ec(0x4c9)]())),_0x294cff=Math[_0x4d89ec(0x896)](..._0x41d6e3['map'](_0x1258cf=>_0x1258cf[_0x4d89ec(0x244)]()['_baseY'])),_0x4ae745=_0x41d6e3[_0x4d89ec(0x4d3)](_0x181416=>_0x181416[_0x4d89ec(0x847)]())[_0x4d89ec(0x496)],_0x496c7d=_0x41d6e3[_0x4d89ec(0x4d3)](_0x4cd02e=>_0x4cd02e[_0x4d89ec(0x8e3)]())[_0x4d89ec(0x496)];let _0x44a1af=0x0,_0x684869=0x0;if(_0xb8f8a7[_0x4d89ec(0x85a)](/front/i))_0x44a1af=_0x4ae745>=_0x496c7d?_0x43bfec:_0x3c7a56;else{if(_0xb8f8a7[_0x4d89ec(0x85a)](/middle/i))_0x44a1af=(_0x43bfec+_0x3c7a56)/0x2,melee=-0x1;else _0xb8f8a7[_0x4d89ec(0x85a)](/back/i)&&(_0x44a1af=_0x4ae745>=_0x496c7d?_0x3c7a56:_0x43bfec);}if(_0xb8f8a7['match'](/head/i))_0x684869=_0x436510;else{if(_0xb8f8a7[_0x4d89ec(0x85a)](/center/i))_0x684869=(_0x436510+_0x294cff)/0x2;else _0xb8f8a7['match'](/base/i)&&(_0x684869=_0x294cff);}_0x44a1af+=(Graphics['width']-Graphics[_0x4d89ec(0xb0a)])/0x2,_0x684869+=(Graphics['height']-Graphics[_0x4d89ec(0xb21)])/0x2,_0x44a1af+=_0x209c13,_0x684869+=_0x10e6cd,_0xcd0fc8[_0x4d89ec(0x234)](_0x44a1af,_0x684869,_0x485de7,_0x4e1d83,_0xa6909c);}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x5fc),_0x1c5be8=>{const _0x1491c2=_0x478a06;if(!Imported[_0x1491c2(0x21d)])return;const _0x3788b3=SceneManager[_0x1491c2(0x143)]['_spriteset'];if(!_0x3788b3)return;if(VisuMZ[_0x1491c2(0xba4)][_0x1491c2(0x784)]<=1.04){alert(_0x1491c2(0x364)),SceneManager['exit']();return;}VisuMZ[_0x1491c2(0x91e)](_0x1c5be8,_0x1c5be8);const _0x36bb76=$gameTemp[_0x1491c2(0xa99)](),_0x3265f0=Math[_0x1491c2(0x896)](0.01,_0x1c5be8[_0x1491c2(0x228)]);$gameTemp[_0x1491c2(0x731)](_0x3265f0,_0x36bb76);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Impact_TimeStop',_0xb2c4af=>{const _0x58cfd2=_0x478a06;if(!Imported[_0x58cfd2(0x21d)])return;const _0x3eba9e=SceneManager[_0x58cfd2(0x143)][_0x58cfd2(0x526)];if(!_0x3eba9e)return;if(VisuMZ[_0x58cfd2(0xba4)][_0x58cfd2(0x784)]<=1.04){alert(_0x58cfd2(0x364)),SceneManager[_0x58cfd2(0x834)]();return;}VisuMZ[_0x58cfd2(0x91e)](_0xb2c4af,_0xb2c4af);const _0x511942=$gameTemp[_0x58cfd2(0xa99)](),_0x3e3905=_0xb2c4af['ms']||0x1;VisuMZ[_0x58cfd2(0xba4)][_0x58cfd2(0x6b6)](_0x3e3905,_0x511942);}),PluginManager[_0x478a06(0x35c)](pluginData['name'],'ActSeq_Impact_ZoomBlurPoint',_0x5ea455=>{const _0x269b61=_0x478a06;if(!Imported[_0x269b61(0x21d)])return;const _0x424f0b=SceneManager[_0x269b61(0x143)][_0x269b61(0x526)];if(!_0x424f0b)return;VisuMZ[_0x269b61(0x91e)](_0x5ea455,_0x5ea455);const _0x57d475=_0x5ea455['X']||0x0,_0x4e6485=_0x5ea455['Y']||0x0,_0x3f30a6=_0x5ea455[_0x269b61(0x26e)]||0x0,_0x466108=_0x5ea455[_0x269b61(0x8aa)]||0x0,_0x1d95fd=_0x5ea455[_0x269b61(0x9e6)]||0x1,_0x17341c=_0x5ea455[_0x269b61(0x48f)]||_0x269b61(0x4df);_0x424f0b['setupZoomBlurImpactFilter'](_0x3f30a6,_0x57d475,_0x4e6485,_0x466108,_0x1d95fd,_0x17341c);}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x791),_0x1959c8=>{const _0xa8f512=_0x478a06;if(!Imported[_0xa8f512(0x21d)])return;const _0x5be9a8=SceneManager[_0xa8f512(0x143)]['_spriteset'];if(!_0x5be9a8)return;VisuMZ[_0xa8f512(0x91e)](_0x1959c8,_0x1959c8);const _0xb9428e=VisuMZ[_0xa8f512(0x10b)](_0x1959c8['Targets']),_0x28dc11=_0x1959c8['TargetLocation'],_0x24e128=_0x1959c8[_0xa8f512(0xa50)]||0x0,_0x528f7a=_0x1959c8[_0xa8f512(0x1e8)]||0x0,_0x389176=_0x1959c8[_0xa8f512(0x26e)]||0x0,_0x46e9d4=_0x1959c8[_0xa8f512(0x8aa)]||0x0,_0xa9e791=_0x1959c8[_0xa8f512(0x9e6)]||0x1,_0x5a2b32=_0x1959c8[_0xa8f512(0x48f)]||_0xa8f512(0x4df),_0x3cc9dc=Math[_0xa8f512(0x7a1)](..._0xb9428e[_0xa8f512(0x77a)](_0x573949=>_0x573949[_0xa8f512(0x244)]()[_0xa8f512(0x392)]-_0x573949[_0xa8f512(0x244)]()[_0xa8f512(0x738)]()/0x2)),_0x46a70a=Math['max'](..._0xb9428e[_0xa8f512(0x77a)](_0xeb31c9=>_0xeb31c9['battler']()[_0xa8f512(0x392)]+_0xeb31c9[_0xa8f512(0x244)]()['mainSpriteWidth']()/0x2)),_0x53c10f=Math[_0xa8f512(0x7a1)](..._0xb9428e[_0xa8f512(0x77a)](_0x53ec2b=>_0x53ec2b[_0xa8f512(0x244)]()[_0xa8f512(0xb38)]-_0x53ec2b['battler']()[_0xa8f512(0x4c9)]())),_0x29b136=Math['max'](..._0xb9428e[_0xa8f512(0x77a)](_0x22c354=>_0x22c354[_0xa8f512(0x244)]()[_0xa8f512(0xb38)])),_0x396bde=_0xb9428e[_0xa8f512(0x4d3)](_0x4fee6b=>_0x4fee6b[_0xa8f512(0x847)]())['length'],_0x2d5685=_0xb9428e[_0xa8f512(0x4d3)](_0x248d30=>_0x248d30[_0xa8f512(0x8e3)]())['length'];let _0x1da3e1=0x0,_0x4e313c=0x0;if(_0x28dc11[_0xa8f512(0x85a)](/front/i))_0x1da3e1=_0x396bde>=_0x2d5685?_0x3cc9dc:_0x46a70a;else{if(_0x28dc11[_0xa8f512(0x85a)](/middle/i))_0x1da3e1=(_0x3cc9dc+_0x46a70a)/0x2,melee=-0x1;else _0x28dc11['match'](/back/i)&&(_0x1da3e1=_0x396bde>=_0x2d5685?_0x46a70a:_0x3cc9dc);}if(_0x28dc11['match'](/head/i))_0x4e313c=_0x53c10f;else{if(_0x28dc11['match'](/center/i))_0x4e313c=(_0x53c10f+_0x29b136)/0x2;else _0x28dc11[_0xa8f512(0x85a)](/base/i)&&(_0x4e313c=_0x29b136);}_0x1da3e1+=(Graphics['width']-Graphics['boxWidth'])/0x2,_0x4e313c+=(Graphics['height']-Graphics[_0xa8f512(0xb21)])/0x2,_0x1da3e1+=_0x24e128,_0x4e313c+=_0x528f7a,_0x5be9a8[_0xa8f512(0x85d)](_0x389176,_0x1da3e1,_0x4e313c,_0x46e9d4,_0xa9e791,_0x5a2b32);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x481),_0x3fc0e3=>{const _0x5c6e9e=_0x478a06;if(!Imported[_0x5c6e9e(0x21d)])return;const _0x4ffd03=SceneManager['_scene'][_0x5c6e9e(0x526)];if(!_0x4ffd03)return;if(VisuMZ[_0x5c6e9e(0xba4)]['version']<=1.05){alert(_0x5c6e9e(0x364)),SceneManager[_0x5c6e9e(0x834)]();return;}VisuMZ['ConvertParams'](_0x3fc0e3,_0x3fc0e3);const _0x2ec0b0=VisuMZ[_0x5c6e9e(0x10b)](_0x3fc0e3[_0x5c6e9e(0x1e7)]),_0x17ee17={'filename':_0x3fc0e3[_0x5c6e9e(0x5e0)],'horzCells':_0x3fc0e3[_0x5c6e9e(0x237)]||0x1,'vertCells':_0x3fc0e3['vertCells']||0x1,'frameDelay':_0x3fc0e3[_0x5c6e9e(0x5af)]||0x1,'smooth':_0x3fc0e3[_0x5c6e9e(0xace)]||![],'anchorX':_0x3fc0e3[_0x5c6e9e(0xb53)]||0x0,'anchorY':_0x3fc0e3['anchorY']||0x0,'offsetX':_0x3fc0e3[_0x5c6e9e(0x88a)]||0x0,'offsetY':_0x3fc0e3[_0x5c6e9e(0x7d4)]||0x0};for(const _0x19243e of _0x2ec0b0){if(!_0x19243e)continue;if(!_0x19243e[_0x5c6e9e(0x244)]())continue;_0x19243e[_0x5c6e9e(0x244)]()[_0x5c6e9e(0x3de)](_0x17ee17);}const _0x4a4d4f=$gameTemp[_0x5c6e9e(0xa99)]();_0x4a4d4f&&_0x4a4d4f[_0x5c6e9e(0x2d6)](_0x5c6e9e(0x3a6));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x8af),_0x279ba6=>{const _0x4f7485=_0x478a06;if(!Imported[_0x4f7485(0x21d)])return;const _0xd78cf0=SceneManager[_0x4f7485(0x143)][_0x4f7485(0x526)];if(!_0xd78cf0)return;if(VisuMZ[_0x4f7485(0xba4)][_0x4f7485(0x784)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x4f7485(0x834)]();return;}VisuMZ[_0x4f7485(0x91e)](_0x279ba6,_0x279ba6);const _0x11823c=VisuMZ['CreateActionSequenceTargets'](_0x279ba6[_0x4f7485(0x1e7)]);for(const _0x5b8a8f of _0x11823c){if(!_0x5b8a8f)continue;if(!_0x5b8a8f['battler']())continue;_0x5b8a8f[_0x4f7485(0x244)]()[_0x4f7485(0x786)]();}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x814),_0x42afa1=>{const _0x125142=_0x478a06;if(!Imported[_0x125142(0x21d)])return;const _0x149146=SceneManager[_0x125142(0x143)][_0x125142(0x526)];if(!_0x149146)return;if(VisuMZ['ActSeqImpact'][_0x125142(0x784)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x125142(0x834)]();return;}VisuMZ[_0x125142(0x91e)](_0x42afa1,_0x42afa1);const _0x228008=VisuMZ['CreateActionSequenceTargets'](_0x42afa1[_0x125142(0x1e7)]),_0x22e680=_0x42afa1[_0x125142(0xa01)];for(const _0x2f68f6 of _0x228008){if(!_0x2f68f6)continue;if(!_0x2f68f6[_0x125142(0x244)]())continue;_0x2f68f6[_0x125142(0x244)]()[_0x125142(0x782)](_0x22e680);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x46e),_0x1fc8a3=>{const _0x25bf33=_0x478a06;if(!SceneManager[_0x25bf33(0x785)]())return;const _0x40dada=$gameTemp[_0x25bf33(0xa99)]();if(!_0x40dada)return;_0x40dada[_0x25bf33(0x2d6)](_0x25bf33(0xaa4));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x6bc),_0x26e6ab=>{const _0xbea548=_0x478a06;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xbea548(0x91e)](_0x26e6ab,_0x26e6ab);const _0x132bff=$gameTemp['getLastPluginCommandInterpreter'](),_0x5c83aa=BattleManager[_0xbea548(0x686)],_0x522032=BattleManager[_0xbea548(0x6f3)],_0x1aa9be=BattleManager['_logWindow'];if(!_0x132bff||!_0x5c83aa||!_0x522032)return;if(!_0x5c83aa[_0xbea548(0x8dd)]())return;const _0x42952f=VisuMZ[_0xbea548(0x10b)](_0x26e6ab[_0xbea548(0x1e7)]);for(const _0x4bdcf0 of _0x42952f){if(!_0x4bdcf0)continue;_0x1aa9be[_0xbea548(0x6b3)](_0xbea548(0x4a4),_0x522032,_0x4bdcf0);}_0x132bff[_0xbea548(0x2d6)](_0xbea548(0xa0f));}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0xb3c),_0x4b801d=>{const _0xe2dc27=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xe2dc27(0x866)])return;$gameTemp['_performActionEnd']=!![];}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x970),_0x25dfb1=>{const _0x3e9a43=_0x478a06;if(!SceneManager[_0x3e9a43(0x785)]())return;VisuMZ[_0x3e9a43(0x91e)](_0x25dfb1,_0x25dfb1);const _0x1ab989=[_0x3e9a43(0x663),_0x3e9a43(0x588),_0x3e9a43(0x649),_0x3e9a43(0x74d),_0x3e9a43(0x811),_0x3e9a43(0x720),_0x3e9a43(0xb1b),_0x3e9a43(0x76d)],_0x54bd03=_0x25dfb1['Buffs'],_0x2b7c3d=_0x25dfb1[_0x3e9a43(0x633)],_0xa86e87=_0x25dfb1[_0x3e9a43(0x902)],_0x5d2714=VisuMZ['CreateActionSequenceTargets'](_0x25dfb1['Targets']);for(const _0x5245e5 of _0x5d2714){if(!_0x5245e5)continue;for(const _0x3a1b6d of _0x54bd03){const _0x38345d=_0x1ab989[_0x3e9a43(0x960)](_0x3a1b6d[_0x3e9a43(0xabf)]()[_0x3e9a43(0xb7d)]());_0x38345d>=0x0&&_0x38345d<=0x7&&_0x5245e5[_0x3e9a43(0xb08)](_0x38345d,_0xa86e87);}for(const _0x4ef829 of _0x2b7c3d){const _0x16d934=_0x1ab989[_0x3e9a43(0x960)](_0x4ef829['toUpperCase']()[_0x3e9a43(0xb7d)]());_0x16d934>=0x0&&_0x16d934<=0x7&&_0x5245e5['addDebuff'](_0x16d934,_0xa86e87);}}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x7e8),_0x4a83fe=>{const _0x89faa0=_0x478a06;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x89faa0(0x91e)](_0x4a83fe,_0x4a83fe);const _0x517f7e=_0x4a83fe[_0x89faa0(0x60f)],_0x32c7ed=VisuMZ[_0x89faa0(0x10b)](_0x4a83fe['Targets']);for(const _0x310df6 of _0x32c7ed){if(!_0x310df6)continue;for(const _0x24b23c of _0x517f7e){_0x310df6[_0x89faa0(0x7c6)](_0x24b23c);}}}),PluginManager['registerCommand'](pluginData['name'],_0x478a06(0x128),_0x4d84d4=>{const _0x15a9d2=_0x478a06;if(!SceneManager[_0x15a9d2(0x785)]())return;VisuMZ[_0x15a9d2(0x91e)](_0x4d84d4,_0x4d84d4);const _0x3e38f1=BattleManager[_0x15a9d2(0x686)],_0x213512={'arPenRate':_0x4d84d4[_0x15a9d2(0x57a)],'arPenFlat':_0x4d84d4[_0x15a9d2(0x13a)],'arRedRate':_0x4d84d4[_0x15a9d2(0xd8)],'arRedFlat':_0x4d84d4['ArRedFlat']};_0x3e38f1[_0x15a9d2(0x4c6)]=_0x213512;}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x2e8),_0x31d4e7=>{const _0x45188e=_0x478a06;if(!SceneManager[_0x45188e(0x785)]())return;if(!Imported[_0x45188e(0x5f3)])return;VisuMZ['ConvertParams'](_0x31d4e7,_0x31d4e7);const _0x7b1c48=VisuMZ[_0x45188e(0x10b)](_0x31d4e7[_0x45188e(0x1e7)]),_0x5d4499=_0x31d4e7[_0x45188e(0x2c1)]||0x1;for(const _0xf7e71d of _0x7b1c48){if(!_0xf7e71d)continue;if(!_0xf7e71d[_0x45188e(0x8e3)]())continue;_0xf7e71d[_0x45188e(0x524)](_0x5d4499);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x933),_0x33c7f1=>{const _0x5ba2ad=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemATB'])return;if(!BattleManager['isATB']())return;VisuMZ['ConvertParams'](_0x33c7f1,_0x33c7f1);const _0x30bcdb=VisuMZ[_0x5ba2ad(0x10b)](_0x33c7f1[_0x5ba2ad(0x1e7)]),_0x211b2e=_0x33c7f1['ChargeRate'],_0xcba30=_0x33c7f1['ChargeRate'],_0x657eed=_0x33c7f1[_0x5ba2ad(0x81f)];for(const _0x451c65 of _0x30bcdb){if(!_0x451c65)continue;if(_0x451c65[_0x5ba2ad(0x535)]())_0x451c65['changeAtbChargeTime'](_0x211b2e);else{if(_0x451c65[_0x5ba2ad(0x335)]()){_0x451c65['changeAtbCastTime'](_0xcba30);if(_0x657eed)_0x451c65[_0x5ba2ad(0x740)]();}}}}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],'ActSeq_Mechanics_BoostPointsChange',_0x3610c0=>{const _0x2746a6=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2746a6(0x715)])return;VisuMZ[_0x2746a6(0x91e)](_0x3610c0,_0x3610c0);const _0x189a7b=VisuMZ['CreateActionSequenceTargets'](_0x3610c0[_0x2746a6(0x1e7)]),_0x1954b5=_0x3610c0['BoostPoints'];for(const _0x369c24 of _0x189a7b){if(!_0x369c24)continue;_0x369c24[_0x2746a6(0x8bf)](_0x1954b5);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x7ff),_0x2cdc3d=>{const _0x6da60c=_0x478a06;if(!SceneManager[_0x6da60c(0x785)]())return;if(!Imported[_0x6da60c(0x715)])return;if(!BattleManager['_subject'])return;VisuMZ[_0x6da60c(0x91e)](_0x2cdc3d,_0x2cdc3d);const _0x3dc9ba=_0x2cdc3d[_0x6da60c(0x935)];$gameVariables[_0x6da60c(0x35a)](_0x3dc9ba,BattleManager[_0x6da60c(0x6f3)]['toUseBoostPoints']());}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Mechanics_BreakShieldChange',_0x3829cc=>{const _0x476be5=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x476be5(0x915)])return;VisuMZ[_0x476be5(0x91e)](_0x3829cc,_0x3829cc);const _0x4db34c=VisuMZ[_0x476be5(0x10b)](_0x3829cc[_0x476be5(0x1e7)]),_0x340327=_0x3829cc[_0x476be5(0x208)];for(const _0x5b0f68 of _0x4db34c){if(!_0x5b0f68)continue;if(_0x5b0f68[_0x476be5(0x2f5)]())continue;if(!_0x5b0f68['isAffectedByBreakShield']())continue;_0x5b0f68[_0x476be5(0x4b6)](_0x340327);}}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],'ActSeq_Mechanics_BreakShieldReset',_0x146294=>{const _0x2886cd=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2886cd(0x915)])return;VisuMZ[_0x2886cd(0x91e)](_0x146294,_0x146294);const _0x2cecf1=VisuMZ[_0x2886cd(0x10b)](_0x146294['Targets']);for(const _0x1a2f54 of _0x2cecf1){if(!_0x1a2f54)continue;if(_0x1a2f54[_0x2886cd(0x2f5)]())continue;if(!_0x1a2f54[_0x2886cd(0xabd)]())continue;_0x1a2f54[_0x2886cd(0x8ef)]();}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x963),_0xc7169c=>{const _0x390a4a=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x390a4a(0x2e4)])return;if(!BattleManager['isBTB']())return;VisuMZ[_0x390a4a(0x91e)](_0xc7169c,_0xc7169c);const _0xba53bd=VisuMZ[_0x390a4a(0x10b)](_0xc7169c[_0x390a4a(0x1e7)]),_0x401b1e=_0xc7169c[_0x390a4a(0x555)];for(const _0x15f1cd of _0xba53bd){if(!_0x15f1cd)continue;_0x15f1cd[_0x390a4a(0x109)](_0x401b1e);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x1b3),_0x567c67=>{const _0x122588=_0x478a06;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x122588(0x91e)](_0x567c67,_0x567c67);const _0x29d8bf=$gameTemp[_0x122588(0xa99)](),_0x5d2882=BattleManager[_0x122588(0x686)],_0x4d49be=BattleManager[_0x122588(0x6f3)];if(!_0x29d8bf||!_0x5d2882||!_0x4d49be)return;if(!_0x5d2882[_0x122588(0x8dd)]())return;const _0x153b7d=VisuMZ[_0x122588(0x10b)](_0x567c67[_0x122588(0x1e7)]);for(const _0x4bed2d of _0x153b7d){if(!_0x4bed2d)continue;_0x567c67[_0x122588(0xa2b)]&&(_0x4bed2d[_0x122588(0xb71)](),_0x4bed2d[_0x122588(0x7c6)](_0x4bed2d[_0x122588(0x495)]())),_0x4bed2d[_0x122588(0x4db)]()&&_0x4bed2d[_0x122588(0xa74)]();}_0x29d8bf[_0x122588(0x2d6)](_0x122588(0x31c));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Mechanics_CtbOrder',_0xf90c26=>{const _0x176460=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x176460(0xbdd)])return;if(!BattleManager[_0x176460(0x1ac)]())return;VisuMZ[_0x176460(0x91e)](_0xf90c26,_0xf90c26);const _0x5e946a=VisuMZ[_0x176460(0x10b)](_0xf90c26[_0x176460(0x1e7)]),_0x53b887=_0xf90c26['ChangeOrderBy'];for(const _0x46b576 of _0x5e946a){if(!_0x46b576)continue;_0x46b576['changeTurnOrderByCTB'](_0x53b887);}}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x6be),_0x253c1d=>{const _0x491a1e=_0x478a06;if(!SceneManager[_0x491a1e(0x785)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x491a1e(0x1ac)]())return;VisuMZ[_0x491a1e(0x91e)](_0x253c1d,_0x253c1d);const _0x41f0ec=VisuMZ[_0x491a1e(0x10b)](_0x253c1d[_0x491a1e(0x1e7)]),_0x38fe45=_0x253c1d[_0x491a1e(0x684)],_0x3b7e46=_0x253c1d[_0x491a1e(0x684)];for(const _0x36275e of _0x41f0ec){if(!_0x36275e)continue;if(_0x36275e[_0x491a1e(0x874)]===_0x491a1e(0x49b))_0x36275e[_0x491a1e(0x5a4)](_0x38fe45);else _0x36275e['_tpbState']===_0x491a1e(0x23f)&&_0x36275e['changeCtbCastTime'](_0x3b7e46);}}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x273),_0x29ed7a=>{const _0xb1988d=_0x478a06;if(!SceneManager[_0xb1988d(0x785)]())return;VisuMZ[_0xb1988d(0x91e)](_0x29ed7a,_0x29ed7a);const _0x16d088=BattleManager[_0xb1988d(0x686)];if(!_0x16d088)return;let _0x29f585=_0x29ed7a[_0xb1988d(0x183)];_0x16d088[_0xb1988d(0x5e3)](_0x29f585);}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x566),_0x315be6=>{const _0x111172=_0x478a06;if(!SceneManager[_0x111172(0x785)]())return;VisuMZ[_0x111172(0x91e)](_0x315be6,_0x315be6);const _0x3e4191=VisuMZ[_0x111172(0x10b)](_0x315be6[_0x111172(0x1e7)]);for(const _0x48419d of _0x3e4191){if(!_0x48419d)continue;if(_0x48419d[_0x111172(0xb30)]())_0x48419d[_0x111172(0x1b0)]();}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x699),_0x22bb59=>{const _0x46fc20=_0x478a06;if(!SceneManager[_0x46fc20(0x785)]())return;VisuMZ[_0x46fc20(0x91e)](_0x22bb59,_0x22bb59);const _0x1b78c4=$gameTemp['getLastPluginCommandInterpreter'](),_0x567069=BattleManager[_0x46fc20(0x6f3)],_0x21ac33=_0x22bb59[_0x46fc20(0xbf7)];if(!_0x1b78c4)return;if(!_0x567069)return;_0x567069&&_0x567069[_0x46fc20(0x9c0)]()&&_0x21ac33['toUpperCase']()['trim']()!=='UNTITLED'&&_0x1b78c4[_0x46fc20(0xe2)]([_0x21ac33]);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x559),_0x593f30=>{const _0x59b084=_0x478a06;if(!SceneManager[_0x59b084(0x785)]())return;VisuMZ['ConvertParams'](_0x593f30,_0x593f30);const _0x304307=$gameTemp[_0x59b084(0xa99)](),_0x3d7045=BattleManager[_0x59b084(0xae5)];if(!_0x304307)return;const _0x5bc60e=VisuMZ[_0x59b084(0x10b)](_0x593f30['Users']),_0x4ff1bd=VisuMZ[_0x59b084(0x10b)](_0x593f30[_0x59b084(0x1e7)]);for(const _0x33869f of _0x5bc60e){for(const _0x26ddec of _0x4ff1bd){if(!_0x26ddec)continue;const _0x29fc7d=$dataSkills[_0x33869f[_0x59b084(0x1ba)]()];_0x3d7045['push'](_0x59b084(0xbf4),_0x33869f,_0x26ddec,_0x29fc7d);}}_0x304307['setWaitMode'](_0x59b084(0xa0f));}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],'ActSeq_Mechanics_EmulateGuardEffect',_0x387a33=>{const _0x392473=_0x478a06;if(!SceneManager[_0x392473(0x785)]())return;VisuMZ['ConvertParams'](_0x387a33,_0x387a33);const _0x47e43=$gameTemp[_0x392473(0xa99)](),_0x16d5c3=BattleManager[_0x392473(0xae5)];if(!_0x47e43)return;const _0x196bf4=VisuMZ[_0x392473(0x10b)](_0x387a33[_0x392473(0x95c)]),_0x42e667=VisuMZ[_0x392473(0x10b)](_0x387a33[_0x392473(0x1e7)]);for(const _0x576a05 of _0x196bf4){for(const _0x5d69d3 of _0x42e667){if(!_0x5d69d3)continue;const _0x3bf961=$dataSkills[_0x576a05['guardSkillId']()];_0x16d5c3[_0x392473(0x6b3)](_0x392473(0xbf4),_0x576a05,_0x5d69d3,_0x3bf961);}}_0x47e43['setWaitMode']('battlelog');}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x8da),_0x279174=>{const _0x50b760=_0x478a06;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x50b760(0x91e)](_0x279174,_0x279174);const _0x1542f2=$gameTemp[_0x50b760(0xa99)](),_0x36ceeb=BattleManager['_logWindow'],_0x145d65=Number(_0x279174[_0x50b760(0xa24)]||0x1),_0x196e11=$dataItems[_0x145d65];if(!_0x1542f2)return;if(!_0x196e11)return;const _0x1fad08=VisuMZ[_0x50b760(0x10b)](_0x279174[_0x50b760(0x95c)]),_0x10572f=VisuMZ['CreateActionSequenceTargets'](_0x279174['Targets']);for(const _0x430b1e of _0x1fad08){for(const _0x44b8fc of _0x10572f){if(!_0x44b8fc)continue;_0x36ceeb[_0x50b760(0x6b3)](_0x50b760(0xbf4),_0x430b1e,_0x44b8fc,_0x196e11);}}_0x1542f2['setWaitMode'](_0x50b760(0xa0f));}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x67e),_0xd158cc=>{const _0x5e5328=_0x478a06;if(!SceneManager[_0x5e5328(0x785)]())return;VisuMZ[_0x5e5328(0x91e)](_0xd158cc,_0xd158cc);let _0x18b45f=Number(_0xd158cc['SkillID']||0x0);if(_0x18b45f<=0x0){const _0x112092=BattleManager[_0x5e5328(0x686)];if(_0x112092&&_0x112092[_0x5e5328(0xbbd)]())_0x18b45f=_0x112092[_0x5e5328(0x8dd)]()['id'];else return;}const _0x445967=$dataSkills[_0x18b45f];if(!_0x445967)return;const _0x546217=VisuMZ[_0x5e5328(0x10b)](_0xd158cc[_0x5e5328(0x95c)]);for(const _0x28428e of _0x546217){_0x28428e[_0x5e5328(0x9e4)](_0x445967);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Mechanics_EmulateSkillEffect',_0x5e4a6e=>{const _0x4e2f56=_0x478a06;if(!SceneManager[_0x4e2f56(0x785)]())return;VisuMZ[_0x4e2f56(0x91e)](_0x5e4a6e,_0x5e4a6e);const _0x17c251=$gameTemp[_0x4e2f56(0xa99)](),_0x3d99bd=BattleManager['_logWindow'],_0x15b234=Number(_0x5e4a6e[_0x4e2f56(0x5b9)]||0x1),_0x53c4c5=$dataSkills[_0x15b234];if(!_0x17c251)return;if(!_0x53c4c5)return;const _0x4d8cdb=VisuMZ[_0x4e2f56(0x10b)](_0x5e4a6e[_0x4e2f56(0x95c)]),_0x293585=VisuMZ['CreateActionSequenceTargets'](_0x5e4a6e[_0x4e2f56(0x1e7)]);for(const _0x1bec10 of _0x4d8cdb){for(const _0x40d57f of _0x293585){if(!_0x40d57f)continue;_0x3d99bd[_0x4e2f56(0x6b3)]('emulateActionEffect',_0x1bec10,_0x40d57f,_0x53c4c5);}}_0x17c251['setWaitMode'](_0x4e2f56(0xa0f));}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x12c),_0x4e5c85=>{const _0x516bb3=_0x478a06;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x516bb3(0x91e)](_0x4e5c85,_0x4e5c85);const _0x22dda8=VisuMZ[_0x516bb3(0x10b)](_0x4e5c85[_0x516bb3(0x1e7)]);for(const _0x26ee86 of _0x22dda8){if(!_0x26ee86)continue;if(!_0x26ee86[_0x516bb3(0x8e3)]())continue;_0x26ee86[_0x516bb3(0x9e8)]();}}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x3cd),_0x174a0a=>{const _0x1d476f=_0x478a06;if(!SceneManager[_0x1d476f(0x785)]())return;if(!Imported[_0x1d476f(0x5b2)])return;if(!BattleManager[_0x1d476f(0x277)]())return;VisuMZ[_0x1d476f(0x91e)](_0x174a0a,_0x174a0a);const _0x151f6d=_0x174a0a[_0x1d476f(0x307)];BattleManager['_subject']&&BattleManager['_subject'][_0x1d476f(0xac5)]()[_0x1d476f(0x1f8)](_0x151f6d);}),PluginManager['registerCommand'](pluginData['name'],_0x478a06(0x304),_0x163753=>{const _0x3d9626=_0x478a06;if(!SceneManager[_0x3d9626(0x785)]())return;if(!Imported[_0x3d9626(0x7de)])return;if(!BattleManager['isFTB']())return;VisuMZ[_0x3d9626(0x91e)](_0x163753,_0x163753);const _0x2ed5e6=_0x163753[_0x3d9626(0x307)];BattleManager[_0x3d9626(0x6f3)]&&BattleManager[_0x3d9626(0x6f3)][_0x3d9626(0xac5)]()[_0x3d9626(0xbc8)](_0x2ed5e6);}),PluginManager['registerCommand'](pluginData['name'],_0x478a06(0x3da),_0x407f30=>{const _0xfa8b58=_0x478a06;if(!SceneManager[_0xfa8b58(0x785)]())return;VisuMZ[_0xfa8b58(0x91e)](_0x407f30,_0x407f30);const _0x54e8fa=VisuMZ[_0xfa8b58(0x10b)](_0x407f30[_0xfa8b58(0x1e7)]),_0x88c236=_0x407f30[_0xfa8b58(0x2bc)],_0x30edce=_0x407f30['HP_Flat'],_0x1364b7=_0x407f30[_0xfa8b58(0x27d)],_0x30dfe9=_0x407f30[_0xfa8b58(0x7d5)],_0x1cec89=_0x407f30[_0xfa8b58(0x604)],_0x55a73b=_0x407f30[_0xfa8b58(0x5ec)],_0x55f35f=_0x407f30[_0xfa8b58(0x4e6)];for(const _0x3115d4 of _0x54e8fa){if(!_0x3115d4)continue;const _0x46bb3e=_0x3115d4[_0xfa8b58(0x1f5)](),_0xd73910=Math[_0xfa8b58(0x801)](_0x88c236*_0x3115d4[_0xfa8b58(0x383)]+_0x30edce),_0x5712e4=Math[_0xfa8b58(0x801)](_0x1364b7*_0x3115d4['mmp']+_0x30dfe9),_0x22baa2=Math['round'](_0x1cec89*_0x3115d4[_0xfa8b58(0x939)]()+_0x55a73b);if(_0xd73910!==0x0)_0x3115d4[_0xfa8b58(0x3c4)](_0xd73910);if(_0x5712e4!==0x0)_0x3115d4[_0xfa8b58(0x6f6)](_0x5712e4);if(_0x22baa2!==0x0)_0x3115d4[_0xfa8b58(0x465)](_0x22baa2);if(_0x55f35f)_0x3115d4['startDamagePopup']();_0x46bb3e&&_0x3115d4[_0xfa8b58(0x9c0)]()&&_0x3115d4[_0xfa8b58(0xa74)]();}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x8d6),_0x22e502=>{const _0x17bc47=_0x478a06;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x17bc47(0x91e)](_0x22e502,_0x22e502);const _0x455472=VisuMZ['CreateActionSequenceTargets'](_0x22e502[_0x17bc47(0x1e7)]);for(const _0x5ab6d9 of _0x455472){if(!_0x5ab6d9)continue;_0x5ab6d9[_0x17bc47(0x600)](_0x22e502[_0x17bc47(0xa6a)]);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x155),_0x51324b=>{const _0x16028e=_0x478a06;if(!SceneManager[_0x16028e(0x785)]())return;VisuMZ[_0x16028e(0x91e)](_0x51324b,_0x51324b);const _0x30590a=BattleManager['_action'],_0x2a1f60={'criticalHitRate':_0x51324b[_0x16028e(0x16d)],'criticalHitFlat':_0x51324b[_0x16028e(0x80e)],'criticalDmgRate':_0x51324b[_0x16028e(0x7c9)],'criticalDmgFlat':_0x51324b[_0x16028e(0xab0)],'damageRate':_0x51324b['DamageRate'],'damageFlat':_0x51324b[_0x16028e(0x3ac)],'hitRate':_0x51324b[_0x16028e(0xdb)],'hitFlat':_0x51324b[_0x16028e(0x487)]};_0x30590a[_0x16028e(0x4fd)]=_0x2a1f60;}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x7d0),_0x2566c7=>{const _0x14aec7=_0x478a06;if(!SceneManager[_0x14aec7(0x785)]())return;VisuMZ['ConvertParams'](_0x2566c7,_0x2566c7);const _0x5d81a6=_0x2566c7['CommonEventID'];SceneManager[_0x14aec7(0x143)]['playOnceParallelInterpreter'](_0x5d81a6);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0xa90),_0x48765d=>{const _0x1a938f=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1a938f(0x423)])return;if(!BattleManager[_0x1a938f(0x914)]())return;VisuMZ[_0x1a938f(0x91e)](_0x48765d,_0x48765d);const _0x4c03e6=VisuMZ['CreateActionSequenceTargets'](_0x48765d[_0x1a938f(0x1e7)]);for(const _0x480864 of _0x4c03e6){if(!_0x480864)continue;let _0x286bb2=_0x48765d[_0x1a938f(0x8ac)],_0x540550=_0x48765d['NextTurn'],_0x58af92=_0x48765d[_0x1a938f(0x2af)];BattleManager[_0x1a938f(0xa12)][_0x1a938f(0x982)](_0x480864)?_0x286bb2+=_0x58af92:_0x540550+=_0x58af92,BattleManager[_0x1a938f(0x54b)](_0x480864,-_0x286bb2,![]),BattleManager[_0x1a938f(0x54b)](_0x480864,-_0x540550,!![]);}}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x68a),_0x2f9176=>{const _0x4ce534=_0x478a06;if(!SceneManager[_0x4ce534(0x785)]())return;if(!Imported[_0x4ce534(0x1ae)])return;if(!BattleManager[_0x4ce534(0x10f)]())return;VisuMZ['ConvertParams'](_0x2f9176,_0x2f9176);const _0x5594af=BattleManager[_0x4ce534(0x6f3)][_0x4ce534(0xac5)](),_0x42459d=_0x2f9176[_0x4ce534(0xbe8)],_0x57b041=_0x2f9176[_0x4ce534(0x220)]||_0x4ce534(0x660),_0x400525=_0x2f9176[_0x4ce534(0x2a6)]||_0x4ce534(0x660),_0x33751e=_0x2f9176[_0x4ce534(0xa94)]||0x0,_0x1beba8=_0x2f9176[_0x4ce534(0xa64)]||0x0;(_0x5594af['canAlterActionCostPTB']()||_0x42459d)&&(_0x42459d&&(_0x5594af[_0x4ce534(0x6b2)]=_0x5594af['_ptbActionCost']||{},_0x5594af['_ptbActionCost'][_0x4ce534(0x178)]=0x0),_0x5594af[_0x4ce534(0x2ab)](_0x57b041,_0x400525,_0x33751e,_0x1beba8));}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x6e1),_0x5f1f2e=>{const _0xbf8f7d=_0x478a06;if(!SceneManager[_0xbf8f7d(0x785)]())return;if(!Imported[_0xbf8f7d(0x1ae)])return;if(!BattleManager[_0xbf8f7d(0x10f)]())return;VisuMZ[_0xbf8f7d(0x91e)](_0x5f1f2e,_0x5f1f2e);const _0xd8a2be=BattleManager[_0xbf8f7d(0x6f3)][_0xbf8f7d(0xac5)]();let _0x21d34e=Math[_0xbf8f7d(0x896)](_0x5f1f2e[_0xbf8f7d(0xbc0)],0x0),_0x56260f=_0xd8a2be['getFullActionsPTB'](),_0x9c7190=_0xd8a2be[_0xbf8f7d(0xa2d)]();while(_0x21d34e--){if(_0x56260f<=0x0&&_0x9c7190<=0x0)break;else _0x56260f>0x0?(_0x56260f--,_0x9c7190++):_0x9c7190--;}_0xd8a2be[_0xbf8f7d(0x263)](_0x56260f),_0xd8a2be[_0xbf8f7d(0xac0)](_0x9c7190);}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x16f),_0x3228db=>{const _0x6d141e=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x6d141e(0x1ae)])return;if(!BattleManager[_0x6d141e(0x10f)]())return;VisuMZ[_0x6d141e(0x91e)](_0x3228db,_0x3228db);const _0x32b047=BattleManager['_subject'][_0x6d141e(0xac5)]();let _0x1aa25a=_0x3228db[_0x6d141e(0xb33)],_0x2de261=_0x3228db[_0x6d141e(0x897)];_0x32b047[_0x6d141e(0x523)](_0x1aa25a),_0x32b047['gainHalfActionsPTB'](_0x2de261);}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x160),_0x505737=>{const _0x1e306a=_0x478a06;if(!SceneManager[_0x1e306a(0x785)]())return;VisuMZ['ConvertParams'](_0x505737,_0x505737);const _0x478166=[_0x1e306a(0x663),_0x1e306a(0x588),_0x1e306a(0x649),_0x1e306a(0x74d),_0x1e306a(0x811),_0x1e306a(0x720),'AGI',_0x1e306a(0x76d)],_0x20a6b6=_0x505737[_0x1e306a(0x562)],_0x12c6ff=_0x505737['Debuffs'],_0x545119=VisuMZ[_0x1e306a(0x10b)](_0x505737[_0x1e306a(0x1e7)]);for(const _0x5b8f36 of _0x545119){if(!_0x5b8f36)continue;for(const _0x56dd98 of _0x20a6b6){const _0x3b3348=_0x478166[_0x1e306a(0x960)](_0x56dd98[_0x1e306a(0xabf)]()[_0x1e306a(0xb7d)]());_0x3b3348>=0x0&&_0x3b3348<=0x7&&_0x5b8f36[_0x1e306a(0xa25)](_0x3b3348)&&_0x5b8f36[_0x1e306a(0xb64)](_0x3b3348);}for(const _0x496668 of _0x12c6ff){const _0xf5850=_0x478166[_0x1e306a(0x960)](_0x496668[_0x1e306a(0xabf)]()[_0x1e306a(0xb7d)]());_0xf5850>=0x0&&_0xf5850<=0x7&&_0x5b8f36['isDebuffAffected'](_0xf5850)&&_0x5b8f36[_0x1e306a(0xb64)](_0xf5850);}}}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x489),_0x54d815=>{const _0x359238=_0x478a06;if(!SceneManager[_0x359238(0x785)]())return;VisuMZ['ConvertParams'](_0x54d815,_0x54d815);const _0x3dbc04=_0x54d815['States'],_0x4ec618=VisuMZ['CreateActionSequenceTargets'](_0x54d815[_0x359238(0x1e7)]);for(const _0x49d500 of _0x4ec618){if(!_0x49d500)continue;for(const _0x3dbb1f of _0x3dbc04){_0x49d500[_0x359238(0x43e)](_0x3dbb1f);}}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x120),_0x1de5f5=>{const _0x3ec97c=_0x478a06;if(!SceneManager[_0x3ec97c(0x785)]())return;if(!Imported[_0x3ec97c(0x7a6)])return;VisuMZ['ConvertParams'](_0x1de5f5,_0x1de5f5);const _0x13657b=VisuMZ[_0x3ec97c(0x10b)](_0x1de5f5[_0x3ec97c(0x1e7)]),_0x47f4d0=Number(_0x1de5f5[_0x3ec97c(0xae3)]),_0x4695e5=Number(_0x1de5f5[_0x3ec97c(0x902)]),_0x8c9d6e=_0x1de5f5[_0x3ec97c(0xb4f)];for(const _0x12d6bf of _0x13657b){if(!_0x12d6bf)continue;_0x8c9d6e&&!_0x12d6bf[_0x3ec97c(0x5d0)](_0x47f4d0)?(_0x12d6bf['addState'](_0x47f4d0),_0x12d6bf[_0x3ec97c(0x492)](_0x47f4d0,_0x4695e5)):_0x12d6bf['addStateTurns'](_0x47f4d0,_0x4695e5);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x478),_0x1be5df=>{const _0x10bece=_0x478a06;if(!SceneManager[_0x10bece(0x785)]())return;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;VisuMZ[_0x10bece(0x91e)](_0x1be5df,_0x1be5df);const _0x5b366b=VisuMZ[_0x10bece(0x10b)](_0x1be5df['Targets']),_0x2a0ddc=Number(_0x1be5df[_0x10bece(0xae3)]),_0x122018=Math[_0x10bece(0x896)](Number(_0x1be5df[_0x10bece(0x902)]),0x0),_0x3a03ed=_0x1be5df['AutoAddState'];for(const _0x2cbe1c of _0x5b366b){if(!_0x2cbe1c)continue;_0x3a03ed&&!_0x2cbe1c[_0x10bece(0x5d0)](_0x2a0ddc)&&_0x2cbe1c[_0x10bece(0x7c6)](_0x2a0ddc),_0x2cbe1c[_0x10bece(0x492)](_0x2a0ddc,_0x122018);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x341),_0x408982=>{const _0x47974c=_0x478a06;if(!SceneManager[_0x47974c(0x785)]())return;if(!Imported[_0x47974c(0x4cf)])return;if(!BattleManager['isSTB']())return;VisuMZ['ConvertParams'](_0x408982,_0x408982);const _0x3ea75c=_0x408982[_0x47974c(0xa77)],_0x276c3a=VisuMZ[_0x47974c(0x10b)](_0x408982[_0x47974c(0x1e7)]),_0x151605=_0x408982['ForceExploited'],_0x3c6cb6=_0x408982[_0x47974c(0xb61)],_0x359bfb=_0x408982[_0x47974c(0x6c9)],_0x590f59=BattleManager[_0x47974c(0x686)];if(_0x3ea75c)for(const _0x5513a0 of _0x276c3a){if(!_0x5513a0)continue;if(_0x5513a0===BattleManager['_subject'])continue;if(_0x151605)_0x5513a0[_0x47974c(0x83c)](![]);_0x5513a0[_0x47974c(0x4ed)](BattleManager[_0x47974c(0x6f3)],_0x590f59);}if(_0x3c6cb6&&BattleManager[_0x47974c(0x6f3)]){if(_0x359bfb)BattleManager[_0x47974c(0x6f3)][_0x47974c(0x83c)](![]);const _0x1964c2=_0x276c3a[0x0];BattleManager[_0x47974c(0x6f3)][_0x47974c(0x221)](_0x1964c2,_0x590f59);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Mechanics_StbExtraAction',_0x56c9ca=>{const _0xaa249f=_0x478a06;if(!SceneManager[_0xaa249f(0x785)]())return;if(!Imported[_0xaa249f(0x4cf)])return;if(!BattleManager[_0xaa249f(0x10d)]())return;VisuMZ[_0xaa249f(0x91e)](_0x56c9ca,_0x56c9ca);const _0x47de03=_0x56c9ca[_0xaa249f(0x20e)];BattleManager[_0xaa249f(0x6f3)]&&BattleManager[_0xaa249f(0x6f3)]['stbGainInstant'](_0x47de03);}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],'ActSeq_Mechanics_StbRemoveExcessActions',_0x43ee0d=>{const _0x1a6bd2=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x1a6bd2(0x10d)]())return;VisuMZ[_0x1a6bd2(0x91e)](_0x43ee0d,_0x43ee0d);let _0x2efddf=_0x43ee0d[_0x1a6bd2(0x20e)];if(BattleManager[_0x1a6bd2(0x6f3)]){BattleManager['_subject'][_0x1a6bd2(0xa66)]=BattleManager[_0x1a6bd2(0x6f3)][_0x1a6bd2(0xa66)]||[];while(_0x2efddf--){if(BattleManager['_subject'][_0x1a6bd2(0xa66)][_0x1a6bd2(0x496)]<=0x0)break;BattleManager['_subject'][_0x1a6bd2(0xa66)][_0x1a6bd2(0x6b1)]();}}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0xac1),_0xd78d01=>{const _0x4997f0=_0x478a06;if(!SceneManager[_0x4997f0(0x785)]())return;if(!Imported['VisuMZ_2_WeaponSwapSystem'])return;VisuMZ[_0x4997f0(0x91e)](_0xd78d01,_0xd78d01);const _0x55f478=VisuMZ[_0x4997f0(0x10b)](_0xd78d01['Targets']),_0x1e6ac8=_0xd78d01['WeaponTypeID'];for(const _0x1d2be6 of _0x55f478){if(!_0x1d2be6)continue;if(!_0x1d2be6[_0x4997f0(0x847)]())continue;_0x1d2be6[_0x4997f0(0x112)](_0x1e6ac8);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x55f),_0x292be3=>{const _0xc5da42=_0x478a06;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xc5da42(0x91e)](_0x292be3,_0x292be3);const _0x56bddf=VisuMZ[_0xc5da42(0x10b)](_0x292be3['Targets']),_0x122df7=_0x292be3[_0xc5da42(0x2a3)],_0x502da0={'textColor':ColorManager['getColor'](_0x292be3[_0xc5da42(0x5ef)]),'flashColor':_0x292be3[_0xc5da42(0x1ca)],'flashDuration':_0x292be3[_0xc5da42(0x362)]};for(const _0x427ed1 of _0x56bddf){if(!_0x427ed1)continue;_0x427ed1[_0xc5da42(0x5aa)](_0x122df7,_0x502da0);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x48a),_0x430ae0=>{const _0x44ec89=_0x478a06;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x44ec89(0x91e)](_0x430ae0,_0x430ae0);const _0x493498=VisuMZ['CreateActionSequenceTargets'](_0x430ae0[_0x44ec89(0x1e7)]);let _0x241649=$gameVariables['value'](_0x430ae0[_0x44ec89(0x4cd)]);Imported['VisuMZ_0_CoreEngine']&&_0x430ae0[_0x44ec89(0x110)]&&(_0x241649=VisuMZ['GroupDigits'](_0x241649));const _0x273dd4=String(_0x241649),_0x577349={'textColor':ColorManager[_0x44ec89(0x455)](_0x430ae0[_0x44ec89(0x5ef)]),'flashColor':_0x430ae0[_0x44ec89(0x1ca)],'flashDuration':_0x430ae0['FlashDuration']};for(const _0x5dafaa of _0x493498){if(!_0x5dafaa)continue;_0x5dafaa['setupTextPopup'](_0x273dd4,_0x577349);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x96f),_0x52a556=>{const _0x1f39c3=_0x478a06;if(!SceneManager[_0x1f39c3(0x785)]())return;const _0x8ee47c=$gameTemp[_0x1f39c3(0xa99)]();if(!_0x8ee47c)return;_0x8ee47c['setWaitMode']('battleEffect');}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x1a0),_0x199ca3=>{const _0x5e3479=_0x478a06;if(!SceneManager[_0x5e3479(0x785)]())return;VisuMZ['ConvertParams'](_0x199ca3,_0x199ca3);const _0x581242=VisuMZ[_0x5e3479(0x10b)](_0x199ca3[_0x5e3479(0x1e7)]);for(const _0x10d7f3 of _0x581242){if(!_0x10d7f3)continue;_0x10d7f3[_0x5e3479(0x57e)]();}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x651),_0x1978d3=>{const _0x4063f6=_0x478a06;if(!SceneManager[_0x4063f6(0x785)]())return;VisuMZ[_0x4063f6(0x91e)](_0x1978d3,_0x1978d3);const _0x3fc782=VisuMZ[_0x4063f6(0x10b)](_0x1978d3[_0x4063f6(0x1e7)]),_0x2a42bc=_0x1978d3['MotionType'][_0x4063f6(0xbd5)]()[_0x4063f6(0xb7d)]();let _0x5a5874=_0x1978d3[_0x4063f6(0x7d8)];const _0x29f912=_0x1978d3[_0x4063f6(0x18a)];!['attack',_0x4063f6(0x9a7),'swing',_0x4063f6(0x870)][_0x4063f6(0x982)](_0x2a42bc)&&(_0x5a5874=![]);for(const _0x8781bb of _0x3fc782){if(!_0x8781bb)continue;_0x8781bb[_0x4063f6(0x1c0)](_0x2a42bc,_0x5a5874,_0x29f912);}}),PluginManager['registerCommand'](pluginData['name'],_0x478a06(0xae1),_0x293dba=>{const _0x20dd91=_0x478a06;if(!SceneManager[_0x20dd91(0x785)]())return;VisuMZ[_0x20dd91(0x91e)](_0x293dba,_0x293dba);const _0x45c4d7=VisuMZ[_0x20dd91(0x10b)](_0x293dba[_0x20dd91(0x1e7)]),_0x5971e5=_0x293dba[_0x20dd91(0x81c)][_0x20dd91(0xbd5)]()[_0x20dd91(0xb7d)](),_0xadc918=_0x293dba[_0x20dd91(0x7d8)];for(const _0x41da05 of _0x45c4d7){if(!_0x41da05)continue;_0x41da05[_0x20dd91(0x306)]=_0xadc918;if(_0x5971e5[_0x20dd91(0x85a)](/ATTACK[ ](\d+)/i))_0x41da05[_0x20dd91(0x959)](Number(RegExp['$1']));else _0x5971e5===_0x20dd91(0x1c5)?_0x41da05['performAttack']():_0x41da05['requestMotion'](_0x5971e5);if(!_0xadc918)_0x41da05[_0x20dd91(0x7ec)](0x0);else{if(_0xadc918&&[_0x20dd91(0x9a7),_0x20dd91(0x348),'missle']['includes'](_0x5971e5)){}}_0x41da05[_0x20dd91(0x306)]=undefined;}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x5ee),_0x280041=>{const _0x187191=_0x478a06;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x280041,_0x280041);const _0x1160d7=BattleManager[_0x187191(0x686)];if(!_0x1160d7)return;if(!_0x1160d7[_0x187191(0x8dd)]())return;const _0x5dc65d=VisuMZ[_0x187191(0x10b)](_0x280041[_0x187191(0x1e7)]);for(const _0x50d615 of _0x5dc65d){if(!_0x50d615)continue;_0x50d615[_0x187191(0x661)](_0x1160d7);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x92e),_0x1a0ff1=>{const _0x3528f2=_0x478a06;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3528f2(0x91e)](_0x1a0ff1,_0x1a0ff1);const _0x4ed9f5=VisuMZ['CreateActionSequenceTargets'](_0x1a0ff1[_0x3528f2(0x1e7)]);for(const _0xd76a0e of _0x4ed9f5){if(!_0xd76a0e)continue;if(!_0xd76a0e[_0x3528f2(0x244)]())continue;_0xd76a0e[_0x3528f2(0x244)]()[_0x3528f2(0xaff)]();}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x4f0),_0x4a9603=>{const _0xfb8bfe=_0x478a06;if(!SceneManager[_0xfb8bfe(0x785)]())return;VisuMZ[_0xfb8bfe(0x91e)](_0x4a9603,_0x4a9603);const _0x29ccad=$gameTemp[_0xfb8bfe(0xa99)](),_0x1f790c=_0x4a9603['MotionFrameWait']*Sprite_Battler[_0xfb8bfe(0x846)];_0x29ccad[_0xfb8bfe(0xe3)](_0x1f790c);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Movement_BattleStep',_0x4e5cfd=>{const _0x271281=_0x478a06;if(!SceneManager[_0x271281(0x785)]())return;VisuMZ[_0x271281(0x91e)](_0x4e5cfd,_0x4e5cfd);const _0x23775d=$gameTemp[_0x271281(0xa99)](),_0x4f6f60=BattleManager['_action'];if(!_0x23775d||!_0x4f6f60)return;if(!_0x4f6f60['item']())return;const _0x658a5d=VisuMZ[_0x271281(0x10b)](_0x4e5cfd[_0x271281(0x1e7)]);for(const _0x20f27e of _0x658a5d){if(!_0x20f27e)continue;_0x20f27e[_0x271281(0xb97)](_0x4f6f60);}if(_0x4e5cfd['WaitForMovement'])_0x23775d[_0x271281(0x2d6)](_0x271281(0x22b));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x5e2),_0x25a379=>{const _0x1cc994=_0x478a06;if(!SceneManager[_0x1cc994(0x785)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x1cc994(0x91e)](_0x25a379,_0x25a379);const _0x31ebbc=$gameTemp[_0x1cc994(0xa99)](),_0x8e54f4=VisuMZ[_0x1cc994(0x10b)](_0x25a379[_0x1cc994(0x1e7)]),_0x3f8c02=_0x25a379[_0x1cc994(0x29b)],_0x3429e3=_0x25a379[_0x1cc994(0xa5d)],_0x25a165=_0x25a379[_0x1cc994(0x534)],_0x5364ed=_0x25a379[_0x1cc994(0x9e6)],_0xa8af8c=_0x25a379[_0x1cc994(0x203)],_0x3f7aab=_0x25a379[_0x1cc994(0x48f)],_0x222d8a=_0x25a379[_0x1cc994(0x81c)],_0x2eaa30=_0x25a379['WaitForMovement'];if(!_0x31ebbc)return;for(const _0x28d9dd of _0x8e54f4){if(!_0x28d9dd)continue;let _0x27203b=_0x3429e3,_0x2f15af=_0x25a165;if(_0x3f8c02[_0x1cc994(0x85a)](/horz/i))_0x27203b*=_0x28d9dd['isActor']()?-0x1:0x1;if(_0x3f8c02[_0x1cc994(0x85a)](/vert/i))_0x2f15af*=_0x28d9dd[_0x1cc994(0x847)]()?-0x1:0x1;_0x28d9dd[_0x1cc994(0x2be)](_0x27203b,_0x2f15af,_0x5364ed,_0xa8af8c,_0x3f7aab),_0x28d9dd[_0x1cc994(0x3ee)](_0x222d8a);}if(_0x2eaa30)_0x31ebbc['setWaitMode'](_0x1cc994(0x22b));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x3fa),_0x42a6a=>{const _0x176880=_0x478a06;if(!SceneManager[_0x176880(0x785)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x176880(0x91e)](_0x42a6a,_0x42a6a);const _0x1555b1=$gameTemp[_0x176880(0xa99)](),_0x3624a3=VisuMZ['CreateActionSequenceTargets'](_0x42a6a[_0x176880(0x1e7)]),_0x4e2b8c=_0x42a6a[_0x176880(0x569)],_0x2f2303=_0x42a6a[_0x176880(0xa50)],_0x4bcee3=_0x42a6a['OffsetY'],_0x59a4fd=_0x42a6a['Duration'],_0x1d9062=_0x42a6a[_0x176880(0x203)],_0x2f9202=_0x42a6a[_0x176880(0x48f)],_0x14bc8a=_0x42a6a[_0x176880(0x81c)],_0x45a9a8=_0x42a6a[_0x176880(0x6a1)];if(!_0x1555b1)return;for(const _0x183869 of _0x3624a3){if(!_0x183869)continue;const _0x1233be=_0x42a6a[_0x176880(0x7cf)](_0x183869)||{'x':0x0,'y':0x0};let _0x599616=_0x1233be['x'],_0x400607=_0x1233be['y'];if(_0x4e2b8c['match'](/none/i))_0x599616+=_0x2f2303,_0x400607+=_0x4bcee3;else{if(_0x4e2b8c[_0x176880(0x85a)](/horz/i)&&_0x4e2b8c[_0x176880(0x85a)](/vert/i))_0x599616+=_0x183869['isActor']()?-_0x2f2303:_0x2f2303,_0x400607+=_0x183869[_0x176880(0x847)]()?-_0x4bcee3:_0x4bcee3;else{if(_0x4e2b8c[_0x176880(0x85a)](/horz/i))_0x599616+=_0x183869[_0x176880(0x847)]()?-_0x2f2303:_0x2f2303,_0x400607+=_0x4bcee3;else _0x4e2b8c[_0x176880(0x85a)](/vert/i)&&(_0x599616+=_0x2f2303,_0x400607+=_0x183869[_0x176880(0x847)]()?-_0x4bcee3:_0x4bcee3);}}_0x183869[_0x176880(0x61e)](_0x599616,_0x400607,_0x59a4fd,_0x1d9062,_0x2f9202,-0x1),_0x183869[_0x176880(0x3ee)](_0x14bc8a);}if(_0x45a9a8)_0x1555b1[_0x176880(0x2d6)](_0x176880(0x22b));}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x9e5),_0x4820e2=>{const _0x5534c6=_0x478a06;if(!SceneManager[_0x5534c6(0x785)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x4820e2,_0x4820e2);const _0x5e6216=$gameTemp[_0x5534c6(0xa99)](),_0x308199=VisuMZ['CreateActionSequenceTargets'](_0x4820e2[_0x5534c6(0x1e7)]),_0x4918e6=_0x4820e2[_0x5534c6(0xad1)],_0x3fdb5e=_0x4820e2[_0x5534c6(0x569)],_0x40ca12=_0x4820e2[_0x5534c6(0xa50)],_0x148bee=_0x4820e2[_0x5534c6(0x1e8)],_0x8c1edf=_0x4820e2[_0x5534c6(0x9e6)],_0x1565fb=_0x4820e2['FaceDirection'],_0x25deef=_0x4820e2[_0x5534c6(0x48f)],_0x17576f=_0x4820e2[_0x5534c6(0x81c)],_0x3ddb01=_0x4820e2[_0x5534c6(0x6a1)];if(!_0x5e6216)return;for(const _0x3af4d4 of _0x308199){if(!_0x3af4d4)continue;let _0x214083=_0x3af4d4['battler']()['_baseX'],_0x178ef0=_0x3af4d4[_0x5534c6(0x244)]()[_0x5534c6(0xb38)];if(_0x4918e6[_0x5534c6(0x85a)](/home/i))_0x214083=_0x3af4d4[_0x5534c6(0x244)]()[_0x5534c6(0xb22)],_0x178ef0=_0x3af4d4[_0x5534c6(0x244)]()['_homeY'];else{if(_0x4918e6[_0x5534c6(0x85a)](/center/i))_0x214083=Graphics['boxWidth']/0x2,_0x178ef0=Graphics[_0x5534c6(0xb21)]/0x2;else _0x4918e6['match'](/point (\d+), (\d+)/i)&&(_0x214083=Number(RegExp['$1']),_0x178ef0=Number(RegExp['$2']));}if(_0x3fdb5e[_0x5534c6(0x85a)](/none/i))_0x214083+=_0x40ca12,_0x178ef0+=_0x148bee;else{if(_0x3fdb5e[_0x5534c6(0x85a)](/horz/i)&&_0x3fdb5e['match'](/vert/i))_0x214083+=_0x3af4d4[_0x5534c6(0x847)]()?-_0x40ca12:_0x40ca12,_0x178ef0+=_0x3af4d4[_0x5534c6(0x847)]()?-_0x148bee:_0x148bee;else{if(_0x3fdb5e[_0x5534c6(0x85a)](/horz/i))_0x214083+=_0x3af4d4['isActor']()?-_0x40ca12:_0x40ca12,_0x178ef0+=_0x148bee;else _0x3fdb5e[_0x5534c6(0x85a)](/vert/i)&&(_0x214083+=_0x40ca12,_0x178ef0+=_0x3af4d4[_0x5534c6(0x847)]()?-_0x148bee:_0x148bee);}}_0x3af4d4[_0x5534c6(0x61e)](_0x214083,_0x178ef0,_0x8c1edf,_0x1565fb,_0x25deef,-0x1),_0x3af4d4[_0x5534c6(0x3ee)](_0x17576f);}if(_0x3ddb01)_0x5e6216[_0x5534c6(0x2d6)](_0x5534c6(0x22b));}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0xaf6),_0x266010=>{const _0x8e908d=_0x478a06;if(!SceneManager[_0x8e908d(0x785)]())return;if(!$gameSystem[_0x8e908d(0x787)]())return;VisuMZ['ConvertParams'](_0x266010,_0x266010);const _0x4fd399=$gameTemp[_0x8e908d(0xa99)](),_0x3d2768=VisuMZ[_0x8e908d(0x10b)](_0x266010[_0x8e908d(0x3f1)]),_0x344b9e=VisuMZ[_0x8e908d(0x10b)](_0x266010['Targets2']),_0xc0e3cb=_0x266010[_0x8e908d(0x6f8)];let _0x5a5dec=_0x266010[_0x8e908d(0x574)];const _0x1279c5=_0x266010['OffsetAdjust'],_0x55e3ff=_0x266010[_0x8e908d(0xa50)],_0x44c30b=_0x266010['OffsetY'],_0x3db369=_0x266010['Duration'],_0x58446e=_0x266010[_0x8e908d(0x203)],_0x37f883=_0x266010['EasingType'],_0x2841a1=_0x266010[_0x8e908d(0x81c)],_0x8724b5=_0x266010[_0x8e908d(0x6a1)],_0x53cbca=Math[_0x8e908d(0x7a1)](..._0x344b9e[_0x8e908d(0x77a)](_0x4f0e2f=>_0x4f0e2f[_0x8e908d(0x244)]()[_0x8e908d(0x392)]-_0x4f0e2f[_0x8e908d(0x244)]()[_0x8e908d(0x738)]()/0x2)),_0x384ce5=Math['max'](..._0x344b9e[_0x8e908d(0x77a)](_0x4d39e4=>_0x4d39e4[_0x8e908d(0x244)]()['_baseX']+_0x4d39e4[_0x8e908d(0x244)]()[_0x8e908d(0x738)]()/0x2)),_0x4136bd=Math[_0x8e908d(0x7a1)](..._0x344b9e[_0x8e908d(0x77a)](_0x2e870b=>_0x2e870b['battler']()[_0x8e908d(0xb38)]-_0x2e870b[_0x8e908d(0x244)]()[_0x8e908d(0x4c9)]())),_0x5f5647=Math['max'](..._0x344b9e[_0x8e908d(0x77a)](_0x460171=>_0x460171[_0x8e908d(0x244)]()[_0x8e908d(0xb38)])),_0x4704e4=_0x344b9e['filter'](_0x2ff39a=>_0x2ff39a['isActor']())[_0x8e908d(0x496)],_0x1f47ca=_0x344b9e[_0x8e908d(0x4d3)](_0x2a07fd=>_0x2a07fd[_0x8e908d(0x8e3)]())[_0x8e908d(0x496)];let _0x51cb7e=0x0,_0x1326a9=0x0;if(_0xc0e3cb[_0x8e908d(0x85a)](/front/i))_0x51cb7e=_0x4704e4>=_0x1f47ca?_0x53cbca:_0x384ce5;else{if(_0xc0e3cb[_0x8e908d(0x85a)](/middle/i))_0x51cb7e=(_0x53cbca+_0x384ce5)/0x2,_0x5a5dec=-0x1;else _0xc0e3cb[_0x8e908d(0x85a)](/back/i)&&(_0x51cb7e=_0x4704e4>=_0x1f47ca?_0x384ce5:_0x53cbca);}if(_0xc0e3cb[_0x8e908d(0x85a)](/head/i))_0x1326a9=_0x4136bd;else{if(_0xc0e3cb[_0x8e908d(0x85a)](/center/i))_0x1326a9=(_0x4136bd+_0x5f5647)/0x2;else _0xc0e3cb[_0x8e908d(0x85a)](/base/i)&&(_0x1326a9=_0x5f5647);}if(!_0x4fd399)return;for(const _0x4d04e2 of _0x3d2768){if(!_0x4d04e2)continue;let _0x225893=_0x51cb7e,_0x59dc90=_0x1326a9;if(_0x1279c5[_0x8e908d(0x85a)](/none/i))_0x225893+=_0x55e3ff,_0x59dc90+=_0x44c30b;else{if(_0x1279c5['match'](/horz/i)&&_0x1279c5[_0x8e908d(0x85a)](/vert/i))_0x225893+=_0x4d04e2[_0x8e908d(0x847)]()?-_0x55e3ff:_0x55e3ff,_0x59dc90+=_0x4d04e2[_0x8e908d(0x847)]()?-_0x44c30b:_0x44c30b;else{if(_0x1279c5['match'](/horz/i))_0x225893+=_0x4d04e2['isActor']()?-_0x55e3ff:_0x55e3ff,_0x59dc90+=_0x44c30b;else _0x1279c5[_0x8e908d(0x85a)](/vert/i)&&(_0x225893+=_0x55e3ff,_0x59dc90+=_0x4d04e2['isActor']()?-_0x44c30b:_0x44c30b);}}_0x4d04e2[_0x8e908d(0x61e)](_0x225893,_0x59dc90,_0x3db369,_0x58446e,_0x37f883,_0x5a5dec),_0x4d04e2[_0x8e908d(0x3ee)](_0x2841a1);}if(_0x8724b5)_0x4fd399[_0x8e908d(0x2d6)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x851),_0x48190e=>{const _0x1d49e3=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x1d49e3(0x787)]())return;VisuMZ[_0x1d49e3(0x91e)](_0x48190e,_0x48190e);const _0x106b15=VisuMZ[_0x1d49e3(0x10b)](_0x48190e[_0x1d49e3(0x1e7)]);let _0x420c75=_0x48190e[_0x1d49e3(0x542)][_0x1d49e3(0x85a)](/back/i);for(const _0x26cc86 of _0x106b15){if(!_0x26cc86)continue;if(_0x48190e[_0x1d49e3(0x542)][_0x1d49e3(0x85a)](/rand/i))_0x420c75=Math[_0x1d49e3(0x679)](0x2);_0x26cc86[_0x1d49e3(0x727)](!!_0x420c75);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0xa56),_0xb56af5=>{const _0x10f66b=_0x478a06;if(!SceneManager[_0x10f66b(0x785)]())return;if(!$gameSystem[_0x10f66b(0x787)]())return;VisuMZ[_0x10f66b(0x91e)](_0xb56af5,_0xb56af5);const _0x3a3614=VisuMZ[_0x10f66b(0x10b)](_0xb56af5[_0x10f66b(0x1e7)]),_0x265410=_0xb56af5[_0x10f66b(0x900)];for(const _0x474f07 of _0x3a3614){if(!_0x474f07)continue;const _0x1fe9fe=_0xb56af5[_0x10f66b(0x93e)](_0x474f07)||{'x':0x0,'y':0x0};let _0x441467=_0x1fe9fe['x'],_0x35ab1b=_0x1fe9fe['y'];_0x474f07[_0x10f66b(0x618)](Math['round'](_0x441467),Math[_0x10f66b(0x801)](_0x35ab1b),!!_0x265410);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x9a5),_0x43d50e=>{const _0x44e2bb=_0x478a06;if(!SceneManager[_0x44e2bb(0x785)]())return;if(!$gameSystem[_0x44e2bb(0x787)]())return;VisuMZ['ConvertParams'](_0x43d50e,_0x43d50e);const _0x7d8644=VisuMZ['CreateActionSequenceTargets'](_0x43d50e[_0x44e2bb(0x1e7)]);let _0x45814d=_0x43d50e[_0x44e2bb(0x781)];const _0x14ed4b=_0x43d50e[_0x44e2bb(0x900)];for(const _0x228b1b of _0x7d8644){if(!_0x228b1b)continue;let _0x308477=_0x228b1b['battler']()[_0x44e2bb(0x392)],_0x4af4ec=_0x228b1b[_0x44e2bb(0x244)]()[_0x44e2bb(0xb38)];if(_0x45814d[_0x44e2bb(0x85a)](/home/i))_0x308477=_0x228b1b['battler']()['_homeX'],_0x4af4ec=_0x228b1b['battler']()[_0x44e2bb(0xaca)];else{if(_0x45814d[_0x44e2bb(0x85a)](/center/i))_0x308477=Graphics[_0x44e2bb(0xb0a)]/0x2,_0x4af4ec=Graphics[_0x44e2bb(0xb21)]/0x2;else _0x45814d[_0x44e2bb(0x85a)](/point (\d+), (\d+)/i)&&(_0x308477=Number(RegExp['$1']),_0x4af4ec=Number(RegExp['$2']));}_0x228b1b[_0x44e2bb(0x618)](Math['round'](_0x308477),Math[_0x44e2bb(0x801)](_0x4af4ec),!!_0x14ed4b);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x4a9),_0x3c9243=>{const _0x6cd6ba=_0x478a06;if(!SceneManager[_0x6cd6ba(0x785)]())return;if(!$gameSystem[_0x6cd6ba(0x787)]())return;VisuMZ[_0x6cd6ba(0x91e)](_0x3c9243,_0x3c9243);const _0x41bac5=VisuMZ[_0x6cd6ba(0x10b)](_0x3c9243['Targets1']),_0x3ed7b8=VisuMZ[_0x6cd6ba(0x10b)](_0x3c9243[_0x6cd6ba(0x17b)]),_0x467f46=_0x3ed7b8[_0x6cd6ba(0x77a)](_0x2f833a=>_0x2f833a&&_0x2f833a['battler']()?_0x2f833a[_0x6cd6ba(0x244)]()[_0x6cd6ba(0x392)]:0x0)/(_0x3ed7b8['length']||0x1),_0x10e230=_0x3ed7b8[_0x6cd6ba(0x77a)](_0x58b535=>_0x58b535&&_0x58b535[_0x6cd6ba(0x244)]()?_0x58b535['battler']()[_0x6cd6ba(0xb38)]:0x0)/(_0x3ed7b8[_0x6cd6ba(0x496)]||0x1),_0x26ae46=_0x3c9243[_0x6cd6ba(0x900)];for(const _0x48d383 of _0x41bac5){if(!_0x48d383)continue;_0x48d383['setBattlerFacePoint'](Math['round'](_0x467f46),Math['round'](_0x10e230),!!_0x26ae46);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0xa17),_0x1a3471=>{const _0x171766=_0x478a06;if(!SceneManager[_0x171766(0x785)]())return;VisuMZ['ConvertParams'](_0x1a3471,_0x1a3471);const _0x470c89=$gameTemp['getLastPluginCommandInterpreter'](),_0xf6c5d5=VisuMZ[_0x171766(0x10b)](_0x1a3471['Targets']),_0x511888=_0x1a3471[_0x171766(0x33c)],_0x59330c=_0x1a3471[_0x171766(0x9e6)],_0x235b75=_0x1a3471[_0x171766(0x48f)],_0x42254a=_0x1a3471[_0x171766(0x469)];if(!_0x470c89)return;for(const _0x193131 of _0xf6c5d5){if(!_0x193131)continue;_0x193131['floatBattler'](_0x511888,_0x59330c,_0x235b75);}if(_0x42254a)_0x470c89[_0x171766(0x2d6)](_0x171766(0x8c4));}),PluginManager[_0x478a06(0x35c)](pluginData['name'],'ActSeq_Movement_HomeReset',_0x234185=>{const _0x5a3b81=_0x478a06;if(!SceneManager[_0x5a3b81(0x785)]())return;VisuMZ[_0x5a3b81(0x91e)](_0x234185,_0x234185);const _0x3b6ceb=$gameTemp[_0x5a3b81(0xa99)]();if(!_0x3b6ceb)return;const _0x1e6a78=VisuMZ[_0x5a3b81(0x10b)](_0x234185[_0x5a3b81(0x1e7)]);for(const _0x537350 of _0x1e6a78){if(!_0x537350)continue;_0x537350[_0x5a3b81(0x343)]();}BattleManager[_0x5a3b81(0x6f3)]&&BattleManager[_0x5a3b81(0x6f3)][_0x5a3b81(0x7d3)]();if(_0x234185[_0x5a3b81(0x6a1)])_0x3b6ceb[_0x5a3b81(0x2d6)](_0x5a3b81(0x22b));}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x320),_0x14c308=>{const _0x1b9074=_0x478a06;if(!SceneManager[_0x1b9074(0x785)]())return;VisuMZ[_0x1b9074(0x91e)](_0x14c308,_0x14c308);const _0x6a179e=$gameTemp[_0x1b9074(0xa99)](),_0x49dda1=VisuMZ[_0x1b9074(0x10b)](_0x14c308[_0x1b9074(0x1e7)]),_0x200385=_0x14c308['Height'],_0x5bc6c1=_0x14c308[_0x1b9074(0x9e6)],_0x4183e3=_0x14c308[_0x1b9074(0x1bd)];if(!_0x6a179e)return;for(const _0x55efc6 of _0x49dda1){if(!_0x55efc6)continue;_0x55efc6[_0x1b9074(0x3d1)](_0x200385,_0x5bc6c1);}if(_0x4183e3)_0x6a179e[_0x1b9074(0x2d6)](_0x1b9074(0x240));}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x60c),_0x128965=>{const _0x25f063=_0x478a06;if(!SceneManager[_0x25f063(0x785)]())return;if(!$gameSystem[_0x25f063(0x787)]())return;VisuMZ[_0x25f063(0x91e)](_0x128965,_0x128965);const _0x11f310=$gameTemp[_0x25f063(0xa99)](),_0xb4e449=VisuMZ[_0x25f063(0x10b)](_0x128965[_0x25f063(0x1e7)]),_0x157ee9=_0x128965[_0x25f063(0x29b)],_0x1af569=_0x128965[_0x25f063(0xa5d)],_0x4e916b=_0x128965[_0x25f063(0x534)],_0x72648b=_0x128965[_0x25f063(0x9e6)],_0x3a831a=_0x128965[_0x25f063(0x203)],_0x144abe=_0x128965[_0x25f063(0x48f)],_0x2ed964=_0x128965[_0x25f063(0x81c)],_0x2722b1=_0x128965[_0x25f063(0x6a1)];if(!_0x11f310)return;for(const _0x2e39cf of _0xb4e449){if(!_0x2e39cf)continue;let _0xf09e5f=_0x1af569,_0x508eac=_0x4e916b;if(_0x157ee9[_0x25f063(0x85a)](/horz/i))_0xf09e5f*=_0x2e39cf[_0x25f063(0x847)]()?-0x1:0x1;if(_0x157ee9[_0x25f063(0x85a)](/vert/i))_0x508eac*=_0x2e39cf[_0x25f063(0x847)]()?-0x1:0x1;_0x2e39cf[_0x25f063(0xbd2)](_0xf09e5f,_0x508eac,_0x72648b,_0x3a831a,_0x144abe),_0x2e39cf[_0x25f063(0x3ee)](_0x2ed964);}if(_0x2722b1)_0x11f310['setWaitMode']('battleMove');}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x172),_0x5349f0=>{const _0x4f8ded=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x4f8ded(0x91e)](_0x5349f0,_0x5349f0);const _0x1fa954=$gameTemp['getLastPluginCommandInterpreter'](),_0x5382c5=VisuMZ['CreateActionSequenceTargets'](_0x5349f0[_0x4f8ded(0x1e7)]),_0x2a686c=_0x5349f0['OffsetAdjust'],_0x34ff31=_0x5349f0[_0x4f8ded(0xa50)],_0x455991=_0x5349f0[_0x4f8ded(0x1e8)],_0x809239=_0x5349f0[_0x4f8ded(0x9e6)],_0x281056=_0x5349f0['FaceDirection'],_0xbc1b78=_0x5349f0[_0x4f8ded(0x48f)],_0x51351a=_0x5349f0[_0x4f8ded(0x81c)],_0x52faec=_0x5349f0[_0x4f8ded(0x6a1)];if(!_0x1fa954)return;for(const _0x2ab5b0 of _0x5382c5){if(!_0x2ab5b0)continue;const _0x1b4012=_0x5349f0[_0x4f8ded(0x7cf)](_0x2ab5b0)||{'x':0x0,'y':0x0};let _0x4de9f8=_0x1b4012['x'],_0x6c6a9e=_0x1b4012['y'];if(_0x2a686c[_0x4f8ded(0x85a)](/none/i))_0x4de9f8+=_0x34ff31,_0x6c6a9e+=_0x455991;else{if(_0x2a686c['match'](/horz/i)&&_0x2a686c['match'](/vert/i))_0x4de9f8+=_0x2ab5b0[_0x4f8ded(0x847)]()?-_0x34ff31:_0x34ff31,_0x6c6a9e+=_0x2ab5b0[_0x4f8ded(0x847)]()?-_0x455991:_0x455991;else{if(_0x2a686c['match'](/horz/i))_0x4de9f8+=_0x2ab5b0['isActor']()?-_0x34ff31:_0x34ff31,_0x6c6a9e+=_0x455991;else _0x2a686c[_0x4f8ded(0x85a)](/vert/i)&&(_0x4de9f8+=_0x34ff31,_0x6c6a9e+=_0x2ab5b0[_0x4f8ded(0x847)]()?-_0x455991:_0x455991);}}_0x2ab5b0[_0x4f8ded(0xa53)](_0x4de9f8,_0x6c6a9e,_0x809239,_0x281056,_0xbc1b78,-0x1),_0x2ab5b0[_0x4f8ded(0x3ee)](_0x51351a);}if(_0x52faec)_0x1fa954['setWaitMode'](_0x4f8ded(0x22b));}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x509),_0x3751c8=>{const _0x2a3086=_0x478a06;if(!SceneManager[_0x2a3086(0x785)]())return;if(!$gameSystem[_0x2a3086(0x787)]())return;VisuMZ[_0x2a3086(0x91e)](_0x3751c8,_0x3751c8);const _0x213b05=$gameTemp[_0x2a3086(0xa99)](),_0x1f511b=VisuMZ[_0x2a3086(0x10b)](_0x3751c8[_0x2a3086(0x1e7)]),_0x11e4fb=_0x3751c8[_0x2a3086(0xad1)],_0x29886e=_0x3751c8['OffsetAdjust'],_0x145e5b=_0x3751c8[_0x2a3086(0xa50)],_0x537977=_0x3751c8['OffsetY'],_0x3f4d47=_0x3751c8['Duration'],_0x108070=_0x3751c8['FaceDirection'],_0x45ea46=_0x3751c8[_0x2a3086(0x48f)],_0x21ccdb=_0x3751c8[_0x2a3086(0x81c)],_0x35586d=_0x3751c8[_0x2a3086(0x6a1)];if(!_0x213b05)return;for(const _0x1aeea4 of _0x1f511b){if(!_0x1aeea4)continue;let _0xbdbefb=_0x1aeea4[_0x2a3086(0x244)]()['_baseX'],_0x476513=_0x1aeea4[_0x2a3086(0x244)]()[_0x2a3086(0xb38)];if(_0x11e4fb['match'](/home/i))_0xbdbefb=_0x1aeea4[_0x2a3086(0x244)]()[_0x2a3086(0xb22)],_0x476513=_0x1aeea4[_0x2a3086(0x244)]()['_homeY'];else{if(_0x11e4fb['match'](/center/i))_0xbdbefb=Graphics['boxWidth']/0x2,_0x476513=Graphics[_0x2a3086(0xb21)]/0x2;else _0x11e4fb[_0x2a3086(0x85a)](/point (\d+), (\d+)/i)&&(_0xbdbefb=Number(RegExp['$1']),_0x476513=Number(RegExp['$2']));}if(_0x29886e[_0x2a3086(0x85a)](/none/i))_0xbdbefb+=_0x145e5b,_0x476513+=_0x537977;else{if(_0x29886e[_0x2a3086(0x85a)](/horz/i)&&_0x29886e[_0x2a3086(0x85a)](/vert/i))_0xbdbefb+=_0x1aeea4[_0x2a3086(0x847)]()?-_0x145e5b:_0x145e5b,_0x476513+=_0x1aeea4[_0x2a3086(0x847)]()?-_0x537977:_0x537977;else{if(_0x29886e[_0x2a3086(0x85a)](/horz/i))_0xbdbefb+=_0x1aeea4[_0x2a3086(0x847)]()?-_0x145e5b:_0x145e5b,_0x476513+=_0x537977;else _0x29886e[_0x2a3086(0x85a)](/vert/i)&&(_0xbdbefb+=_0x145e5b,_0x476513+=_0x1aeea4['isActor']()?-_0x537977:_0x537977);}}_0x1aeea4['moveBattlerToPoint'](_0xbdbefb,_0x476513,_0x3f4d47,_0x108070,_0x45ea46,-0x1),_0x1aeea4[_0x2a3086(0x3ee)](_0x21ccdb);}if(_0x35586d)_0x213b05[_0x2a3086(0x2d6)](_0x2a3086(0x22b));}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x593),_0x4dcdcc=>{const _0x2290bc=_0x478a06;if(!SceneManager[_0x2290bc(0x785)]())return;if(!$gameSystem[_0x2290bc(0x787)]())return;VisuMZ[_0x2290bc(0x91e)](_0x4dcdcc,_0x4dcdcc);const _0x2aca0a=$gameTemp[_0x2290bc(0xa99)](),_0x2a12ba=VisuMZ[_0x2290bc(0x10b)](_0x4dcdcc[_0x2290bc(0x3f1)]),_0x21da55=VisuMZ[_0x2290bc(0x10b)](_0x4dcdcc[_0x2290bc(0x17b)]),_0x220102=_0x4dcdcc[_0x2290bc(0x6f8)];let _0x2de7ce=_0x4dcdcc[_0x2290bc(0x574)];const _0x2da52e=_0x4dcdcc[_0x2290bc(0x569)],_0x294873=_0x4dcdcc['OffsetX'],_0x3b1103=_0x4dcdcc[_0x2290bc(0x1e8)],_0x54db54=_0x4dcdcc['Duration'],_0x50d7b6=_0x4dcdcc[_0x2290bc(0x203)],_0x34a417=_0x4dcdcc[_0x2290bc(0x48f)],_0x3cd5a0=_0x4dcdcc[_0x2290bc(0x81c)],_0x83321c=_0x4dcdcc[_0x2290bc(0x6a1)],_0x4ed226=Math['min'](..._0x21da55[_0x2290bc(0x77a)](_0x708cd7=>_0x708cd7[_0x2290bc(0x244)]()[_0x2290bc(0x392)]-_0x708cd7[_0x2290bc(0x244)]()['mainSpriteWidth']()/0x2)),_0x1a2309=Math[_0x2290bc(0x896)](..._0x21da55[_0x2290bc(0x77a)](_0x1f3932=>_0x1f3932[_0x2290bc(0x244)]()[_0x2290bc(0x392)]+_0x1f3932[_0x2290bc(0x244)]()[_0x2290bc(0x738)]()/0x2)),_0x304f83=Math[_0x2290bc(0x7a1)](..._0x21da55[_0x2290bc(0x77a)](_0x328297=>_0x328297['battler']()['_baseY']-_0x328297[_0x2290bc(0x244)]()[_0x2290bc(0x4c9)]())),_0xa32832=Math[_0x2290bc(0x896)](..._0x21da55['map'](_0x50f627=>_0x50f627[_0x2290bc(0x244)]()['_baseY'])),_0xfe9a1c=_0x21da55['filter'](_0x4c5c5a=>_0x4c5c5a[_0x2290bc(0x847)]())[_0x2290bc(0x496)],_0x57031a=_0x21da55[_0x2290bc(0x4d3)](_0x531442=>_0x531442[_0x2290bc(0x8e3)]())[_0x2290bc(0x496)];let _0x563c3c=0x0,_0x4330e6=0x0;if(_0x220102[_0x2290bc(0x85a)](/front/i))_0x563c3c=_0xfe9a1c>=_0x57031a?_0x4ed226:_0x1a2309;else{if(_0x220102['match'](/middle/i))_0x563c3c=(_0x4ed226+_0x1a2309)/0x2,_0x2de7ce=-0x1;else _0x220102[_0x2290bc(0x85a)](/back/i)&&(_0x563c3c=_0xfe9a1c>=_0x57031a?_0x1a2309:_0x4ed226);}if(_0x220102['match'](/head/i))_0x4330e6=_0x304f83;else{if(_0x220102[_0x2290bc(0x85a)](/center/i))_0x4330e6=(_0x304f83+_0xa32832)/0x2;else _0x220102[_0x2290bc(0x85a)](/base/i)&&(_0x4330e6=_0xa32832);}if(!_0x2aca0a)return;for(const _0x21401f of _0x2a12ba){if(!_0x21401f)continue;let _0x1390f3=_0x563c3c,_0x29aefb=_0x4330e6;if(_0x2da52e[_0x2290bc(0x85a)](/none/i))_0x1390f3+=_0x294873,_0x29aefb+=_0x3b1103;else{if(_0x2da52e[_0x2290bc(0x85a)](/horz/i)&&_0x2da52e[_0x2290bc(0x85a)](/vert/i))_0x1390f3+=_0x21401f[_0x2290bc(0x847)]()?-_0x294873:_0x294873,_0x29aefb+=_0x21401f['isActor']()?-_0x3b1103:_0x3b1103;else{if(_0x2da52e['match'](/horz/i))_0x1390f3+=_0x21401f[_0x2290bc(0x847)]()?-_0x294873:_0x294873,_0x29aefb+=_0x3b1103;else _0x2da52e['match'](/vert/i)&&(_0x1390f3+=_0x294873,_0x29aefb+=_0x21401f[_0x2290bc(0x847)]()?-_0x3b1103:_0x3b1103);}}_0x21401f['moveBattlerToPoint'](_0x1390f3,_0x29aefb,_0x54db54,_0x50d7b6,_0x34a417,_0x2de7ce),_0x21401f[_0x2290bc(0x3ee)](_0x3cd5a0);}if(_0x83321c)_0x2aca0a[_0x2290bc(0x2d6)](_0x2290bc(0x22b));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Movement_Opacity',_0x538ff1=>{const _0xb92ca6=_0x478a06;if(!SceneManager[_0xb92ca6(0x785)]())return;VisuMZ[_0xb92ca6(0x91e)](_0x538ff1,_0x538ff1);const _0x711756=$gameTemp['getLastPluginCommandInterpreter'](),_0x39db1c=VisuMZ[_0xb92ca6(0x10b)](_0x538ff1[_0xb92ca6(0x1e7)]),_0x5a284f=_0x538ff1[_0xb92ca6(0x1f9)],_0x29fd46=_0x538ff1[_0xb92ca6(0x9e6)],_0x6e5696=_0x538ff1[_0xb92ca6(0x48f)],_0x10e37b=_0x538ff1[_0xb92ca6(0x16a)];if(!_0x711756)return;for(const _0x2ea4fe of _0x39db1c){if(!_0x2ea4fe)continue;_0x2ea4fe[_0xb92ca6(0x5a9)](_0x5a284f,_0x29fd46,_0x6e5696);}if(_0x10e37b)_0x711756[_0xb92ca6(0x2d6)]('battleOpacity');}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x404),_0x30e77d=>{const _0x5c8032=_0x478a06;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x30e77d,_0x30e77d);const _0x4ef0d6=$gameTemp['getLastPluginCommandInterpreter'](),_0x316c9a=VisuMZ[_0x5c8032(0x10b)](_0x30e77d['Targets']),_0x2d6e36=_0x30e77d[_0x5c8032(0x396)],_0x25d4d0=_0x30e77d[_0x5c8032(0xb55)],_0x593d0c=_0x30e77d[_0x5c8032(0x9e6)],_0x35dba7=_0x30e77d[_0x5c8032(0x48f)],_0x422d99=_0x30e77d[_0x5c8032(0x6ed)];if(!_0x4ef0d6)return;for(const _0x417070 of _0x316c9a){if(!_0x417070)continue;_0x417070[_0x5c8032(0x269)](_0x2d6e36,_0x25d4d0,_0x593d0c,_0x35dba7);}if(_0x422d99)_0x4ef0d6[_0x5c8032(0x2d6)](_0x5c8032(0xa68));}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x998),_0x2d0b35=>{const _0x4bf94a=_0x478a06;if(!SceneManager[_0x4bf94a(0x785)]())return;VisuMZ[_0x4bf94a(0x91e)](_0x2d0b35,_0x2d0b35);const _0x2e8d68=$gameTemp[_0x4bf94a(0xa99)](),_0x5bac84=VisuMZ['CreateActionSequenceTargets'](_0x2d0b35[_0x4bf94a(0x1e7)]),_0x152a41=_0x2d0b35[_0x4bf94a(0x11e)],_0x276e3b=_0x2d0b35['SkewY'],_0x43729e=_0x2d0b35[_0x4bf94a(0x9e6)],_0x333805=_0x2d0b35['EasingType'],_0x42b1f2=_0x2d0b35[_0x4bf94a(0xa03)];if(!_0x2e8d68)return;for(const _0x9340eb of _0x5bac84){if(!_0x9340eb)continue;_0x9340eb['skewBattler'](_0x152a41,_0x276e3b,_0x43729e,_0x333805);}if(_0x42b1f2)_0x2e8d68[_0x4bf94a(0x2d6)](_0x4bf94a(0x73c));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x563),_0x555de8=>{const _0x2eed1c=_0x478a06;if(!SceneManager[_0x2eed1c(0x785)]())return;VisuMZ[_0x2eed1c(0x91e)](_0x555de8,_0x555de8);const _0x1d84e2=$gameTemp['getLastPluginCommandInterpreter'](),_0x29bb58=VisuMZ[_0x2eed1c(0x10b)](_0x555de8[_0x2eed1c(0x1e7)]),_0x978af9=_0x555de8['Angle'],_0x1a5d24=_0x555de8[_0x2eed1c(0x9e6)],_0x31b67a=_0x555de8[_0x2eed1c(0x48f)],_0x5f37e4=_0x555de8[_0x2eed1c(0x390)],_0x4f702c=_0x555de8[_0x2eed1c(0x6af)];if(!_0x1d84e2)return;for(const _0x52bd3e of _0x29bb58){if(!_0x52bd3e)continue;_0x52bd3e['spinBattler'](_0x978af9,_0x1a5d24,_0x31b67a,_0x5f37e4);}if(_0x4f702c)_0x1d84e2['setWaitMode'](_0x2eed1c(0x84c));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0xb11),_0xf9c8d9=>{const _0x1080b0=_0x478a06;if(!SceneManager[_0x1080b0(0x785)]())return;const _0x3e6c30=$gameTemp[_0x1080b0(0xa99)]();if(!_0x3e6c30)return;_0x3e6c30[_0x1080b0(0x2d6)](_0x1080b0(0x8c4));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x391),_0xcfc772=>{const _0x265d99=_0x478a06;if(!SceneManager['isSceneBattle']())return;const _0x58f944=$gameTemp[_0x265d99(0xa99)]();if(!_0x58f944)return;_0x58f944['setWaitMode'](_0x265d99(0x240));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x877),_0x1d7ba1=>{const _0x22b4cb=_0x478a06;if(!SceneManager[_0x22b4cb(0x785)]())return;const _0x2f4998=$gameTemp[_0x22b4cb(0xa99)]();if(!_0x2f4998)return;_0x2f4998[_0x22b4cb(0x2d6)]('battleMove');}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Movement_WaitForOpacity',_0x56147b=>{const _0x37caa1=_0x478a06;if(!SceneManager['isSceneBattle']())return;const _0xe0a001=$gameTemp[_0x37caa1(0xa99)]();if(!_0xe0a001)return;_0xe0a001[_0x37caa1(0x2d6)](_0x37caa1(0x8e1));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x6f0),_0x13aa0f=>{const _0x30a9fa=_0x478a06;if(!SceneManager[_0x30a9fa(0x785)]())return;const _0x2040f1=$gameTemp[_0x30a9fa(0xa99)]();if(!_0x2040f1)return;_0x2040f1[_0x30a9fa(0x2d6)](_0x30a9fa(0xa68));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x8d0),_0x1fdd02=>{const _0x17512e=_0x478a06;if(!SceneManager['isSceneBattle']())return;const _0x2a9c75=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2a9c75)return;_0x2a9c75[_0x17512e(0x2d6)](_0x17512e(0x73c));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x19d),_0xacd5bb=>{const _0x44b578=_0x478a06;if(!SceneManager['isSceneBattle']())return;const _0x3cda38=$gameTemp[_0x44b578(0xa99)]();if(!_0x3cda38)return;_0x3cda38[_0x44b578(0x2d6)](_0x44b578(0x84c));}),VisuMZ['BattleCore'][_0x478a06(0x56e)]=function(){const _0x95081=_0x478a06;if(!Imported[_0x95081(0xa37)])return;if(VisuMZ['ActSeqProjectiles'][_0x95081(0x784)]<1.08){let _0x170869='';_0x170869+=_0x95081(0x980),_0x170869+='in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.',alert(_0x170869),SceneManager[_0x95081(0x834)]();}},PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0xaaa),_0x8511ec=>{const _0x3560f6=_0x478a06;if(!SceneManager[_0x3560f6(0x785)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x3560f6(0x91e)](_0x8511ec,_0x8511ec),VisuMZ[_0x3560f6(0x1a5)][_0x3560f6(0x56e)]();const _0x1b6ab2=$gameTemp[_0x3560f6(0xa99)](),_0x13c2a3=_0x8511ec[_0x3560f6(0x6f4)];if(!_0x1b6ab2)return;const _0x3bc6c3=BattleManager['_spriteset'];if(!_0x3bc6c3)return;_0x3bc6c3[_0x3560f6(0x724)](_0x8511ec);if(_0x13c2a3)_0x1b6ab2['setWaitMode'](_0x3560f6(0x365));}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x77b),_0x103227=>{const _0x2191bd=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2191bd(0xa37)])return;VisuMZ[_0x2191bd(0x91e)](_0x103227,_0x103227),VisuMZ[_0x2191bd(0x1a5)][_0x2191bd(0x56e)]();const _0x1db01d=$gameTemp[_0x2191bd(0xa99)](),_0x3efa94=_0x103227['WaitForProjectile'];if(!_0x1db01d)return;const _0x509b7f=BattleManager[_0x2191bd(0x526)];if(!_0x509b7f)return;_0x509b7f[_0x2191bd(0x724)](_0x103227);if(_0x3efa94)_0x1db01d[_0x2191bd(0x2d6)](_0x2191bd(0x365));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x9ed),_0x273e3c=>{const _0x3d5c37=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3d5c37(0xa37)])return;VisuMZ[_0x3d5c37(0x91e)](_0x273e3c,_0x273e3c),VisuMZ[_0x3d5c37(0x1a5)][_0x3d5c37(0x56e)]();const _0x4c3bec=$gameTemp[_0x3d5c37(0xa99)](),_0x2e177e=_0x273e3c['WaitForProjectile'];if(!_0x4c3bec)return;const _0x587c8d=BattleManager['_spriteset'];if(!_0x587c8d)return;_0x587c8d[_0x3d5c37(0x724)](_0x273e3c);if(_0x2e177e)_0x4c3bec['setWaitMode'](_0x3d5c37(0x365));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_ChangeSkew',_0x14917b=>{const _0x335b5b=_0x478a06;if(!SceneManager[_0x335b5b(0x785)]())return;if(!Imported[_0x335b5b(0x7b2)])return;VisuMZ[_0x335b5b(0x91e)](_0x14917b,_0x14917b);const _0x47c88c=$gameTemp[_0x335b5b(0xa99)](),_0x364e10=_0x14917b['WaitForSkew'];if(!_0x47c88c)return;$gameScreen[_0x335b5b(0x9ca)](_0x14917b['SkewX'],_0x14917b[_0x335b5b(0xf2)],_0x14917b['Duration'],_0x14917b[_0x335b5b(0x48f)]);if(_0x364e10)_0x47c88c[_0x335b5b(0x2d6)](_0x335b5b(0x6e0));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x3c1),_0x341e0e=>{const _0x4775dd=_0x478a06;if(!SceneManager[_0x4775dd(0x785)]())return;if(!Imported[_0x4775dd(0x7b2)])return;VisuMZ[_0x4775dd(0x91e)](_0x341e0e,_0x341e0e);const _0x4f81f4=$gameTemp[_0x4775dd(0xa99)](),_0x1df934=_0x341e0e['WaitForSkew'];if(!_0x4f81f4)return;$gameScreen[_0x4775dd(0x9ca)](0x0,0x0,_0x341e0e[_0x4775dd(0x9e6)],_0x341e0e[_0x4775dd(0x48f)]);if(_0x1df934)_0x4f81f4[_0x4775dd(0x2d6)]('battleSkew');}),PluginManager[_0x478a06(0x35c)](pluginData['name'],'ActSeq_Skew_WaitForSkew',_0x3dd6fe=>{const _0x1d91f8=_0x478a06;if(!SceneManager[_0x1d91f8(0x785)]())return;if(!Imported[_0x1d91f8(0x7b2)])return;const _0x5e4307=$gameTemp[_0x1d91f8(0xa99)]();if(!_0x5e4307)return;_0x5e4307['setWaitMode'](_0x1d91f8(0x6e0));}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x95b),_0x34e242=>{const _0x1cd748=_0x478a06;if(!SceneManager[_0x1cd748(0x785)]())return;VisuMZ[_0x1cd748(0x91e)](_0x34e242,_0x34e242);const _0x50bfc6=$gameTemp[_0x1cd748(0xa99)](),_0x522dba=_0x34e242[_0x1cd748(0x623)],_0x531d47=_0x34e242[_0x1cd748(0xbf7)];if(!_0x50bfc6)return;BattleManager[_0x1cd748(0x904)]=_0x522dba,BattleManager[_0x1cd748(0x39a)]=BattleManager[_0x1cd748(0x807)]?BattleManager[_0x1cd748(0x807)][BattleManager[_0x1cd748(0x904)]]||null:null,BattleManager[_0x1cd748(0x39a)]&&_0x531d47[_0x1cd748(0xabf)]()[_0x1cd748(0xb7d)]()!==_0x1cd748(0x852)&&_0x50bfc6[_0x1cd748(0xe2)]([_0x531d47]);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x245),_0x54bdf9=>{const _0x347d32=_0x478a06;if(!SceneManager[_0x347d32(0x785)]())return;VisuMZ[_0x347d32(0x91e)](_0x54bdf9,_0x54bdf9);const _0x2a8f99=$gameTemp['getLastPluginCommandInterpreter'](),_0x2cfeac=_0x54bdf9[_0x347d32(0xbf7)];if(!_0x2a8f99)return;BattleManager[_0x347d32(0x904)]++,BattleManager['_target']=BattleManager[_0x347d32(0x807)][BattleManager[_0x347d32(0x904)]]||null,BattleManager['_target']&&_0x2cfeac['toUpperCase']()[_0x347d32(0xb7d)]()!==_0x347d32(0x852)&&_0x2a8f99['command119']([_0x2cfeac]);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Target_PrevTarget',_0x18b1ce=>{const _0x3d75c6=_0x478a06;if(!SceneManager[_0x3d75c6(0x785)]())return;VisuMZ['ConvertParams'](_0x18b1ce,_0x18b1ce);const _0x53b820=$gameTemp[_0x3d75c6(0xa99)](),_0x43a784=_0x18b1ce['JumpToLabel'];if(!_0x53b820)return;BattleManager['_targetIndex']--,BattleManager[_0x3d75c6(0x39a)]=BattleManager['_allTargets'][BattleManager['_targetIndex']]||null,BattleManager[_0x3d75c6(0x39a)]&&_0x43a784[_0x3d75c6(0xabf)]()[_0x3d75c6(0xb7d)]()!==_0x3d75c6(0x852)&&_0x53b820[_0x3d75c6(0xe2)]([_0x43a784]);}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x9de),_0x4ca8fc=>{const _0x259e47=_0x478a06;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x259e47(0x91e)](_0x4ca8fc,_0x4ca8fc);const _0x528d7b=$gameTemp[_0x259e47(0xa99)](),_0x1e90b8=_0x4ca8fc[_0x259e47(0x4c8)],_0x16867f=_0x4ca8fc[_0x259e47(0xbf7)];if(!_0x528d7b)return;const _0x290a84=BattleManager[_0x259e47(0x904)];for(;;){BattleManager['_targetIndex']=Math[_0x259e47(0x679)](BattleManager['_allTargets'][_0x259e47(0x496)]);if(!_0x1e90b8)break;if(BattleManager[_0x259e47(0x904)]!==_0x290a84)break;if(BattleManager[_0x259e47(0x807)][_0x259e47(0x496)]<=0x1){BattleManager[_0x259e47(0x904)]=0x0;break;}}BattleManager[_0x259e47(0x39a)]=BattleManager['_allTargets'][BattleManager['_targetIndex']]||null,BattleManager[_0x259e47(0x39a)]&&_0x16867f[_0x259e47(0xabf)]()[_0x259e47(0xb7d)]()!==_0x259e47(0x852)&&_0x528d7b['command119']([_0x16867f]);}),PluginManager['registerCommand'](pluginData[_0x478a06(0x8ff)],_0x478a06(0x38d),_0xe1b382=>{const _0x4607f5=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_BattleVoices'])return;if(!ConfigManager[_0x4607f5(0x332)])return;VisuMZ[_0x4607f5(0x91e)](_0xe1b382,_0xe1b382);const _0x59fdc3=VisuMZ[_0x4607f5(0x10b)](_0xe1b382[_0x4607f5(0x1e7)]);let _0x3892a6=_0xe1b382[_0x4607f5(0x5a3)]||'';for(const _0x5d1b5a of _0x59fdc3){if(!_0x5d1b5a)continue;_0x5d1b5a[_0x4607f5(0xa45)](_0x3892a6);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_BattleVoice_PlaySpecialLine',_0x20111c=>{const _0x37e82d=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_BattleVoices'])return;if(!ConfigManager['battleVoices'])return;VisuMZ['ConvertParams'](_0x20111c,_0x20111c);const _0x30e9d3=VisuMZ[_0x37e82d(0x10b)](_0x20111c['Targets']);let _0x30ecf4=(_0x20111c[_0x37e82d(0x8f5)]||'')+(_0x20111c[_0x37e82d(0x704)]||'');for(const _0x3bbbff of _0x30e9d3){if(!_0x3bbbff)continue;_0x3bbbff['playBattleVoice'](_0x30ecf4);}}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0x53d),_0x401842=>{const _0x159215=_0x478a06;if(!SceneManager[_0x159215(0x785)]())return;VisuMZ[_0x159215(0x91e)](_0x401842,_0x401842);const _0x26bc68=VisuMZ[_0x159215(0x10b)](_0x401842['Targets']);for(const _0x2ece7b of _0x26bc68){if(!_0x2ece7b)continue;if(!_0x2ece7b[_0x159215(0x847)]())continue;_0x2ece7b[_0x159215(0x4d6)]();}}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x864),_0x535460=>{const _0x5f2084=_0x478a06;if(!SceneManager[_0x5f2084(0x785)]())return;VisuMZ[_0x5f2084(0x91e)](_0x535460,_0x535460);const _0x1389c3=$gameTemp[_0x5f2084(0xa99)]();let _0x33cb8f=![];const _0x34e93f=_0x535460[_0x5f2084(0xbf7)],_0x452e7f=VisuMZ[_0x5f2084(0x10b)](_0x535460[_0x5f2084(0x1e7)]);for(const _0x126dbd of _0x452e7f){if(!_0x126dbd)continue;if(!_0x126dbd[_0x5f2084(0x847)]())continue;_0x126dbd[_0x5f2084(0x210)](),_0x126dbd[_0x5f2084(0x5a8)]()[_0x5f2084(0x496)]>0x0?_0x33cb8f=!![]:_0x126dbd[_0x5f2084(0x4d6)]();}_0x33cb8f&&_0x34e93f['toUpperCase']()[_0x5f2084(0xb7d)]()!=='UNTITLED'&&_0x1389c3['command119']([_0x34e93f]);}),PluginManager['registerCommand'](pluginData['name'],_0x478a06(0x7ce),_0x40ab92=>{const _0x35dad7=_0x478a06;if(!SceneManager[_0x35dad7(0x785)]())return;VisuMZ[_0x35dad7(0x91e)](_0x40ab92,_0x40ab92);let _0xa66e18=_0x40ab92[_0x35dad7(0x7c8)];_0xa66e18--,_0xa66e18=Math[_0x35dad7(0x896)](_0xa66e18,0x0);const _0x3189b6=VisuMZ[_0x35dad7(0x10b)](_0x40ab92[_0x35dad7(0x1e7)]);for(const _0x29ef48 of _0x3189b6){if(!_0x29ef48)continue;if(!_0x29ef48[_0x35dad7(0x847)]())continue;_0x29ef48[_0x35dad7(0x586)](_0xa66e18);}}),PluginManager[_0x478a06(0x35c)](pluginData['name'],_0x478a06(0x832),_0x4eae41=>{const _0x5d611f=_0x478a06;if(!SceneManager[_0x5d611f(0x785)]())return;if(!Imported[_0x5d611f(0x7b2)])return;VisuMZ[_0x5d611f(0x91e)](_0x4eae41,_0x4eae41);const _0x59bcb4=$gameTemp[_0x5d611f(0xa99)](),_0x368d3b=_0x4eae41['WaitForZoom'];if(!_0x59bcb4)return;$gameScreen[_0x5d611f(0x233)](_0x4eae41[_0x5d611f(0x228)],_0x4eae41[_0x5d611f(0x9e6)],_0x4eae41[_0x5d611f(0x48f)]);if(_0x368d3b)_0x59bcb4[_0x5d611f(0x2d6)](_0x5d611f(0x8f8));}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],_0x478a06(0xab6),_0x12040b=>{const _0x51d3a5=_0x478a06;if(!SceneManager[_0x51d3a5(0x785)]())return;if(!Imported[_0x51d3a5(0x7b2)])return;VisuMZ[_0x51d3a5(0x91e)](_0x12040b,_0x12040b);const _0x1d504f=$gameTemp[_0x51d3a5(0xa99)](),_0x4905f9=_0x12040b[_0x51d3a5(0x338)];if(!_0x1d504f)return;$gameScreen[_0x51d3a5(0x233)](0x1,_0x12040b[_0x51d3a5(0x9e6)],_0x12040b['EasingType']);if(_0x4905f9)_0x1d504f[_0x51d3a5(0x2d6)]('battleZoom');}),PluginManager[_0x478a06(0x35c)](pluginData[_0x478a06(0x8ff)],'ActSeq_Zoom_WaitForZoom',_0x1e42aa=>{const _0x307701=_0x478a06;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x307701(0x7b2)])return;const _0x4f9d72=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4f9d72)return;_0x4f9d72[_0x307701(0x2d6)](_0x307701(0x8f8));}),VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x43c)]=Scene_Boot[_0x478a06(0x9c5)]['onDatabaseLoaded'],Scene_Boot[_0x478a06(0x9c5)][_0x478a06(0x4d2)]=function(){const _0x111e16=_0x478a06;this[_0x111e16(0xaf2)](),this[_0x111e16(0x8f7)](),this[_0x111e16(0x1cd)](),this[_0x111e16(0xbb8)](),VisuMZ['BattleCore'][_0x111e16(0x43c)][_0x111e16(0x21e)](this),this[_0x111e16(0x68f)](),this[_0x111e16(0x3f3)](),this[_0x111e16(0xb4b)](),this[_0x111e16(0x758)]();},Scene_Boot[_0x478a06(0x9c5)][_0x478a06(0x68f)]=function(){const _0x31fdc7=_0x478a06;if(VisuMZ[_0x31fdc7(0x176)])return;this[_0x31fdc7(0x34f)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this[_0x31fdc7(0xafa)]();},Scene_Boot[_0x478a06(0x9c5)]['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x51c0be=_0x478a06,_0x4b526b=$dataSystem[_0x51c0be(0xb95)]['length'];for(let _0x17d64b=0x0;_0x17d64b<_0x4b526b;_0x17d64b++){const _0x7804ae=$dataSystem[_0x51c0be(0x1b8)][_0x17d64b];if(_0x7804ae)continue;$dataSystem['attackMotions'][_0x17d64b]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot['prototype'][_0x478a06(0x8f7)]=function(){const _0x38a3dd=_0x478a06,_0x2336df=VisuMZ[_0x38a3dd(0x1a5)][_0x38a3dd(0x468)];_0x2336df['Damage'][_0x38a3dd(0xc0)]===undefined&&(_0x2336df[_0x38a3dd(0x7fa)]['PopupPosition']=_0x38a3dd(0xb92)),_0x2336df[_0x38a3dd(0x145)]['SmoothImage']===undefined&&(_0x2336df[_0x38a3dd(0x145)]['SmoothImage']=![]),_0x2336df[_0x38a3dd(0x9b6)][_0x38a3dd(0x6cd)]===undefined&&(_0x2336df[_0x38a3dd(0x9b6)][_0x38a3dd(0x6cd)]=!![]),_0x2336df['Actor'][_0x38a3dd(0x163)]===undefined&&(_0x2336df['Actor'][_0x38a3dd(0x163)]=![]),_0x2336df[_0x38a3dd(0x145)][_0x38a3dd(0x204)]===undefined&&(_0x2336df['Actor']['PrioritySortActors']=!![]);},VisuMZ[_0x478a06(0x181)]={},Scene_Boot[_0x478a06(0x9c5)][_0x478a06(0x1cd)]=function(){const _0x3c438a=_0x478a06;for(const _0x6c0c71 of VisuMZ[_0x3c438a(0x1a5)][_0x3c438a(0x468)]['Damage'][_0x3c438a(0x152)]){if(!_0x6c0c71)continue;const _0x37db5f=_0x6c0c71[_0x3c438a(0x5b3)][_0x3c438a(0xabf)]()[_0x3c438a(0xb7d)]();VisuMZ[_0x3c438a(0x181)][_0x37db5f]=_0x6c0c71;}},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x2e3)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot['prototype'][_0x478a06(0xbb8)]=function(){const _0x1986c3=_0x478a06,_0x241040=VisuMZ[_0x1986c3(0x1a5)][_0x1986c3(0x2e3)],_0x34ba9f=_0x1986c3(0x9fa),_0x531c58=[[_0x1986c3(0x185),_0x1986c3(0x888)],[_0x1986c3(0x447),_0x1986c3(0x9a8)]],_0x9a644=[[_0x1986c3(0xb66),_0x1986c3(0x2c0)],['%1Damage%2JS','JS\x20%1DAMAGE\x20%2']],_0x4d5093=[['',''],[_0x1986c3(0x8ec),_0x1986c3(0xb10)],[_0x1986c3(0x962),_0x1986c3(0xb2d)]];for(const _0x2d1ee4 of _0x9a644){for(const _0x305516 of _0x4d5093){for(const _0x2261a8 of _0x531c58){const _0x178990=_0x2d1ee4[0x0][_0x1986c3(0x177)](_0x2261a8[0x0],_0x305516[0x0]),_0x3ffb72=_0x2d1ee4[0x1][_0x1986c3(0x177)](_0x2261a8[0x1],_0x305516[0x1])[_0x1986c3(0xb7d)](),_0x20006d=new RegExp(_0x34ba9f[_0x1986c3(0x177)](_0x3ffb72),'i');_0x241040[_0x178990]=_0x20006d;}}}const _0x2290f1=[[_0x1986c3(0x734),'JS\x20%1START\x20ACTION'],['%1EndActionJS',_0x1986c3(0x22d)]];for(const _0x42b005 of _0x2290f1){for(const _0x248066 of _0x531c58){const _0x6fcdcd=_0x42b005[0x0][_0x1986c3(0x177)](_0x248066[0x0]),_0x402c02=_0x42b005[0x1][_0x1986c3(0x177)](_0x248066[0x1]),_0x142855=new RegExp(_0x34ba9f[_0x1986c3(0x177)](_0x402c02),'i');_0x241040[_0x6fcdcd]=_0x142855;}}const _0x2121d6=[[_0x1986c3(0x2b6),_0x1986c3(0x669)],[_0x1986c3(0x3d4),_0x1986c3(0x62b)],[_0x1986c3(0x985),'JS\x20BATTLE\x20VICTORY'],['BattleDefeatJS',_0x1986c3(0x67d)],[_0x1986c3(0x56f),_0x1986c3(0x705)],[_0x1986c3(0x201),_0x1986c3(0x60b)],[_0x1986c3(0x508),_0x1986c3(0x483)],[_0x1986c3(0x98f),'JS\x20%1END\x20TURN'],[_0x1986c3(0xb49),'JS\x20%1REGENERATE']];for(const _0x41e71e of _0x2121d6){for(const _0x807382 of _0x531c58){const _0x394d35=_0x41e71e[0x0][_0x1986c3(0x177)](_0x807382[0x0]),_0x1620de=_0x41e71e[0x1][_0x1986c3(0x177)](_0x807382[0x1]),_0x378b14=new RegExp(_0x34ba9f['format'](_0x1620de),'i');_0x241040[_0x394d35]=_0x378b14;}}},Scene_Boot[_0x478a06(0x9c5)][_0x478a06(0x34f)]=function(){const _0x57c7b1=_0x478a06,_0x2da192=$dataSkills[_0x57c7b1(0x74a)]($dataItems);for(const _0x1c0afc of _0x2da192){if(!_0x1c0afc)continue;VisuMZ[_0x57c7b1(0x1a5)][_0x57c7b1(0xaec)](_0x1c0afc);}},Scene_Boot[_0x478a06(0x9c5)]['process_VisuMZ_BattleCore_TraitObject_Notetags']=function(){const _0x4aba01=_0x478a06,_0x5cd78d=$dataActors[_0x4aba01(0x74a)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x39a5c1 of _0x5cd78d){if(!_0x39a5c1)continue;VisuMZ[_0x4aba01(0x1a5)][_0x4aba01(0xa40)](_0x39a5c1),_0x39a5c1[_0x4aba01(0xb78)]!==undefined&&VisuMZ[_0x4aba01(0x1a5)]['Parse_Notetags_HelpDescription'](_0x39a5c1);}},Scene_Boot[_0x478a06(0x9c5)]['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x191968=_0x478a06,_0xb38a76=VisuMZ[_0x191968(0x1a5)][_0x191968(0x468)][_0x191968(0xae0)][_0x191968(0x113)],_0xff51e4=[];for(const _0x18d526 of _0xb38a76){const _0x579c1e=$dataTroops[_0x18d526];if(_0x579c1e)_0xff51e4[_0x191968(0x6b3)](JsonEx['makeDeepCopy'](_0x579c1e));}for(const _0x3fdfbf of $dataTroops){if(!_0x3fdfbf)continue;for(const _0x1fc7aa of _0xff51e4){if(_0x1fc7aa['id']===_0x3fdfbf['id'])continue;_0x3fdfbf[_0x191968(0x57c)]=_0x3fdfbf[_0x191968(0x57c)][_0x191968(0x74a)](_0x1fc7aa[_0x191968(0x57c)]);}}},Scene_Boot[_0x478a06(0x9c5)]['process_VisuMZ_BattleCore_PreBattleCommonEvent']=function(){const _0x6dd5f0=_0x478a06,_0x2cb053=VisuMZ[_0x6dd5f0(0x1a5)][_0x6dd5f0(0x468)][_0x6dd5f0(0xae0)];if(_0x2cb053[_0x6dd5f0(0x9af)]>0x0&&$dataCommonEvents[_0x2cb053['BattleStartEvent']]){const _0x33f946=$dataCommonEvents[_0x2cb053[_0x6dd5f0(0x9af)]],_0x1b0c35=_0x33f946[_0x6dd5f0(0x841)][_0x6dd5f0(0x496)]-0x2,_0x4e4c3d=_0x33f946[_0x6dd5f0(0x841)][_0x1b0c35];if(_0x4e4c3d&&_0x4e4c3d[_0x6dd5f0(0x8c5)]!==0xe6){const _0x19ee4f={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x459f6e=_0x33f946[_0x6dd5f0(0x841)]['pop']();_0x33f946['list'][_0x6dd5f0(0x517)](_0x19ee4f),_0x33f946['list'][_0x6dd5f0(0x517)](_0x459f6e);}}},Scene_Boot['prototype'][_0x478a06(0x758)]=function(){const _0x2a18cb=_0x478a06;VisuMZ[_0x2a18cb(0x1a5)]['CreateCommonEventKeys'](),VisuMZ[_0x2a18cb(0x1a5)][_0x2a18cb(0x3bf)]($dataSkills),VisuMZ[_0x2a18cb(0x1a5)][_0x2a18cb(0x3bf)]($dataItems);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x94a)]=function(){const _0x12dc1f=_0x478a06;VisuMZ[_0x12dc1f(0x1a5)][_0x12dc1f(0xb70)]={};for(const _0x481d44 of $dataCommonEvents){if(!_0x481d44)continue;if(_0x481d44[_0x12dc1f(0x8ff)][_0x12dc1f(0x85a)](/\[(.*)\]/i)){let _0x27b544=String(RegExp['$1'])[_0x12dc1f(0xaa3)](/,/g,'')['toUpperCase']()[_0x12dc1f(0xb7d)]();VisuMZ[_0x12dc1f(0x1a5)][_0x12dc1f(0xb70)][_0x27b544]=_0x481d44['id'];}}},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x3bf)]=function(_0x45fabf){const _0x37cee7=_0x478a06;for(const _0x2861ff of _0x45fabf){if(!_0x2861ff)continue;VisuMZ[_0x37cee7(0x1a5)]['BindCommonEventKeysForObj'](_0x2861ff);}},VisuMZ['BattleCore'][_0x478a06(0x7d2)]=function(_0x25e9ea){const _0x2e296f=_0x478a06;if(!_0x25e9ea)return;if(!_0x25e9ea['effects'])return;VisuMZ['BattleCore'][_0x2e296f(0xb70)]=VisuMZ[_0x2e296f(0x1a5)][_0x2e296f(0xb70)]||{};const _0x3c4c97=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0xa064cb=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x18b8e0=[];const _0x38f78e=_0x25e9ea['note']['match'](_0x3c4c97);if(_0x38f78e){for(const _0x45e0df of _0x38f78e){_0x45e0df[_0x2e296f(0x85a)](_0x3c4c97);const _0x39c4fe=String(RegExp['$1'])[_0x2e296f(0x4c7)](',')[_0x2e296f(0x77a)](_0x487d8d=>String(_0x487d8d)[_0x2e296f(0xabf)]()[_0x2e296f(0xb7d)]());_0x18b8e0=_0x18b8e0[_0x2e296f(0x74a)](_0x39c4fe);}!_0x25e9ea[_0x2e296f(0x39c)][_0x2e296f(0x85a)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x25e9ea['note']+=_0x2e296f(0x7fc));;}if(_0x25e9ea[_0x2e296f(0x39c)][_0x2e296f(0x85a)](_0xa064cb)){const _0x4861f9=String(RegExp['$1'])[_0x2e296f(0x4c7)](/[\r\n]+/)['map'](_0x3f0ab0=>String(_0x3f0ab0)[_0x2e296f(0xabf)]()[_0x2e296f(0xb7d)]());_0x18b8e0=_0x18b8e0[_0x2e296f(0x74a)](_0x4861f9);!_0x25e9ea[_0x2e296f(0x39c)][_0x2e296f(0x85a)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x25e9ea[_0x2e296f(0x39c)]+=_0x2e296f(0x7fc));;}for(const _0x4c29a6 of _0x18b8e0){if(VisuMZ[_0x2e296f(0x1a5)][_0x2e296f(0xb70)][_0x4c29a6]){const _0xfe39e3=VisuMZ[_0x2e296f(0x1a5)][_0x2e296f(0xb70)][_0x4c29a6],_0x5f36a7={'code':0x2c,'dataId':_0xfe39e3,'value1':0x1,'value2':0x0};_0x25e9ea[_0x2e296f(0x757)]['push'](_0x5f36a7);}}},Scene_Boot[_0x478a06(0x9c5)]['process_VisuMZ_BattleCore_jsFunctions']=function(){const _0x5c9f9c=_0x478a06,_0x2c511b=$dataSkills[_0x5c9f9c(0x74a)]($dataItems);for(const _0x2ec013 of _0x2c511b){if(!_0x2ec013)continue;VisuMZ[_0x5c9f9c(0x1a5)][_0x5c9f9c(0x116)](_0x2ec013);}},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x36a)]=VisuMZ[_0x478a06(0x36a)],VisuMZ[_0x478a06(0x36a)]=function(_0x570eab){const _0x5f4333=_0x478a06;VisuMZ[_0x5f4333(0x1a5)]['ParseActorNotetags']&&VisuMZ[_0x5f4333(0x1a5)]['ParseActorNotetags'][_0x5f4333(0x21e)](this,_0x570eab),VisuMZ[_0x5f4333(0x1a5)][_0x5f4333(0xa40)](_0x570eab);},VisuMZ['BattleCore'][_0x478a06(0x911)]=VisuMZ[_0x478a06(0x911)],VisuMZ[_0x478a06(0x911)]=function(_0x5ab118){const _0x257a95=_0x478a06;VisuMZ[_0x257a95(0x1a5)][_0x257a95(0x911)]&&VisuMZ[_0x257a95(0x1a5)][_0x257a95(0x911)]['call'](this,_0x5ab118),VisuMZ[_0x257a95(0x1a5)][_0x257a95(0xa40)](_0x5ab118);},VisuMZ[_0x478a06(0x1a5)]['ParseSkillNotetags']=VisuMZ[_0x478a06(0x8e5)],VisuMZ[_0x478a06(0x8e5)]=function(_0x50c06a){const _0x387f2f=_0x478a06;VisuMZ['BattleCore'][_0x387f2f(0x8e5)]&&VisuMZ[_0x387f2f(0x1a5)][_0x387f2f(0x8e5)][_0x387f2f(0x21e)](this,_0x50c06a),VisuMZ['BattleCore'][_0x387f2f(0xaec)](_0x50c06a),VisuMZ[_0x387f2f(0x1a5)][_0x387f2f(0x116)](_0x50c06a);},VisuMZ['BattleCore'][_0x478a06(0x105)]=VisuMZ[_0x478a06(0x105)],VisuMZ['ParseItemNotetags']=function(_0x5030da){const _0x424e39=_0x478a06;VisuMZ[_0x424e39(0x1a5)]['ParseItemNotetags']&&VisuMZ['BattleCore'][_0x424e39(0x105)][_0x424e39(0x21e)](this,_0x5030da),VisuMZ[_0x424e39(0x1a5)][_0x424e39(0xaec)](_0x5030da),VisuMZ['BattleCore']['Parse_Notetags_Targets'](_0x5030da);},VisuMZ['BattleCore']['ParseWeaponNotetags']=VisuMZ['ParseWeaponNotetags'],VisuMZ[_0x478a06(0x23a)]=function(_0x246457){const _0x8f7b16=_0x478a06;VisuMZ[_0x8f7b16(0x1a5)][_0x8f7b16(0x23a)]&&VisuMZ[_0x8f7b16(0x1a5)][_0x8f7b16(0x23a)][_0x8f7b16(0x21e)](this,_0x246457),VisuMZ[_0x8f7b16(0x1a5)][_0x8f7b16(0xa40)](_0x246457);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x765)]=VisuMZ['ParseArmorNotetags'],VisuMZ[_0x478a06(0x765)]=function(_0x1f39ce){const _0x10250d=_0x478a06;VisuMZ[_0x10250d(0x1a5)][_0x10250d(0x765)]&&VisuMZ[_0x10250d(0x1a5)][_0x10250d(0x765)]['call'](this,_0x1f39ce),VisuMZ[_0x10250d(0x1a5)]['Parse_Notetags_TraitObjects'](_0x1f39ce);},VisuMZ['BattleCore']['ParseEnemyNotetags']=VisuMZ['ParseEnemyNotetags'],VisuMZ['ParseEnemyNotetags']=function(_0xae8d2c){const _0x55a2e9=_0x478a06;VisuMZ[_0x55a2e9(0x1a5)]['ParseEnemyNotetags']&&VisuMZ[_0x55a2e9(0x1a5)]['ParseEnemyNotetags']['call'](this,_0xae8d2c),VisuMZ[_0x55a2e9(0x1a5)][_0x55a2e9(0xa40)](_0xae8d2c);},VisuMZ['BattleCore'][_0x478a06(0x889)]=VisuMZ[_0x478a06(0x889)],VisuMZ[_0x478a06(0x889)]=function(_0x31c9f1){const _0x41da3b=_0x478a06;VisuMZ[_0x41da3b(0x1a5)]['ParseStateNotetags']&&VisuMZ[_0x41da3b(0x1a5)]['ParseStateNotetags'][_0x41da3b(0x21e)](this,_0x31c9f1),VisuMZ[_0x41da3b(0x1a5)]['Parse_Notetags_TraitObjects'](_0x31c9f1),VisuMZ[_0x41da3b(0x1a5)]['Parse_Notetags_HelpDescription'](_0x31c9f1);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xaec)]=function(_0x4a439e){const _0xe7f697=_0x478a06,_0x22548c=[_0xe7f697(0xb74),_0xe7f697(0x194),_0xe7f697(0x129),_0xe7f697(0x732),'PreStartActionJS','PostStartActionJS',_0xe7f697(0x98d),_0xe7f697(0x138)];for(const _0x339bbf of _0x22548c){VisuMZ['BattleCore'][_0xe7f697(0x5dc)](_0x4a439e,_0x339bbf);}const _0x2d2957=_0x4a439e[_0xe7f697(0x39c)];_0x2d2957['match'](/<ALWAYS CRITICAL/i)&&(_0x4a439e[_0xe7f697(0x6b4)]['critical']=!![]),_0x2d2957[_0xe7f697(0x85a)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x4a439e[_0xe7f697(0x7e0)]=Math[_0xe7f697(0x896)](0x1,Number(RegExp['$1']))),_0x2d2957[_0xe7f697(0x85a)](/<TARGET:[ ](.*)>/i)&&(_0x4a439e[_0xe7f697(0x564)]=String(RegExp['$1'])['toUpperCase']()[_0xe7f697(0xb7d)]());},VisuMZ['BattleCore']['Parse_Notetags_TraitObjects']=function(_0x316e83){const _0x18bdda=_0x478a06,_0x4a1393=[_0x18bdda(0x14d),_0x18bdda(0x7a8),_0x18bdda(0x694),_0x18bdda(0x83b),'PreApplyAsTargetJS','PostApplyAsTargetJS',_0x18bdda(0x598),_0x18bdda(0x9df),_0x18bdda(0x557),'PostStartActionJS',_0x18bdda(0x98d),'PostEndActionJS',_0x18bdda(0x756),_0x18bdda(0xb68),_0x18bdda(0x4f4),_0x18bdda(0x95f),_0x18bdda(0x985),_0x18bdda(0x370),_0x18bdda(0x56f),_0x18bdda(0x201),'PreStartTurnJS','PostStartTurnJS','PreEndTurnJS','PostEndTurnJS','PreRegenerateJS','PostRegenerateJS'];for(const _0x2dac78 of _0x4a1393){VisuMZ[_0x18bdda(0x1a5)]['createJS'](_0x316e83,_0x2dac78);}const _0x7885c4=[_0x18bdda(0x3b1),'jsAccuracyAsUser',_0x18bdda(0xb82),_0x18bdda(0x531),_0x18bdda(0x97a)];for(const _0x227d6a of _0x7885c4){VisuMZ['BattleCore']['createRateJS'](_0x316e83,_0x227d6a);}},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x116)]=function(_0x127b55){const _0x447243=_0x478a06,_0x1ff2a2=_0x127b55['note'];if(_0x1ff2a2[_0x447243(0x85a)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x5fc23b=String(RegExp['$1']),_0x1dfbbe=VisuMZ[_0x447243(0x1a5)][_0x447243(0xb43)](_0x127b55,_0x447243(0x1e7));VisuMZ[_0x447243(0x1a5)][_0x447243(0xbaf)](_0x5fc23b,_0x1dfbbe);}if(_0x1ff2a2['match'](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x460b54=String(RegExp['$1']),_0x11f5bf=VisuMZ[_0x447243(0x1a5)][_0x447243(0xb43)](_0x127b55,'CommandVisible');VisuMZ[_0x447243(0x1a5)]['createCommandVisibleJS'](_0x460b54,_0x11f5bf);}},VisuMZ[_0x478a06(0x1a5)]['JS']={},VisuMZ['BattleCore'][_0x478a06(0x5dc)]=function(_0x50413b,_0x559b9a){const _0x4645f4=_0x478a06,_0x3e09ea=_0x50413b['note'];if(_0x3e09ea['match'](VisuMZ[_0x4645f4(0x1a5)][_0x4645f4(0x2e3)][_0x559b9a])){const _0x32de43=RegExp['$1'],_0x16fab5=_0x4645f4(0x828)[_0x4645f4(0x177)](_0x32de43),_0x554402=VisuMZ['BattleCore'][_0x4645f4(0xb43)](_0x50413b,_0x559b9a);VisuMZ[_0x4645f4(0x1a5)]['JS'][_0x554402]=new Function(_0x16fab5);}},VisuMZ[_0x478a06(0x1a5)]['createKeyJS']=function(_0x54bbbe,_0x11d164){const _0x3353aa=_0x478a06;if(VisuMZ[_0x3353aa(0xb43)])return VisuMZ[_0x3353aa(0xb43)](_0x54bbbe,_0x11d164);let _0x2578c2='';if($dataActors['includes'](_0x54bbbe))_0x2578c2=_0x3353aa(0x539)[_0x3353aa(0x177)](_0x54bbbe['id'],_0x11d164);if($dataClasses[_0x3353aa(0x982)](_0x54bbbe))_0x2578c2=_0x3353aa(0x965)[_0x3353aa(0x177)](_0x54bbbe['id'],_0x11d164);if($dataSkills[_0x3353aa(0x982)](_0x54bbbe))_0x2578c2='Skill-%1-%2'['format'](_0x54bbbe['id'],_0x11d164);if($dataItems['includes'](_0x54bbbe))_0x2578c2=_0x3353aa(0x3bb)[_0x3353aa(0x177)](_0x54bbbe['id'],_0x11d164);if($dataWeapons[_0x3353aa(0x982)](_0x54bbbe))_0x2578c2=_0x3353aa(0x48b)[_0x3353aa(0x177)](_0x54bbbe['id'],_0x11d164);if($dataArmors['includes'](_0x54bbbe))_0x2578c2='Armor-%1-%2'[_0x3353aa(0x177)](_0x54bbbe['id'],_0x11d164);if($dataEnemies[_0x3353aa(0x982)](_0x54bbbe))_0x2578c2=_0x3353aa(0x5b4)[_0x3353aa(0x177)](_0x54bbbe['id'],_0x11d164);if($dataStates['includes'](_0x54bbbe))_0x2578c2=_0x3353aa(0xa2f)['format'](_0x54bbbe['id'],_0x11d164);return _0x2578c2;},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xbaf)]=function(_0x2fd86c,_0x4edc57){const _0x50bab1=_0x478a06,_0x477812=_0x50bab1(0xb90)['format'](_0x2fd86c);VisuMZ[_0x50bab1(0x1a5)]['JS'][_0x4edc57]=new Function(_0x477812);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x384)]=function(_0x516302,_0x3f3e64){const _0x22a26a=_0x478a06,_0x363d95=_0x22a26a(0xa7f)['format'](_0x516302);VisuMZ[_0x22a26a(0x1a5)]['JS'][_0x3f3e64]=new Function(_0x363d95);},VisuMZ['BattleCore'][_0x478a06(0x4c1)]=function(_0x1e770d,_0x4c0da5){const _0x527c93=_0x478a06,_0x211052=_0x1e770d[_0x527c93(0x39c)];if(_0x211052[_0x527c93(0x85a)](VisuMZ[_0x527c93(0x1a5)][_0x527c93(0x2e3)][_0x4c0da5])){const _0x4873d0=RegExp['$1'],_0x3e37b3='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x527c93(0x177)](_0x4873d0),_0x53deb0=VisuMZ[_0x527c93(0x1a5)][_0x527c93(0xb43)](_0x1e770d,_0x4c0da5);VisuMZ[_0x527c93(0x1a5)]['JS'][_0x53deb0]=new Function(_0x3e37b3);}},VisuMZ['BattleCore'][_0x478a06(0x281)]=function(_0x191d0e){const _0x4de84e=_0x478a06;_0x191d0e[_0x4de84e(0x42b)]='-';const _0x37fa8f=_0x191d0e[_0x4de84e(0x39c)];_0x37fa8f[_0x4de84e(0x85a)](/<(?:HELP|HELP DESCRIPTION|DESCRIPTION)>\s*([\s\S]*)\s*<\/(?:HELP|HELP DESCRIPTION|DESCRIPTION)>/i)&&(_0x191d0e[_0x4de84e(0x42b)]=String(RegExp['$1'])['trim']()),_0x37fa8f[_0x4de84e(0x85a)](/<(?:IN-BATTLE |)STATUS DESCRIPTION>\s*([\s\S]*)\s*<\/(?:IN-BATTLE |)STATUS DESCRIPTION>/i)&&(_0x191d0e['statusDescription']=String(RegExp['$1'])[_0x4de84e(0xb7d)]()),_0x37fa8f[_0x4de84e(0x85a)](/<EXCLUDE FROM (?:HELP|STATUS|STATUS LIST|LISTING)>/i)&&(_0x191d0e[_0x4de84e(0x4f1)]=!![]);},TextManager[_0x478a06(0x9d0)]=VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0xae9)]['CmdTextAutoBattle'],TextManager[_0x478a06(0x385)]=VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0xa58)]['StartName'],TextManager[_0x478a06(0x7d1)]=VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0xa58)]['StyleName'],TextManager[_0x478a06(0xb3d)]=VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x2ae)][_0x478a06(0x5b3)],ColorManager[_0x478a06(0x455)]=function(_0x2c8b80){const _0x993def=_0x478a06;return _0x2c8b80=String(_0x2c8b80),_0x2c8b80[_0x993def(0x85a)](/#(.*)/i)?_0x993def(0x2ce)[_0x993def(0x177)](String(RegExp['$1'])):this['textColor'](Number(_0x2c8b80));},DataManager['getDamageStyle']=function(_0x7102c9){const _0x525063=_0x478a06;if(_0x7102c9[_0x525063(0x39c)][_0x525063(0x85a)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x5bbb03=String(RegExp['$1'])[_0x525063(0xabf)]()[_0x525063(0xb7d)]();if(_0x5bbb03===_0x525063(0xf9))return _0x525063(0xf9);if(VisuMZ['DamageStyles'][_0x5bbb03])return _0x5bbb03;}const _0x141960=VisuMZ['BattleCore']['Settings']['Damage'][_0x525063(0x301)][_0x525063(0xabf)]()[_0x525063(0xb7d)]();if(VisuMZ[_0x525063(0x181)][_0x141960])return _0x141960;return'MANUAL';},DataManager[_0x478a06(0xb86)]=function(_0x31d1a5){const _0x35fb76=_0x478a06;_0x31d1a5=_0x31d1a5[_0x35fb76(0xabf)]()[_0x35fb76(0xb7d)](),this[_0x35fb76(0x8e0)]=this['_stypeIDs']||{};if(this[_0x35fb76(0x8e0)][_0x31d1a5])return this[_0x35fb76(0x8e0)][_0x31d1a5];for(let _0x3178ea=0x1;_0x3178ea<0x64;_0x3178ea++){if(!$dataSystem[_0x35fb76(0x473)][_0x3178ea])continue;let _0x59c7da=$dataSystem[_0x35fb76(0x473)][_0x3178ea][_0x35fb76(0xabf)]()['trim']();_0x59c7da=_0x59c7da[_0x35fb76(0xaa3)](/\x1I\[(\d+)\]/gi,''),_0x59c7da=_0x59c7da[_0x35fb76(0xaa3)](/\\I\[(\d+)\]/gi,''),this[_0x35fb76(0x8e0)][_0x59c7da]=_0x3178ea;}return this[_0x35fb76(0x8e0)][_0x31d1a5]||0x0;},DataManager['getSkillIdWithName']=function(_0x32a8c9){const _0x1fc501=_0x478a06;_0x32a8c9=_0x32a8c9['toUpperCase']()[_0x1fc501(0xb7d)](),this[_0x1fc501(0x4ca)]=this[_0x1fc501(0x4ca)]||{};if(this[_0x1fc501(0x4ca)][_0x32a8c9])return this['_skillIDs'][_0x32a8c9];for(const _0xb0415e of $dataSkills){if(!_0xb0415e)continue;this[_0x1fc501(0x4ca)][_0xb0415e[_0x1fc501(0x8ff)][_0x1fc501(0xabf)]()[_0x1fc501(0xb7d)]()]=_0xb0415e['id'];}return this[_0x1fc501(0x4ca)][_0x32a8c9]||0x0;},DataManager[_0x478a06(0x2f3)]=function(_0xcfe85b){const _0xae05f3=_0x478a06;_0xcfe85b=_0xcfe85b['toUpperCase']()['trim'](),this[_0xae05f3(0x6c3)]=this['_enemyIDs']||{};if(this[_0xae05f3(0x6c3)][_0xcfe85b])return this[_0xae05f3(0x6c3)][_0xcfe85b];for(const _0x2ec3ca of $dataEnemies){if(!_0x2ec3ca)continue;this[_0xae05f3(0x6c3)][_0x2ec3ca[_0xae05f3(0x8ff)][_0xae05f3(0xabf)]()['trim']()]=_0x2ec3ca['id'];}return this[_0xae05f3(0x6c3)][_0xcfe85b]||0x0;},DataManager[_0x478a06(0x667)]=function(_0x113db6){const _0x405409=_0x478a06;_0x113db6=_0x113db6[_0x405409(0xabf)]()[_0x405409(0xb7d)](),this[_0x405409(0x5ba)]=this['_wtypeIDs']||{};if(this[_0x405409(0x5ba)][_0x113db6])return this[_0x405409(0x5ba)][_0x113db6];for(let _0x20b6bb=0x1;_0x20b6bb<0x64;_0x20b6bb++){if(!$dataSystem[_0x405409(0xb95)][_0x20b6bb])continue;let _0x55fef0=$dataSystem[_0x405409(0xb95)][_0x20b6bb][_0x405409(0xabf)]()['trim']();_0x55fef0=_0x55fef0['replace'](/\x1I\[(\d+)\]/gi,''),_0x55fef0=_0x55fef0[_0x405409(0xaa3)](/\\I\[(\d+)\]/gi,''),this[_0x405409(0x5ba)][_0x55fef0]=_0x20b6bb;}return this[_0x405409(0x5ba)]['BARE\x20HANDS']=0x0,this[_0x405409(0x5ba)][_0x113db6]||0x0;},DataManager[_0x478a06(0x603)]=function(_0x407735){const _0x35f759=_0x478a06,_0x3a49d7='\x5cI[%1]%2';let _0x2ca962=_0x407735[_0x35f759(0x4b7)],_0x599389=_0x407735['name'];const _0x382e4d=_0x407735[_0x35f759(0x39c)];return _0x382e4d[_0x35f759(0x85a)](/<DISPLAY ICON: (\d+)>/i)&&(_0x2ca962=Number(RegExp['$1'])),_0x382e4d[_0x35f759(0x85a)](/<DISPLAY TEXT: (.*)>/i)&&(_0x599389=String(RegExp['$1'])),_0x3a49d7[_0x35f759(0x177)](_0x2ca962,_0x599389);},DataManager['battleCommandName']=function(_0x34cdb0){const _0x5a674b=_0x478a06;return _0x34cdb0[_0x5a674b(0x39c)]['match'](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x34cdb0[_0x5a674b(0x8ff)];},DataManager[_0x478a06(0x3ad)]=function(_0x5428e2){const _0x285667=_0x478a06;return _0x5428e2[_0x285667(0x39c)]['match'](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x5428e2[_0x285667(0x4b7)];},DataManager[_0x478a06(0x527)]=function(_0x4bc9fb){const _0x1d8063=_0x478a06,_0x14ef05=$dataEnemies[_0x4bc9fb];if(_0x14ef05){if(_0x14ef05['note']['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x2d8e7e=String(RegExp['$1'])[_0x1d8063(0x4c7)](/[\r\n]+/)[_0x1d8063(0x553)](''),_0x29373c=this[_0x1d8063(0xa3a)](_0x2d8e7e);_0x4bc9fb=this['getEnemyIdWithName'](_0x29373c)||_0x4bc9fb,_0x4bc9fb=DataManager['swapEnemyIDs'](_0x4bc9fb);}}return _0x4bc9fb;},DataManager[_0x478a06(0xa3a)]=function(_0x213ac7){const _0x72d438=_0x478a06;let _0x68e454=0x0;const _0x2b362b={};for(const _0x3e00d9 of _0x213ac7){if(_0x3e00d9[_0x72d438(0x85a)](/(.*):[ ](\d+)/i)){const _0x32f2b4=String(RegExp['$1'])[_0x72d438(0xb7d)](),_0x3cdbed=Number(RegExp['$2']);_0x2b362b[_0x32f2b4]=_0x3cdbed,_0x68e454+=_0x3cdbed;}else{if(_0x3e00d9[_0x72d438(0x85a)](/(.*):[ ](\d+\.?\d+)/i)){const _0x2d71fd=String(RegExp['$1'])[_0x72d438(0xb7d)](),_0x35b257=Number(RegExp['$2']);_0x2b362b[_0x2d71fd]=_0x35b257,_0x68e454+=_0x35b257;}else _0x3e00d9!==''&&(_0x2b362b[_0x3e00d9]=0x1,_0x68e454++);}}if(_0x68e454<=0x0)return'';let _0xbbd740=Math[_0x72d438(0x8a1)]()*_0x68e454;for(const _0x34d7a5 in _0x2b362b){_0xbbd740-=_0x2b362b[_0x34d7a5];if(_0xbbd740<=0x0)return _0x34d7a5;}return'';},DataManager[_0x478a06(0x666)]=function(_0xf66252){const _0x596a7c=_0x478a06;if(!_0xf66252)return![];if(!VisuMZ[_0x596a7c(0x1a5)][_0x596a7c(0x468)][_0x596a7c(0xaef)]['AutoNotetag'])return![];if(_0xf66252['note'][_0x596a7c(0x85a)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0xf66252[_0x596a7c(0x39c)]['match'](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x148b81 of _0xf66252[_0x596a7c(0x757)]){if(!_0x148b81)continue;if(_0x148b81['code']===Game_Action['EFFECT_COMMON_EVENT'])return!![];}return![];},DataManager[_0x478a06(0x6d4)]=function(_0x30a243){const _0x2bea97=_0x478a06,_0xf85480=$dataTroops[_0x30a243];if(!_0xf85480)return'';let _0x5e8c32='';_0x5e8c32+=_0xf85480['name'];for(const _0x534702 of _0xf85480[_0x2bea97(0x57c)]){for(const _0x468cf1 of _0x534702['list']){[0x6c,0x198][_0x2bea97(0x982)](_0x468cf1['code'])&&(_0x5e8c32+='\x0a',_0x5e8c32+=_0x468cf1[_0x2bea97(0xac4)][0x0]);}}return _0x5e8c32;},ConfigManager[_0x478a06(0xaf8)]=ConfigManager['autoBattleAtStart']??![],ConfigManager[_0x478a06(0x4fa)]=ConfigManager[_0x478a06(0x4fa)]??![],ConfigManager[_0x478a06(0xb3d)]=ConfigManager['visualHpGauge']??!![],VisuMZ[_0x478a06(0x1a5)]['ConfigManager_makeData']=ConfigManager['makeData'],ConfigManager[_0x478a06(0x62e)]=function(){const _0x41b4c7=_0x478a06,_0x52e3c5=VisuMZ['BattleCore'][_0x41b4c7(0x66e)][_0x41b4c7(0x21e)](this);return _0x52e3c5[_0x41b4c7(0xaf8)]=this['autoBattleAtStart'],_0x52e3c5['autoBattleUseSkills']=this[_0x41b4c7(0x4fa)],_0x52e3c5[_0x41b4c7(0xb3d)]=this[_0x41b4c7(0xb3d)],_0x52e3c5;},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x777)]=ConfigManager['applyData'],ConfigManager[_0x478a06(0x33a)]=function(_0x528317){const _0x2fada0=_0x478a06;VisuMZ['BattleCore'][_0x2fada0(0x777)][_0x2fada0(0x21e)](this,_0x528317),_0x2fada0(0xaf8)in _0x528317?this[_0x2fada0(0xaf8)]=_0x528317[_0x2fada0(0xaf8)]:this[_0x2fada0(0xaf8)]=![],_0x2fada0(0x4fa)in _0x528317?this[_0x2fada0(0x4fa)]=_0x528317[_0x2fada0(0x4fa)]:this['autoBattleUseSkills']=![],'visualHpGauge'in _0x528317?this[_0x2fada0(0xb3d)]=_0x528317[_0x2fada0(0xb3d)]:this[_0x2fada0(0xb3d)]=!![];},ImageManager[_0x478a06(0xb13)]=ImageManager[_0x478a06(0xb13)]||0x9,ImageManager[_0x478a06(0x4d4)]=ImageManager[_0x478a06(0x4d4)]||0x6,VisuMZ[_0x478a06(0x1a5)]['BattleManager_setup']=BattleManager[_0x478a06(0x40f)],BattleManager[_0x478a06(0x40f)]=function(_0x2def7d,_0x174a3f,_0x4fe6a4){const _0x3e9704=_0x478a06;VisuMZ[_0x3e9704(0x1a5)][_0x3e9704(0x121)][_0x3e9704(0x21e)](this,_0x2def7d,_0x174a3f,_0x4fe6a4),this[_0x3e9704(0x1f0)]={};},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x906)]=BattleManager[_0x478a06(0x2ef)],BattleManager[_0x478a06(0x2ef)]=function(){const _0x59ddbe=_0x478a06;VisuMZ[_0x59ddbe(0x1a5)]['BattleManager_initMembers'][_0x59ddbe(0x21e)](this),this['_forcedBattlers']=[];},BattleManager[_0x478a06(0x9f2)]=function(){const _0x25359c=_0x478a06;if(!SceneManager[_0x25359c(0x785)]())return;const _0x25e3c2=SceneManager['_scene'][_0x25359c(0x967)];if(_0x25e3c2)_0x25e3c2['requestRefresh']();},BattleManager[_0x478a06(0x601)]=function(){const _0x3315cb=_0x478a06;if(BattleManager[_0x3315cb(0xb72)]())return _0x3315cb(0x860);return _0x3315cb(0x9ee);},BattleManager['isBattleSys']=function(_0x3307f1){const _0x1b4697=_0x478a06;return _0x3307f1=_0x3307f1[_0x1b4697(0xabf)]()[_0x1b4697(0xb7d)](),this[_0x1b4697(0x601)]()===_0x3307f1;},BattleManager[_0x478a06(0xa80)]=function(){const _0x225f32=_0x478a06;return this[_0x225f32(0xaf5)](_0x225f32(0x9ee));},BattleManager['isTurnBased']=function(){const _0x5a5835=_0x478a06;return this[_0x5a5835(0xa80)]();},BattleManager[_0x478a06(0xbdf)]=function(){const _0x53b329=_0x478a06;return!this[_0x53b329(0xbec)]();},BattleManager[_0x478a06(0x61a)]=function(){const _0x3c1de4=_0x478a06;return!this[_0x3c1de4(0xbec)]()&&!this[_0x3c1de4(0xbdf)]();},BattleManager[_0x478a06(0x196)]=function(_0x55a8d1){const _0x42ee31=_0x478a06;this[_0x42ee31(0x1f0)]=this['_battlerKeyCache']||{};if(this[_0x42ee31(0x1f0)][_0x55a8d1]!==undefined)return this['_battlerKeyCache'][_0x55a8d1];this['_battlerKeyCache'][_0x55a8d1]=null;const _0x45a4d6=this[_0x42ee31(0x3df)](),_0x3ae795=_0x45a4d6['find'](_0x47657f=>_0x47657f[_0x42ee31(0x7bd)]()===_0x55a8d1);if(_0x3ae795)this[_0x42ee31(0x1f0)][_0x55a8d1]=_0x3ae795;return this[_0x42ee31(0x1f0)][_0x55a8d1];},Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x7bd)]=function(){const _0x2ea3fa=_0x478a06;return _0x2ea3fa(0x7aa)[_0x2ea3fa(0x177)](this[_0x2ea3fa(0x847)]()?'actor':_0x2ea3fa(0x2f2),this[_0x2ea3fa(0x8ff)]()+'-'+(this[_0x2ea3fa(0x847)]()?this[_0x2ea3fa(0x4aa)]():this['index']()));},Game_Action['prototype'][_0x478a06(0xa4c)]=function(_0x4b1370){const _0x124697=_0x478a06;if(this[_0x124697(0x7d6)]!=='')return;typeof _0x4b1370===_0x124697(0x6b9)?this[_0x124697(0x7d6)]=_0x4b1370[_0x124697(0xbd5)]()[_0x124697(0xb7d)]():this[_0x124697(0x7d6)]=_0x4b1370[_0x124697(0x7bd)]();},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x5e9)]=function(){const _0x5b3216=_0x478a06;return[this[_0x5b3216(0xb5b)]()];},Game_Action[_0x478a06(0x9c5)]['getSpecificBattlerKeyTarget']=function(){const _0x2d0a80=_0x478a06,_0x28e9d9=this[_0x2d0a80(0x7d6)]||'',_0x3ab614=BattleManager[_0x2d0a80(0x196)](_0x28e9d9);if(!_0x3ab614)return this[_0x2d0a80(0x230)]();if(!_0x3ab614[_0x2d0a80(0x1f5)]())return this[_0x2d0a80(0x230)]();return _0x3ab614;},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x230)]=function(){const _0x23b934=_0x478a06,_0xb5cb81=this[_0x23b934(0x7d6)];return _0xb5cb81[_0x23b934(0x85a)](/ACTOR/i)?this[_0x23b934(0xac5)]()[_0x23b934(0x5ae)]():this['opponentsUnit']()[_0x23b934(0x5ae)]();},BattleManager[_0x478a06(0x733)]=function(){const _0x2bdd7e=_0x478a06;return this[_0x2bdd7e(0x3df)]()[_0x2bdd7e(0x4d3)](_0x265291=>_0x265291['isSelected']());},BattleManager[_0x478a06(0x357)]=function(_0x55e61f){const _0xadda00=_0x478a06;_0x55e61f===_0xadda00(0x985)&&(this[_0xadda00(0xbcc)]=!![]),$gameParty[_0xadda00(0x357)](_0x55e61f),$gameTroop['processBattleCoreJS'](_0x55e61f);},VisuMZ[_0x478a06(0x1a5)]['BattleManager_startBattle']=BattleManager[_0x478a06(0x7a2)],BattleManager[_0x478a06(0x7a2)]=function(){const _0x3d30f5=_0x478a06;this['_endBattle']=![],this[_0x3d30f5(0x3b4)]=ConfigManager['autoBattleAtStart'],this[_0x3d30f5(0xbcc)]=![],this[_0x3d30f5(0x357)]('PreStartBattleJS'),VisuMZ['BattleCore']['BattleManager_startBattle']['call'](this),this[_0x3d30f5(0x357)](_0x3d30f5(0xb68));},BattleManager[_0x478a06(0xfe)]=function(_0x1dc189){const _0x12787b=_0x478a06,_0x30b932=VisuMZ[_0x12787b(0x1a5)][_0x12787b(0x468)]['Mechanics'];_0x1dc189!==_0x12787b(0x9bb)&&_0x30b932[_0x12787b(0x4e5)]&&VisuMZ[_0x12787b(0x1a5)][_0x12787b(0x958)](_0x30b932[_0x12787b(0x4e5)])&&$gameTemp[_0x12787b(0x1be)](_0x30b932['BattleEndEvent']);const _0x233da3=_0x12787b(0x3f7)[_0x12787b(0x177)](_0x1dc189);_0x30b932[_0x233da3]&&VisuMZ[_0x12787b(0x1a5)]['CheckMapBattleEventValid'](_0x30b932[_0x233da3])&&$gameTemp[_0x12787b(0x1be)](_0x30b932[_0x233da3]);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x9f7)]=BattleManager[_0x478a06(0x9ac)],BattleManager[_0x478a06(0x9ac)]=function(){const _0x4a2051=_0x478a06;VisuMZ['BattleCore'][_0x4a2051(0x9f7)][_0x4a2051(0x21e)](this),SceneManager[_0x4a2051(0x785)]()&&BattleManager['updateEvent']();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xa3f)]=BattleManager['checkBattleEnd'],BattleManager[_0x478a06(0x638)]=function(){const _0x1b522a=_0x478a06;if(this[_0x1b522a(0x2a2)]===_0x1b522a(0x360)){if($gameTemp[_0x1b522a(0x475)]())return![];}return VisuMZ[_0x1b522a(0x1a5)][_0x1b522a(0xa3f)]['call'](this);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x179)]=BattleManager[_0x478a06(0x926)],BattleManager['processVictory']=function(){const _0x3fc760=_0x478a06;this[_0x3fc760(0xbcc)]=!![],this[_0x3fc760(0x357)](_0x3fc760(0x985)),VisuMZ[_0x3fc760(0x1a5)][_0x3fc760(0x179)]['call'](this),this[_0x3fc760(0xfe)](_0x3fc760(0x7b0));},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x36d)]=BattleManager[_0x478a06(0x50d)],BattleManager[_0x478a06(0x50d)]=function(){const _0x556a5a=_0x478a06;this[_0x556a5a(0xbcc)]=!![],VisuMZ['BattleCore'][_0x556a5a(0x36d)][_0x556a5a(0x21e)](this);},VisuMZ['BattleCore']['BattleManager_processDefeat']=BattleManager[_0x478a06(0xa5f)],BattleManager[_0x478a06(0xa5f)]=function(){const _0x46a776=_0x478a06;this[_0x46a776(0xbcc)]=!![],this['processBattleCoreJS'](_0x46a776(0x370)),VisuMZ['BattleCore'][_0x46a776(0x280)][_0x46a776(0x21e)](this),this[_0x46a776(0xfe)](_0x46a776(0xa05));},VisuMZ[_0x478a06(0x1a5)]['BattleManager_endBattle']=BattleManager[_0x478a06(0x344)],BattleManager[_0x478a06(0x344)]=function(_0xf59478){const _0x3ba9d9=_0x478a06;this['_endBattle']=!![],this['_autoBattle']=![],this[_0x3ba9d9(0x357)](_0x3ba9d9(0x4f4)),VisuMZ['BattleCore'][_0x3ba9d9(0xb79)][_0x3ba9d9(0x21e)](this,_0xf59478),this[_0x3ba9d9(0x357)](_0x3ba9d9(0x95f));},VisuMZ[_0x478a06(0x1a5)]['BattleManager_startTurn']=BattleManager[_0x478a06(0xee)],BattleManager[_0x478a06(0xee)]=function(){const _0x80d505=_0x478a06;if(this[_0x80d505(0xbec)]())this[_0x80d505(0x357)](_0x80d505(0x6b7));VisuMZ[_0x80d505(0x1a5)][_0x80d505(0x836)]['call'](this);if(this[_0x80d505(0xbec)]())this['processBattleCoreJS']('PostStartTurnJS');},BattleManager[_0x478a06(0x446)]=function(){const _0x505183=_0x478a06,_0x54a276=this[_0x505183(0x6f3)],_0x2dd778=_0x54a276[_0x505183(0x767)]();_0x2dd778?(_0x2dd778[_0x505183(0x1df)](),_0x2dd778['isValid']()?(this[_0x505183(0x256)](),_0x54a276[_0x505183(0xa57)]()):(_0x54a276[_0x505183(0xa57)](),this['endAction']())):(this[_0x505183(0x793)](),this[_0x505183(0x6f3)]=null);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x3c6)]=BattleManager[_0x478a06(0x256)],BattleManager[_0x478a06(0x256)]=function(){const _0x40f6b6=_0x478a06,_0x4e7d00=this[_0x40f6b6(0x6f3)][_0x40f6b6(0x767)](),_0x256608=this[_0x40f6b6(0x6f3)];_0x4e7d00&&_0x4e7d00[_0x40f6b6(0x4fe)]()===_0x256608&&_0x4e7d00[_0x40f6b6(0x60d)](_0x40f6b6(0x557)),VisuMZ[_0x40f6b6(0x1a5)][_0x40f6b6(0x3c6)]['call'](this),_0x4e7d00&&_0x4e7d00['subject']()===_0x256608&&_0x4e7d00[_0x40f6b6(0x60d)]('PostStartActionJS');},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x9ec)]=BattleManager[_0x478a06(0x793)],BattleManager[_0x478a06(0x793)]=function(){const _0x1fcab9=_0x478a06,_0x8cfef6=this[_0x1fcab9(0x686)],_0x11bed1=this[_0x1fcab9(0x6f3)];_0x8cfef6&&_0x8cfef6!==this['_lastAction']&&_0x8cfef6['subject']()===_0x11bed1&&_0x8cfef6[_0x1fcab9(0x60d)]('PreEndActionJS'),this[_0x1fcab9(0x6f3)]?VisuMZ[_0x1fcab9(0x1a5)][_0x1fcab9(0x9ec)][_0x1fcab9(0x21e)](this):this[_0x1fcab9(0x2a2)]=_0x1fcab9(0x360),_0x8cfef6&&_0x8cfef6!==this[_0x1fcab9(0x34e)]&&_0x8cfef6['subject']()===_0x11bed1&&_0x8cfef6[_0x1fcab9(0x60d)](_0x1fcab9(0x138)),this['refreshBattlerMotions'](this[_0x1fcab9(0x3df)]()),this['_lastAction']=this[_0x1fcab9(0x686)];},BattleManager['refreshBattlerMotions']=function(_0x2dc961){const _0x40fd64=_0x478a06;for(const _0x311fec of _0x2dc961){if(!_0x311fec)continue;if(!_0x311fec[_0x40fd64(0x244)]())continue;_0x311fec[_0x40fd64(0x244)]()[_0x40fd64(0xaff)]();}},BattleManager[_0x478a06(0x702)]=function(){const _0xdb4c5e=_0x478a06;!this[_0xdb4c5e(0xae5)][_0xdb4c5e(0x46f)]()&&this[_0xdb4c5e(0x793)]();},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x136)]=function(){const _0xf80d61=_0x478a06;this[_0xf80d61(0xf3)]();if(Imported[_0xf80d61(0x7a6)]){const _0x537bbb=VisuMZ['SkillsStatesCore'][_0xf80d61(0x468)]['States'];_0x537bbb&&_0x537bbb[_0xf80d61(0x9f3)]===![]&&this[_0xf80d61(0x467)](0x1);}else this[_0xf80d61(0x467)](0x1);this['removeBuffsAuto']();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x76a)]=BattleManager[_0x478a06(0x5a6)],BattleManager[_0x478a06(0x5a6)]=function(_0x4742ad,_0x5debd0){const _0x2cda1c=_0x478a06;this[_0x2cda1c(0x271)]=!![],VisuMZ['BattleCore'][_0x2cda1c(0x76a)][_0x2cda1c(0x21e)](this,_0x4742ad,_0x5debd0),this['_bypassCanCounterCheck']=undefined;},BattleManager['makeEscapeRatio']=function(){const _0x1c5e71=_0x478a06;this[_0x1c5e71(0x4a1)]=VisuMZ['BattleCore']['Settings'][_0x1c5e71(0xae0)][_0x1c5e71(0x2d2)][_0x1c5e71(0x21e)](this);},VisuMZ['BattleCore'][_0x478a06(0x90d)]=BattleManager[_0x478a06(0x167)],BattleManager[_0x478a06(0x167)]=function(){const _0x2fbb11=_0x478a06;this[_0x2fbb11(0x357)](_0x2fbb11(0x56f)),BattleManager[_0x2fbb11(0x526)][_0x2fbb11(0x898)](),VisuMZ[_0x2fbb11(0x1a5)]['BattleManager_onEscapeSuccess'][_0x2fbb11(0x21e)](this),this['processPostBattleCommonEvents'](_0x2fbb11(0x401));},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x74e)]=BattleManager[_0x478a06(0x17f)],BattleManager[_0x478a06(0x17f)]=function(){const _0x233623=_0x478a06;this[_0x233623(0x357)](_0x233623(0x201));const _0x4c7916=this[_0x233623(0x4a1)];VisuMZ['BattleCore'][_0x233623(0x74e)]['call'](this),this['_escapeRatio']=_0x4c7916+VisuMZ[_0x233623(0x1a5)][_0x233623(0x468)]['Mechanics'][_0x233623(0x409)][_0x233623(0x21e)](this),this[_0x233623(0xaf4)]=![],this[_0x233623(0xfe)](_0x233623(0x9bb));},BattleManager['displayStartMessages']=function(){const _0x440155=_0x478a06;let _0x276738=![];if(this[_0x440155(0x71e)]())for(const _0x1d8d7a of $gameTroop[_0x440155(0x59d)]()){this['_logWindow'][_0x440155(0x6b3)](_0x440155(0x6d1),TextManager[_0x440155(0x7c3)]['format'](_0x1d8d7a)),this[_0x440155(0xae5)][_0x440155(0x6b3)](_0x440155(0xe3)),_0x276738=!![];}if(this['_preemptive'])this[_0x440155(0xae5)]['push'](_0x440155(0x6d1),TextManager[_0x440155(0x8dc)][_0x440155(0x177)]($gameParty[_0x440155(0x8ff)]())),this[_0x440155(0xae5)][_0x440155(0x6b3)](_0x440155(0xe3));else this['_surprise']&&(this[_0x440155(0xae5)]['push'](_0x440155(0x6d1),TextManager[_0x440155(0x5d9)][_0x440155(0x177)]($gameParty[_0x440155(0x8ff)]())),this[_0x440155(0xae5)]['push'](_0x440155(0xe3)));_0x276738&&(this[_0x440155(0xae5)][_0x440155(0x6b3)](_0x440155(0xe3)),this['_logWindow'][_0x440155(0x6b3)](_0x440155(0x87d))),this[_0x440155(0xb72)]()&&this['isSkipPartyCommandWindow']()&&(this[_0x440155(0xbbf)]=![]);},BattleManager[_0x478a06(0x71e)]=function(){const _0x2f346e=_0x478a06;if(BattleManager['_autoBattle'])return![];return VisuMZ[_0x2f346e(0x1a5)][_0x2f346e(0x468)][_0x2f346e(0x9b6)][_0x2f346e(0x7b7)];},VisuMZ['BattleCore'][_0x478a06(0xb87)]=BattleManager[_0x478a06(0x11f)],BattleManager[_0x478a06(0x11f)]=function(){const _0x1f6b5f=_0x478a06;VisuMZ[_0x1f6b5f(0x1a5)][_0x1f6b5f(0xb87)]['call'](this),this[_0x1f6b5f(0xa80)]()&&this[_0x1f6b5f(0x283)]()&&!this[_0x1f6b5f(0x407)]&&$gameParty['canInput']()&&this[_0x1f6b5f(0xbf5)]();},BattleManager[_0x478a06(0x283)]=function(){const _0x351fa2=_0x478a06;return VisuMZ[_0x351fa2(0x1a5)][_0x351fa2(0x468)][_0x351fa2(0xae9)][_0x351fa2(0x3dd)];},BattleManager['checkTpbInputOpen']=function(){const _0x292570=_0x478a06;this[_0x292570(0x585)]()&&this[_0x292570(0xbf5)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xbea)]=Scene_Battle[_0x478a06(0x9c5)]['startActorCommandSelection'],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x7b1)]=function(){const _0x5f37ba=_0x478a06;VisuMZ['BattleCore'][_0x5f37ba(0xbea)]['call'](this),BattleManager['isTpb']()&&BattleManager[_0x5f37ba(0xbbf)]&&(BattleManager[_0x5f37ba(0xbbf)]=![],this[_0x5f37ba(0x498)]());},BattleManager[_0x478a06(0x844)]=function(_0x2c0dea,_0x3dcc54,_0x32ed8f){const _0x32aa1a=_0x478a06;if(!_0x32ed8f)return;if(!_0x2c0dea)return;if(!_0x3dcc54)return;const _0x218a44=this[_0x32aa1a(0x686)];this[_0x32aa1a(0x686)]=new Game_Action(_0x2c0dea);if(DataManager[_0x32aa1a(0x126)](_0x32ed8f))this[_0x32aa1a(0x686)][_0x32aa1a(0x4ff)](_0x32ed8f['id']);if(DataManager[_0x32aa1a(0xbbd)](_0x32ed8f))this[_0x32aa1a(0x686)][_0x32aa1a(0x460)](_0x32ed8f['id']);if(this[_0x32aa1a(0x686)][_0x32aa1a(0x8dd)]())BattleManager['invokeAction'](_0x2c0dea,_0x3dcc54);this['_action']=_0x218a44;},BattleManager[_0x478a06(0x395)]=function(_0x50e24a,_0x29a1f9){const _0x1c42d7=_0x478a06;this[_0x1c42d7(0x686)][_0x1c42d7(0xba3)]=_0x29a1f9,this[_0x1c42d7(0xae5)]['displayReflection'](_0x29a1f9),this[_0x1c42d7(0xae5)][_0x1c42d7(0x84a)](_0x50e24a,this[_0x1c42d7(0x686)]),this[_0x1c42d7(0x686)][_0x1c42d7(0x3c7)](_0x50e24a),this[_0x1c42d7(0xae5)][_0x1c42d7(0x816)](_0x50e24a,_0x50e24a);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x8a7)]=BattleManager['makeActionOrders'],BattleManager[_0x478a06(0x568)]=function(){const _0x5bfe1a=_0x478a06;VisuMZ['BattleCore'][_0x5bfe1a(0x8a7)]['call'](this),this[_0x5bfe1a(0xa12)]=this[_0x5bfe1a(0xa12)][_0x5bfe1a(0x4d3)](_0x2d615f=>_0x2d615f&&_0x2d615f[_0x5bfe1a(0x9c8)]());},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x3d3)]=BattleManager[_0x478a06(0x44c)],BattleManager[_0x478a06(0x44c)]=function(_0x508c92){const _0x2ce035=_0x478a06;if(this[_0x2ce035(0x2a2)]===_0x2ce035(0xbb3))this[_0x2ce035(0x8fb)]();else this['_phase']===_0x2ce035(0xbf1)?this[_0x2ce035(0xaa7)]():VisuMZ[_0x2ce035(0x1a5)]['BattleManager_updatePhase'][_0x2ce035(0x21e)](this,_0x508c92);},BattleManager[_0x478a06(0x529)]=function(){const _0x568349=_0x478a06;this[_0x568349(0x807)]=this[_0x568349(0x796)]['slice'](0x0),this['_targetIndex']=0x0,this[_0x568349(0x39a)]=this[_0x568349(0x807)][0x0]||null,this[_0x568349(0x2a2)]=_0x568349(0xbb3);},BattleManager[_0x478a06(0x8fb)]=function(){const _0x729c84=_0x478a06;!this[_0x729c84(0x43a)]()&&!this['_logWindow'][_0x729c84(0x46f)]()&&(this[_0x729c84(0x2a2)]=_0x729c84(0x41c));},BattleManager['forceAction']=function(_0x379e04){const _0x39741f=_0x478a06;this['_actionBattlers'][_0x39741f(0x553)](_0x379e04);if(_0x379e04===this[_0x39741f(0x6f3)])return;const _0x21b639=JsonEx[_0x39741f(0xb51)](_0x379e04['currentAction']());this[_0x39741f(0x22f)][_0x39741f(0x6b3)]([_0x379e04,_0x21b639]);},BattleManager[_0x478a06(0x31f)]=function(){},BattleManager[_0x478a06(0x200)]=function(){const _0x36e2b=_0x478a06;if(this['isTpb']())this[_0x36e2b(0x2a2)]=_0x36e2b(0x360);else this[_0x36e2b(0x22f)][_0x36e2b(0x496)]>0x0?this[_0x36e2b(0x2a2)]=_0x36e2b(0x360):this['startInput']();},BattleManager[_0x478a06(0xa67)]=function(){const _0x57ecdd=_0x478a06,_0x5f428d=this[_0x57ecdd(0x6f3)];_0x5f428d&&this[_0x57ecdd(0xb72)]()&&_0x5f428d[_0x57ecdd(0x576)](_0x57ecdd(0x4d1));for(;;){const _0x3e2abb=this[_0x57ecdd(0x53e)]();if(!_0x3e2abb)return null;if(_0x3e2abb[_0x57ecdd(0x5f4)]()&&_0x3e2abb[_0x57ecdd(0x1f5)]())return _0x3e2abb;}},BattleManager[_0x478a06(0x53e)]=function(){const _0x2e2190=_0x478a06;if(this[_0x2e2190(0x22f)][_0x2e2190(0x496)]>0x0){const _0x561c9a=this[_0x2e2190(0x22f)][_0x2e2190(0x6b1)](),_0x5b0016=_0x561c9a[0x0];return _0x5b0016[_0x2e2190(0xa66)]=_0x5b0016['_actions']||[],_0x5b0016[_0x2e2190(0xa66)][0x0]=_0x561c9a[0x1],_0x5b0016;}else return this[_0x2e2190(0xa12)]['shift']();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x908)]=Game_Battler[_0x478a06(0x9c5)][_0x478a06(0xbf1)],Game_Battler[_0x478a06(0x9c5)][_0x478a06(0xbf1)]=function(_0x331522,_0x4a31e8){const _0x11e0f9=_0x478a06;VisuMZ[_0x11e0f9(0x1a5)]['Game_Battler_forceAction'][_0x11e0f9(0x21e)](this,_0x331522,_0x4a31e8),this[_0x11e0f9(0xa66)][this['_actions'][_0x11e0f9(0x496)]-0x1][_0x11e0f9(0x252)]=!![];},Game_Interpreter[_0x478a06(0x9c5)][_0x478a06(0x5cd)]=function(_0xc5588){const _0x76e9b0=_0x478a06;return this[_0x76e9b0(0xb50)](_0xc5588[0x0],_0xc5588[0x1],_0xd49ad1=>{const _0x39a024=_0x76e9b0;!_0xd49ad1[_0x39a024(0x4db)]()&&(_0xd49ad1[_0x39a024(0xbf1)](_0xc5588[0x2],_0xc5588[0x3]),BattleManager['forceAction'](_0xd49ad1));}),!![];},VisuMZ[_0x478a06(0x1a5)]['Game_Battler_makeSpeed']=Game_Battler['prototype'][_0x478a06(0x545)],Game_Battler[_0x478a06(0x9c5)]['makeSpeed']=function(){const _0x18e312=_0x478a06;VisuMZ['BattleCore'][_0x18e312(0x2c9)][_0x18e312(0x21e)](this),this[_0x18e312(0xa66)]['length']<=0x0&&(this[_0x18e312(0x74b)]=Number[_0x18e312(0x93d)]);},BattleManager['shouldHideBattleEndPopups']=function(){const _0x158551=_0x478a06;if(VisuMZ['BattleCore'][_0x158551(0x468)][_0x158551(0x7fa)][_0x158551(0x879)]??!![])return![];return SceneManager['isSceneBattle']()&&this['_endingBattle'];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x268)]=BattleManager['selectNextCommand'],BattleManager['selectNextCommand']=function(){const _0x2b0408=_0x478a06;this['isTpb']()?this[_0x2b0408(0xa28)]():VisuMZ[_0x2b0408(0x1a5)][_0x2b0408(0x268)]['call'](this);},BattleManager['selectNextCommandTpb']=function(){const _0x34ab00=_0x478a06;if(this[_0x34ab00(0xd5)]){if(this[_0x34ab00(0xd5)][_0x34ab00(0xbf5)]())return;this[_0x34ab00(0x764)](),this[_0x34ab00(0x349)](),!this[_0x34ab00(0x6f3)]&&!this[_0x34ab00(0xd5)]&&SceneManager[_0x34ab00(0x143)][_0x34ab00(0x58b)]();}else!this[_0x34ab00(0x6f3)]&&this['selectNextActor']();},BattleManager[_0x478a06(0x349)]=function(){const _0x5c97e4=_0x478a06;(!this[_0x5c97e4(0x585)]()||this[_0x5c97e4(0x607)]())&&(this[_0x5c97e4(0xa07)]&&(!$gameParty[_0x5c97e4(0x6dd)]()['includes'](this[_0x5c97e4(0xa07)])&&(this[_0x5c97e4(0xa07)]=null)),!this[_0x5c97e4(0xa07)]?(this[_0x5c97e4(0x18b)](),this[_0x5c97e4(0xd5)]=null,this[_0x5c97e4(0xaf4)]=![]):this[_0x5c97e4(0x96e)]());},BattleManager[_0x478a06(0x96e)]=function(){const _0x599357=_0x478a06;!$gameParty[_0x599357(0x6dd)]()[_0x599357(0x982)](this[_0x599357(0xa07)])&&(this['_tpbSceneChangeCacheActor']=null),this[_0x599357(0xa07)]?(this[_0x599357(0xd5)]=this[_0x599357(0xa07)],this[_0x599357(0xd5)][_0x599357(0x874)]=_0x599357(0x861),this['_inputting']=!![],this[_0x599357(0xa07)]=null):(this[_0x599357(0x18b)](),this['_currentActor']=null,this[_0x599357(0xaf4)]=![]);},VisuMZ['BattleCore']['BattleManager_isTpbMainPhase']=BattleManager[_0x478a06(0xdd)],BattleManager[_0x478a06(0xdd)]=function(){const _0x17ee45=_0x478a06;return this[_0x17ee45(0x2a2)]==='custom'?this[_0x17ee45(0x74c)]():VisuMZ[_0x17ee45(0x1a5)][_0x17ee45(0x578)][_0x17ee45(0x21e)](this);},BattleManager[_0x478a06(0x74c)]=function(){const _0x3fd004=_0x478a06;return this[_0x3fd004(0xbb1)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x7bf)]=BattleManager['cancelActorInput'],BattleManager[_0x478a06(0x18b)]=function(){const _0xaeeabf=_0x478a06;this[_0xaeeabf(0xb72)]()&&this[_0xaeeabf(0x2a2)]===_0xaeeabf(0x3d8)&&(this[_0xaeeabf(0xd5)]=null),VisuMZ[_0xaeeabf(0x1a5)]['BattleManager_cancelActorInput']['call'](this);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x8f4)]=BattleManager[_0x478a06(0x11a)],BattleManager[_0x478a06(0x11a)]=function(){const _0x22ce7c=_0x478a06,_0x224885=this['_currentActor'];if(_0x224885&&!_0x224885[_0x22ce7c(0x11a)]()){const _0x6d4b2c=_0x224885[_0x22ce7c(0x3c9)];_0x224885[_0x22ce7c(0xa66)][_0x6d4b2c]=new Game_Action(_0x224885);}return VisuMZ[_0x22ce7c(0x1a5)][_0x22ce7c(0x8f4)][_0x22ce7c(0x21e)](this);},VisuMZ['BattleCore'][_0x478a06(0x929)]=BattleManager[_0x478a06(0xa21)],BattleManager[_0x478a06(0xa21)]=function(_0x45333a){const _0x32cb15=_0x478a06;if(this['_action'][_0x32cb15(0x3eb)]())return![];return VisuMZ['BattleCore'][_0x32cb15(0x929)][_0x32cb15(0x21e)](this,_0x45333a);},SceneManager[_0x478a06(0x785)]=function(){const _0xaed68=_0x478a06;return this[_0xaed68(0x143)]&&this[_0xaed68(0x143)]['constructor']===Scene_Battle;},SceneManager[_0x478a06(0x746)]=function(){const _0xb98ceb=_0x478a06;return Spriteset_Battle[_0xb98ceb(0x9c5)][_0xb98ceb(0x45a)]();},SceneManager['isPreviousSceneBattleTransitionable']=function(){if(SceneManager['isPreviousScene'](Scene_Options))return!![];return![];},SceneManager[_0x478a06(0xa04)]=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},SceneManager[_0x478a06(0x624)]=function(_0x2405a5){const _0x129a37=_0x478a06;if(!SceneManager[_0x129a37(0x785)]())return!![];const _0xe1a4a1=['Scene_Options',_0x129a37(0x63f),_0x129a37(0x4f9)];return _0xe1a4a1[_0x129a37(0x982)](_0x2405a5[_0x129a37(0x8ff)]);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x8f9)]=SceneManager['push'],SceneManager[_0x478a06(0x6b3)]=function(_0x58cc6c){const _0x2b4e73=_0x478a06;if(!SceneManager[_0x2b4e73(0x624)](_0x58cc6c))return this[_0x2b4e73(0x62c)](_0x58cc6c);VisuMZ['BattleCore'][_0x2b4e73(0x8f9)]['call'](this,_0x58cc6c);},SceneManager[_0x478a06(0x62c)]=function(_0x3e485d){const _0x2501b3=_0x478a06;if(!$gameTemp[_0x2501b3(0x42a)]())return;if(this[_0x2501b3(0x76b)])return;this[_0x2501b3(0x76b)]=!![];let _0x10be46='';_0x10be46+=_0x2501b3(0x646),_0x10be46+='\x20to\x20%1\x20midbattle.'[_0x2501b3(0x177)](_0x3e485d['name']),alert(_0x10be46);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x622)]=Game_Temp[_0x478a06(0x9c5)][_0x478a06(0x552)],Game_Temp[_0x478a06(0x9c5)][_0x478a06(0x552)]=function(){const _0x106866=_0x478a06;VisuMZ[_0x106866(0x1a5)][_0x106866(0x622)][_0x106866(0x21e)](this),this[_0x106866(0x7a3)]=[];},VisuMZ['BattleCore'][_0x478a06(0x9ba)]=Game_Temp[_0x478a06(0x9c5)][_0x478a06(0x251)],Game_Temp[_0x478a06(0x9c5)][_0x478a06(0x251)]=function(_0x293452,_0x315145,_0x4ea5b6){const _0x545141=_0x478a06;_0x293452=_0x293452[_0x545141(0x4d3)]((_0x14159a,_0x44d224,_0x58dae3)=>_0x58dae3[_0x545141(0x960)](_0x14159a)===_0x44d224);SceneManager[_0x545141(0x785)]()&&SceneManager[_0x545141(0x746)]()&&(_0x4ea5b6=!_0x4ea5b6);VisuMZ[_0x545141(0x1a5)][_0x545141(0x9ba)][_0x545141(0x21e)](this,_0x293452,_0x315145,_0x4ea5b6);SceneManager['isSceneBattle']()&&BattleManager[_0x545141(0x526)][_0x545141(0x9b8)]();for(const _0x2fbb30 of _0x293452){_0x2fbb30&&_0x2fbb30['isEnemy']&&_0x2fbb30[_0x545141(0x8e3)]()&&_0x2fbb30['resetNameTempVisibility']();}},Game_Temp[_0x478a06(0x9c5)][_0x478a06(0x2cb)]=function(_0xb6854c){const _0x47042f=_0x478a06;this[_0x47042f(0xa5c)]=_0xb6854c;},Game_Temp[_0x478a06(0x9c5)][_0x478a06(0xa99)]=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp['prototype']['clearForcedGameTroopSettingsBattleCore']=function(){this['_forcedBattleLayout']=undefined;},Game_Temp[_0x478a06(0x9c5)][_0x478a06(0x3c2)]=function(_0x5521df){const _0x249dfc=_0x478a06;$gameMap&&$dataMap&&$dataMap[_0x249dfc(0x39c)]&&this[_0x249dfc(0xb18)]($dataMap[_0x249dfc(0x39c)]);const _0x2dc675=$dataTroops[_0x5521df];if(_0x2dc675){let _0x15b444=DataManager[_0x249dfc(0x6d4)](_0x2dc675['id']);this['parseForcedGameTroopSettingsBattleCore'](_0x15b444);}},Game_Temp[_0x478a06(0x9c5)][_0x478a06(0xb18)]=function(_0x3c182a){const _0x2cbbf1=_0x478a06;if(!_0x3c182a)return;if(_0x3c182a['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x4c56d9=String(RegExp['$1']);if(_0x4c56d9[_0x2cbbf1(0x85a)](/DEFAULT/i))this[_0x2cbbf1(0x620)]=_0x2cbbf1(0x8e6);else{if(_0x4c56d9[_0x2cbbf1(0x85a)](/LIST/i))this[_0x2cbbf1(0x620)]=_0x2cbbf1(0x841);else{if(_0x4c56d9[_0x2cbbf1(0x85a)](/XP/i))this['_forcedBattleLayout']='xp';else{if(_0x4c56d9[_0x2cbbf1(0x85a)](/PORTRAIT/i))this[_0x2cbbf1(0x620)]=_0x2cbbf1(0x596);else{if(_0x4c56d9['match'](/BORDER/i))this[_0x2cbbf1(0x620)]=_0x2cbbf1(0x444);else{if(_0x4c56d9[_0x2cbbf1(0x85a)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported[_0x2cbbf1(0x9f1)]?this[_0x2cbbf1(0x620)]=_0x2cbbf1(0x7cb):this[_0x2cbbf1(0x620)]=_0x2cbbf1(0x8e6);else _0x4c56d9[_0x2cbbf1(0x85a)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x2cbbf1(0x89b)]?this[_0x2cbbf1(0x620)]=_0x2cbbf1(0x46a):this[_0x2cbbf1(0x620)]=_0x2cbbf1(0x8e6));}}}}}}},VisuMZ[_0x478a06(0x1a5)]['Game_Temp_requestBalloon']=Game_Temp[_0x478a06(0x9c5)][_0x478a06(0xa10)],Game_Temp[_0x478a06(0x9c5)][_0x478a06(0xa10)]=function(_0x42a456,_0x4c8ef6){const _0x35dd6d=_0x478a06;SceneManager[_0x35dd6d(0x785)]()?this['requestBattleBalloon'](_0x42a456,_0x4c8ef6):VisuMZ[_0x35dd6d(0x1a5)]['Game_Temp_requestBalloon']['call'](this,_0x42a456,_0x4c8ef6);},Game_Temp['prototype'][_0x478a06(0x40c)]=function(_0x4f8474,_0x2fe7e8){const _0x55fdf2=_0x478a06,_0x2d0f2b={'target':_0x4f8474,'balloonId':_0x2fe7e8};this['_battleBalloonQueue']=this[_0x55fdf2(0x7a3)]||[],this[_0x55fdf2(0x7a3)][_0x55fdf2(0x6b3)](_0x2d0f2b);},Game_Temp[_0x478a06(0x9c5)]['retrieveBattleBalloon']=function(){const _0x14473d=_0x478a06;return this['_battleBalloonQueue']=this['_battleBalloonQueue']||[],this[_0x14473d(0x7a3)]['shift']();},Game_Temp[_0x478a06(0x9c5)][_0x478a06(0x5f7)]=function(){const _0x1f7cce=_0x478a06;this[_0x1f7cce(0x7a3)]=[];},Spriteset_Battle['prototype']['updateBattleBalloons']=function(){const _0x67c0f9=_0x478a06;this['_battleBalloonSprites']===undefined&&(this[_0x67c0f9(0x8b3)]=[]);for(const _0xd4417f of this[_0x67c0f9(0x8b3)]){!_0xd4417f['isPlaying']()&&this[_0x67c0f9(0xb9c)](_0xd4417f);}this['processBattleBalloonRequests']();},Spriteset_Battle[_0x478a06(0x9c5)]['processBattleBalloonRequests']=function(){const _0x10a2c8=_0x478a06;for(;;){const _0x18d9ed=$gameTemp[_0x10a2c8(0x17d)]();if(_0x18d9ed)this[_0x10a2c8(0x521)](_0x18d9ed);else break;}},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x521)]=function(_0x100b85){const _0x2aa2b0=_0x478a06,_0x4663e8=this[_0x2aa2b0(0xbc9)](_0x100b85[_0x2aa2b0(0xa3e)]);if(_0x4663e8){let _0x2b824e=null;Imported[_0x2aa2b0(0x1fc)]&&Array[_0x2aa2b0(0x7e9)](_0x100b85[_0x2aa2b0(0xcd)])?_0x2b824e=new Sprite_IconBalloon():_0x2b824e=new Sprite_Balloon(),_0x2b824e[_0x2aa2b0(0x648)]=_0x100b85[_0x2aa2b0(0xa3e)],_0x2b824e[_0x2aa2b0(0x39a)]=_0x4663e8,_0x2b824e[_0x2aa2b0(0x39a)][_0x2aa2b0(0x76e)]=_0x4663e8,_0x2b824e[_0x2aa2b0(0x40f)](_0x4663e8,_0x100b85[_0x2aa2b0(0xcd)]),BattleManager['addChildToUiContainer'](_0x2b824e),this[_0x2aa2b0(0x8b3)][_0x2aa2b0(0x6b3)](_0x2b824e);}},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0xb9c)]=function(_0x433e51){const _0x29f338=_0x478a06;this[_0x29f338(0x8b3)][_0x29f338(0x553)](_0x433e51),BattleManager[_0x29f338(0xbb9)](_0x433e51),_0x433e51['destroy']();},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x8d8)]=function(_0x3b80ba,_0x3e0397){},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x100)]=function(){return![];},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x830)]=function(){const _0x517a44=_0x478a06;return this['_battleBalloonSprites']=this[_0x517a44(0x8b3)]||[],this[_0x517a44(0x8b3)][_0x517a44(0x496)]>0x0;},VisuMZ[_0x478a06(0x1a5)]['Game_System_initialize']=Game_System[_0x478a06(0x9c5)]['initialize'],Game_System[_0x478a06(0x9c5)][_0x478a06(0x552)]=function(){const _0xb49c4f=_0x478a06;VisuMZ[_0xb49c4f(0x1a5)][_0xb49c4f(0x64c)][_0xb49c4f(0x21e)](this),this[_0xb49c4f(0x1d7)]();},Game_System[_0x478a06(0x9c5)][_0x478a06(0x1d7)]=function(){const _0x2f2532=_0x478a06;this[_0x2f2532(0x2d7)]=this[_0x2f2532(0x2d7)]||[];},Game_System[_0x478a06(0x9c5)][_0x478a06(0x55c)]=function(){const _0x28c8e8=_0x478a06;if(this[_0x28c8e8(0x2d7)]===undefined)this[_0x28c8e8(0x1d7)]();return this[_0x28c8e8(0x2d7)];},Game_System['prototype'][_0x478a06(0xba0)]=function(_0x3b3573){const _0x234362=_0x478a06;if(this[_0x234362(0x2d7)]===undefined)this[_0x234362(0x1d7)]();if(!_0x3b3573)return;if(this[_0x234362(0x2d7)][_0x234362(0x982)](_0x3b3573))return;this['_defeatedEnemies']['push'](_0x3b3573),this[_0x234362(0x2d7)][_0x234362(0x351)]((_0x3ad338,_0x4aac3a)=>_0x3ad338-_0x4aac3a);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xa91)]=Game_BattlerBase[_0x478a06(0x9c5)]['addNewState'],Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x58a)]=function(_0x37111f){const _0x49cf9c=_0x478a06,_0x5604da=this['isAlive'](),_0x3972c3=this[_0x49cf9c(0x3b8)]();VisuMZ[_0x49cf9c(0x1a5)][_0x49cf9c(0xa91)][_0x49cf9c(0x21e)](this,_0x37111f),this[_0x49cf9c(0x8e3)]()&&_0x5604da&&this[_0x49cf9c(0x9c0)]()&&(this[_0x49cf9c(0x1e1)]=!this[_0x49cf9c(0x5a0)](),$gameSystem[_0x49cf9c(0xba0)](this[_0x49cf9c(0xbd1)]())),SceneManager['isSceneBattle']()&&_0x3972c3!==this[_0x49cf9c(0x3b8)]()&&(this[_0x49cf9c(0x244)]()&&this[_0x49cf9c(0x244)]()[_0x49cf9c(0xaff)]());},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x5a0)]=function(){const _0x1e9fa0=_0x478a06;return $gameSystem[_0x1e9fa0(0x55c)]()['includes'](this['_enemyId']);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x222)]=Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x507)],Game_BattlerBase[_0x478a06(0x9c5)]['eraseState']=function(_0x1514d9){const _0x2e5de2=_0x478a06,_0x4d6ae8=this[_0x2e5de2(0x692)]['includes'](_0x1514d9);VisuMZ['BattleCore'][_0x2e5de2(0x222)][_0x2e5de2(0x21e)](this,_0x1514d9),this[_0x2e5de2(0x8e3)]()&&_0x1514d9===this[_0x2e5de2(0x495)]()&&this[_0x2e5de2(0x1f5)]()&&(this[_0x2e5de2(0x1e1)]=![]),!this['_tempActor']&&!this[_0x2e5de2(0x94e)]&&SceneManager[_0x2e5de2(0x785)]()&&(_0x4d6ae8&&!this[_0x2e5de2(0x692)][_0x2e5de2(0x982)](_0x1514d9)&&this['requestMotionRefresh']());},VisuMZ[_0x478a06(0x1a5)]['Game_Action_clear']=Game_Action['prototype']['clear'],Game_Action[_0x478a06(0x9c5)]['clear']=function(){const _0x1b3b71=_0x478a06;VisuMZ['BattleCore'][_0x1b3b71(0x3ea)][_0x1b3b71(0x21e)](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this['_multipliers']={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x1b3b71(0x675)]='default',this[_0x1b3b71(0xa0a)]();},Game_Action[_0x478a06(0x9c5)][_0x478a06(0xa0a)]=function(){const _0x37be64=_0x478a06;this[_0x37be64(0x7d6)]='';},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x2ff)]=Game_Action[_0x478a06(0x9c5)][_0x478a06(0x192)],Game_Action[_0x478a06(0x9c5)][_0x478a06(0x192)]=function(_0x3a66cb){const _0x9a46b6=_0x478a06;VisuMZ[_0x9a46b6(0x1a5)][_0x9a46b6(0x2ff)][_0x9a46b6(0x21e)](this,_0x3a66cb),this[_0x9a46b6(0xa0a)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x5a7)]=Game_Action[_0x478a06(0x9c5)][_0x478a06(0x460)],Game_Action[_0x478a06(0x9c5)][_0x478a06(0x460)]=function(_0x5efa46){const _0x50e2a4=_0x478a06;VisuMZ[_0x50e2a4(0x1a5)][_0x50e2a4(0x5a7)]['call'](this,_0x5efa46),this[_0x50e2a4(0xa0a)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x5fe)]=Game_Action[_0x478a06(0x9c5)][_0x478a06(0x4ff)],Game_Action[_0x478a06(0x9c5)][_0x478a06(0x4ff)]=function(_0x344982){const _0x377872=_0x478a06;VisuMZ[_0x377872(0x1a5)][_0x377872(0x5fe)][_0x377872(0x21e)](this,_0x344982),this[_0x377872(0xa0a)]();},Game_Action[_0x478a06(0x9c5)][_0x478a06(0xb6c)]=function(_0x4d8e8a,_0x3ef718){const _0x2fbde7=_0x478a06;return VisuMZ['BattleCore'][_0x2fbde7(0x468)]['Damage']['OverallFormulaJS'][_0x2fbde7(0x21e)](this,_0x4d8e8a,_0x3ef718);},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x436)]=function(_0x62e774,_0x1d9e12){const _0x39b691=_0x478a06;return VisuMZ['BattleCore']['Settings'][_0x39b691(0x7fa)][_0x39b691(0x2a5)][_0x39b691(0x21e)](this,_0x62e774,_0x1d9e12);},Game_Action[_0x478a06(0x9c5)]['applyGuard']=function(_0x2f6074,_0x584033){const _0x31c38b=_0x478a06;return VisuMZ['BattleCore'][_0x31c38b(0x468)][_0x31c38b(0x7fa)]['GuardFormulaJS'][_0x31c38b(0x21e)](this,_0x2f6074,_0x584033);},VisuMZ[_0x478a06(0x1a5)]['Game_Action_itemHit']=Game_Action[_0x478a06(0x9c5)][_0x478a06(0x11b)],Game_Action[_0x478a06(0x9c5)][_0x478a06(0x11b)]=function(_0x1fe066){const _0x472f57=_0x478a06,_0x536908=this[_0x472f57(0x8dd)]()[_0x472f57(0x39c)];if(_0x536908[_0x472f57(0x85a)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x536908[_0x472f57(0x85a)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x4e557d=VisuMZ[_0x472f57(0x1a5)][_0x472f57(0x324)][_0x472f57(0x21e)](this,_0x1fe066);return _0x4e557d=this[_0x472f57(0x4fd)][_0x472f57(0x68e)]*_0x4e557d+this['_multipliers'][_0x472f57(0x804)],$gameParty[_0x472f57(0xa8e)]()&&(_0x4e557d=this['applyBattleCoreHitRateJS'](_0x4e557d,_0x1fe066)),_0x4e557d;}}},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x42c)]=Game_Action[_0x478a06(0x9c5)][_0x478a06(0x40d)],Game_Action[_0x478a06(0x9c5)][_0x478a06(0x40d)]=function(_0x42ef3f){const _0x80db4c=_0x478a06;this[_0x80db4c(0x1ce)]=!![],VisuMZ[_0x80db4c(0x1a5)][_0x80db4c(0x42c)][_0x80db4c(0x21e)](this,_0x42ef3f),this[_0x80db4c(0x1ce)]=undefined;},Game_Action['prototype']['declareGlobalVariables']=function(_0x61b345){const _0xecefb8=_0x478a06;window[_0xecefb8(0x41c)]=this,window['a']=this[_0xecefb8(0x4fe)](),window['b']=_0x61b345,window[_0xecefb8(0x8be)]=this[_0xecefb8(0x4fe)](),window[_0xecefb8(0xa3e)]=_0x61b345,window['obj']=this[_0xecefb8(0x8dd)](),window['skill']=this[_0xecefb8(0x8dd)](),window[_0xecefb8(0x8dd)]=this[_0xecefb8(0x8dd)]();},Game_Action['prototype'][_0x478a06(0xa46)]=function(_0x4ae5ba){const _0x3b7383=_0x478a06;window[_0x3b7383(0x41c)]=undefined,window['a']=undefined,window['b']=undefined,window[_0x3b7383(0x8be)]=undefined,window[_0x3b7383(0xa3e)]=undefined,window[_0x3b7383(0x382)]=undefined,window['skill']=undefined,window[_0x3b7383(0x8dd)]=undefined;},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x4d0)]=function(_0x5dc08c,_0x17e784){const _0x2e3297=_0x478a06;if(this['_bypass_applyBattleCoreHitRateJS'])return _0x5dc08c;this[_0x2e3297(0x2eb)](_0x17e784);if(this[_0x2e3297(0x8dd)]()){let _0x1da241=VisuMZ[_0x2e3297(0x1a5)][_0x2e3297(0xb43)](this[_0x2e3297(0x8dd)](),_0x2e3297(0x3b1));VisuMZ[_0x2e3297(0x1a5)]['JS'][_0x1da241]&&(_0x5dc08c=VisuMZ['BattleCore']['JS'][_0x1da241][_0x2e3297(0x21e)](this,this[_0x2e3297(0x4fe)](),_0x17e784,this[_0x2e3297(0x8dd)](),_0x5dc08c));}for(const _0x188b0d of this[_0x2e3297(0x4fe)]()[_0x2e3297(0x7f4)]()){if(!_0x188b0d)continue;key=VisuMZ[_0x2e3297(0x1a5)]['createKeyJS'](_0x188b0d,_0x2e3297(0x368)),VisuMZ[_0x2e3297(0x1a5)]['JS'][key]&&(_0x5dc08c=VisuMZ[_0x2e3297(0x1a5)]['JS'][key][_0x2e3297(0x21e)](this,this['subject'](),_0x17e784,this[_0x2e3297(0x8dd)](),_0x5dc08c));}for(const _0x295e87 of _0x17e784['traitObjects']()){if(!_0x295e87)continue;key=VisuMZ['BattleCore']['createKeyJS'](_0x295e87,_0x2e3297(0xb82)),VisuMZ[_0x2e3297(0x1a5)]['JS'][key]&&(_0x5dc08c=VisuMZ[_0x2e3297(0x1a5)]['JS'][key][_0x2e3297(0x21e)](this,this[_0x2e3297(0x4fe)](),_0x17e784,this[_0x2e3297(0x8dd)](),_0x5dc08c));}return this[_0x2e3297(0xa46)](_0x17e784),_0x5dc08c;},Game_Action['prototype'][_0x478a06(0x17c)]=function(_0x50abf4){const _0x5cbfd5=_0x478a06;if(!this[_0x5cbfd5(0x8dd)]()['damage']['critical'])return 0x0;let _0x38e68d=VisuMZ[_0x5cbfd5(0x1a5)][_0x5cbfd5(0x468)][_0x5cbfd5(0x7fa)]['CriticalHitRateJS']['call'](this,_0x50abf4);return _0x38e68d=this[_0x5cbfd5(0x4fd)][_0x5cbfd5(0x532)]*_0x38e68d+this['_multipliers'][_0x5cbfd5(0x1ff)],$gameParty[_0x5cbfd5(0xa8e)]()&&(_0x38e68d=this[_0x5cbfd5(0x21a)](_0x38e68d,_0x50abf4)),_0x38e68d;},Game_Action[_0x478a06(0x9c5)]['applyBattleCoreCriticalHitRateJS']=function(_0x25e457,_0x21f1ac){const _0x24b5c3=_0x478a06;this[_0x24b5c3(0x2eb)](_0x21f1ac),window[_0x24b5c3(0x6cc)]=_0x25e457;{const _0x7a1c5e=this['subject']()[_0x24b5c3(0x7f4)]();for(const _0x57d52a of _0x7a1c5e){if(!_0x57d52a)continue;if(_0x57d52a[_0x24b5c3(0x39c)][_0x24b5c3(0x85a)](/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i)){const _0x1d679d=String(RegExp['$1']);try{eval(_0x1d679d);}catch(_0x4bec7e){if($gameTemp['isPlaytest']())console[_0x24b5c3(0x1a4)](_0x4bec7e);}}}}{const _0x34b25d=_0x21f1ac[_0x24b5c3(0x7f4)]();for(const _0x259fc4 of _0x34b25d){if(!_0x259fc4)continue;if(_0x259fc4[_0x24b5c3(0x39c)][_0x24b5c3(0x85a)](/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i)){const _0xe52cfd=String(RegExp['$1']);try{eval(_0xe52cfd);}catch(_0x3b9b13){if($gameTemp[_0x24b5c3(0x42a)]())console[_0x24b5c3(0x1a4)](_0x3b9b13);}}}}return _0x25e457=window[_0x24b5c3(0x6cc)],this[_0x24b5c3(0xa46)](_0x21f1ac),_0x25e457;},Game_Action['prototype'][_0x478a06(0x21a)]=function(_0xe018c,_0x2b73fc){const _0x54d953=_0x478a06;this[_0x54d953(0x2eb)](_0x2b73fc);for(const _0xcfe8ad of this[_0x54d953(0x4fe)]()[_0x54d953(0x7f4)]()){if(!_0xcfe8ad)continue;key=VisuMZ[_0x54d953(0x1a5)][_0x54d953(0xb43)](_0xcfe8ad,_0x54d953(0x531)),VisuMZ[_0x54d953(0x1a5)]['JS'][key]&&(_0xe018c=VisuMZ['BattleCore']['JS'][key][_0x54d953(0x21e)](this,this['subject'](),_0x2b73fc,this['item'](),_0xe018c));}for(const _0x4b5c40 of _0x2b73fc[_0x54d953(0x7f4)]()){if(!_0x4b5c40)continue;key=VisuMZ[_0x54d953(0x1a5)][_0x54d953(0xb43)](_0x4b5c40,_0x54d953(0x97a)),VisuMZ[_0x54d953(0x1a5)]['JS'][key]&&(_0xe018c=VisuMZ[_0x54d953(0x1a5)]['JS'][key][_0x54d953(0x21e)](this,this[_0x54d953(0x4fe)](),_0x2b73fc,this[_0x54d953(0x8dd)](),_0xe018c));}return this[_0x54d953(0xa46)](_0x2b73fc),_0xe018c;},Game_Action['prototype'][_0x478a06(0x994)]=function(_0x2b503b){const _0xa28c01=_0x478a06;return _0x2b503b=VisuMZ[_0xa28c01(0x1a5)]['Settings'][_0xa28c01(0x7fa)][_0xa28c01(0xb7f)][_0xa28c01(0x21e)](this,_0x2b503b),_0x2b503b=this[_0xa28c01(0x4fd)][_0xa28c01(0x50c)]*_0x2b503b+this[_0xa28c01(0x4fd)][_0xa28c01(0x6d3)],_0x2b503b;},VisuMZ['BattleCore'][_0x478a06(0x883)]=Game_Action[_0x478a06(0x9c5)][_0x478a06(0xb48)],Game_Action['prototype'][_0x478a06(0xb48)]=function(_0x4f21f8){const _0x3693b3=_0x478a06;if(this[_0x3693b3(0x675)]!=='default')return this[_0x3693b3(0x8c3)](_0x4f21f8);else return DataManager[_0x3693b3(0x806)](this[_0x3693b3(0x8dd)]())===_0x3693b3(0xf9)?VisuMZ['BattleCore'][_0x3693b3(0x883)][_0x3693b3(0x21e)](this,_0x4f21f8):this[_0x3693b3(0x29a)](_0x4f21f8);},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x5e3)]=function(_0x448c62){this['_customDamageFormula']=_0x448c62;},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x8c3)]=function(_0x385498){const _0x256c44=_0x478a06,_0x29fc8e=this[_0x256c44(0x8dd)](),_0x5f1627=_0x29fc8e[_0x256c44(0x6b4)]['formula'];_0x29fc8e[_0x256c44(0x6b4)][_0x256c44(0x8c1)]=this[_0x256c44(0x675)];let _0x4e0ad9=VisuMZ[_0x256c44(0x1a5)][_0x256c44(0x883)]['call'](this,_0x385498);return _0x29fc8e[_0x256c44(0x6b4)]['formula']=_0x5f1627,_0x4e0ad9;},Game_Action[_0x478a06(0x9c5)]['damageStyle']=function(){const _0xda8cf6=_0x478a06;if(this[_0xda8cf6(0x8dd)]()[_0xda8cf6(0x39c)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x58fd3f=String(RegExp['$1'])[_0xda8cf6(0xabf)]()[_0xda8cf6(0xb7d)]();return _0x58fd3f;}return'MANUAL';},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x29a)]=function(_0x258405){const _0x1fe386=_0x478a06,_0xb5f10c=DataManager['getDamageStyle'](this['item']()),_0x290b6f=VisuMZ['DamageStyles'][_0xb5f10c];try{return _0x290b6f[_0x1fe386(0x183)][_0x1fe386(0x21e)](this,_0x258405);}catch(_0x13cd3c){if($gameTemp['isPlaytest']())console['log'](_0x13cd3c);return VisuMZ[_0x1fe386(0x1a5)][_0x1fe386(0x883)][_0x1fe386(0x21e)](this);}},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x850)]=function(_0x4c180e,_0xfa9011){const _0x1017cb=_0x478a06;if(this[_0x1017cb(0xa23)]())return _0xfa9011;const _0x1c7f68=this[_0x1017cb(0x4fe)](),_0x4d9e25=_0x4c180e;let _0x30cf77=[],_0x2af390=[];_0x30cf77[_0x1017cb(0x6b3)](this['_armorPenetration']['arPenFlat'],this[_0x1017cb(0x4c6)][_0x1017cb(0x299)]),_0x2af390[_0x1017cb(0x6b3)](this[_0x1017cb(0x4c6)][_0x1017cb(0x672)],this[_0x1017cb(0x4c6)][_0x1017cb(0x8fa)]);const _0x1b04d1=this[_0x1017cb(0xaa5)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x5c919c=this[_0x1017cb(0xaa5)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x5ccdf2=this[_0x1017cb(0xaa5)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x549412=this[_0x1017cb(0xaa5)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x30cf77=_0x30cf77[_0x1017cb(0x74a)](_0x4d9e25['traitObjects']()[_0x1017cb(0x77a)](_0x298abb=>_0x298abb&&_0x298abb[_0x1017cb(0x39c)][_0x1017cb(0x85a)](_0x1b04d1)?Number(RegExp['$1']):0x0)),_0x2af390=_0x2af390[_0x1017cb(0x74a)](_0x4d9e25[_0x1017cb(0x7f4)]()['map'](_0x57cb65=>_0x57cb65&&_0x57cb65['note'][_0x1017cb(0x85a)](_0x5c919c)?Number(RegExp['$1'])/0x64:0x0)),_0x30cf77=_0x30cf77[_0x1017cb(0x74a)](_0x1c7f68[_0x1017cb(0x7f4)]()[_0x1017cb(0x77a)](_0x1f643f=>_0x1f643f&&_0x1f643f['note'][_0x1017cb(0x85a)](_0x5ccdf2)?Number(RegExp['$1']):0x0)),_0x2af390=_0x2af390[_0x1017cb(0x74a)](_0x1c7f68[_0x1017cb(0x7f4)]()[_0x1017cb(0x77a)](_0x365b99=>_0x365b99&&_0x365b99[_0x1017cb(0x39c)][_0x1017cb(0x85a)](_0x549412)?Number(RegExp['$1'])/0x64:0x0)),this[_0x1017cb(0x8dd)]()[_0x1017cb(0x39c)][_0x1017cb(0x85a)](_0x5ccdf2)&&_0x30cf77[_0x1017cb(0x6b3)](Number(RegExp['$1'])),this[_0x1017cb(0x8dd)]()[_0x1017cb(0x39c)]['match'](_0x549412)&&_0x2af390[_0x1017cb(0x6b3)](Number(RegExp['$1'])),_0xfa9011=_0x30cf77[_0x1017cb(0x41f)]((_0x2786e1,_0x234e28)=>_0x2786e1-_0x234e28,_0xfa9011),_0xfa9011>0x0&&(_0xfa9011=_0x2af390[_0x1017cb(0x41f)]((_0x2ec12a,_0x1722fd)=>_0x2ec12a*(0x1-_0x1722fd),_0xfa9011)),_0xfa9011;},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x6fd)]=Game_Action[_0x478a06(0x9c5)][_0x478a06(0x6d8)],Game_Action[_0x478a06(0x9c5)][_0x478a06(0x6d8)]=function(_0xde10c0,_0xcdcec9){const _0x279c55=_0x478a06;_0xcdcec9=_0xcdcec9*this['_multipliers'][_0x279c55(0xbde)],_0xcdcec9+=this[_0x279c55(0x4fd)][_0x279c55(0x6e9)]*(_0xcdcec9>=0x0?0x1:-0x1),_0xcdcec9=this[_0x279c55(0x6ca)](_0x279c55(0x682),_0xde10c0,_0xcdcec9,![]),_0xcdcec9=this[_0x279c55(0x3a3)](_0xcdcec9),_0xcdcec9>0x0?_0xcdcec9=Math[_0x279c55(0x4f5)](_0xcdcec9):_0xcdcec9=Math[_0x279c55(0xa76)](_0xcdcec9),this[_0x279c55(0x988)]=_0xcdcec9,this['_totalValue']=this['_totalValue']||0x0,this[_0x279c55(0x86d)]+=_0xcdcec9,VisuMZ[_0x279c55(0x1a5)][_0x279c55(0x6fd)][_0x279c55(0x21e)](this,_0xde10c0,_0xcdcec9),this[_0x279c55(0x6ca)](_0x279c55(0x573),_0xde10c0,_0xcdcec9,!![]);},Game_Action['prototype']['applyDamageCaps']=function(_0x1afba3){const _0x524d6c=_0x478a06;if(this[_0x524d6c(0x158)]())return _0x1afba3;return _0x1afba3=this[_0x524d6c(0x1b9)](_0x1afba3),_0x1afba3=this[_0x524d6c(0x64f)](_0x1afba3),_0x1afba3;},Game_Action[_0x478a06(0x9c5)]['isBypassDamageCap']=function(){const _0x12057e=_0x478a06,_0x481c83=/<BYPASS DAMAGE CAP>/i;if(this[_0x12057e(0x8dd)]()[_0x12057e(0x39c)][_0x12057e(0x85a)](_0x481c83))return!![];if(this[_0x12057e(0x4fe)]()[_0x12057e(0x7f4)]()[_0x12057e(0x3cb)](_0x271103=>_0x271103&&_0x271103[_0x12057e(0x39c)][_0x12057e(0x85a)](_0x481c83)))return!![];return!VisuMZ[_0x12057e(0x1a5)][_0x12057e(0x468)][_0x12057e(0x7fa)]['EnableDamageCap'];},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x1b9)]=function(_0x1fe5c0){const _0x417dd3=_0x478a06;if(!VisuMZ['BattleCore'][_0x417dd3(0x468)]['Damage'][_0x417dd3(0x169)])return _0x1fe5c0;const _0x391be6=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x417dd3(0x8dd)]()[_0x417dd3(0x39c)][_0x417dd3(0x85a)](_0x391be6))return _0x1fe5c0;if(this[_0x417dd3(0x4fe)]()['traitObjects']()['some'](_0x33b397=>_0x33b397&&_0x33b397[_0x417dd3(0x39c)]['match'](_0x391be6)))return _0x1fe5c0;const _0x336931=_0x1fe5c0<0x0?-0x1:0x1;_0x1fe5c0=Math[_0x417dd3(0x42d)](_0x1fe5c0);let _0x57ff3c=this[_0x417dd3(0x4fe)]()[_0x417dd3(0x31b)]();this['item']()['note'][_0x417dd3(0x85a)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x57ff3c+=Number(RegExp['$1'])/0x64);_0x57ff3c=_0x57ff3c[_0x417dd3(0x411)](0.01,0x1);const _0x2ac6da=this['getHardDamageCap'](),_0x40cef8=_0x57ff3c*_0x2ac6da;if(_0x1fe5c0>_0x40cef8&&_0x2ac6da>_0x40cef8){_0x1fe5c0-=_0x40cef8;const _0x375dec=VisuMZ[_0x417dd3(0x1a5)][_0x417dd3(0x468)]['Damage']['DefaultSoftScaler'],_0x552764=Math[_0x417dd3(0x896)](0x1-_0x1fe5c0/((_0x2ac6da-_0x40cef8)*_0x375dec+_0x1fe5c0),0.01);_0x1fe5c0*=_0x552764,_0x1fe5c0+=_0x40cef8;}return _0x1fe5c0*_0x336931;},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x3d2)]=function(){const _0x247715=_0x478a06;return this[_0x247715(0x8dd)]()[_0x247715(0x39c)][_0x247715(0x85a)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this['subject']()[_0x247715(0x1db)]();},Game_Action[_0x478a06(0x9c5)]['applyHardDamageCap']=function(_0x201ce0){const _0x8ea70e=_0x478a06;let _0x4dc615=this['getHardDamageCap']();return _0x201ce0[_0x8ea70e(0x411)](-_0x4dc615,_0x4dc615);},Game_Action['prototype'][_0x478a06(0xadc)]=function(){const _0x17f604=_0x478a06;if(!this[_0x17f604(0x8dd)]())return![];if(!$gameParty[_0x17f604(0xa8e)]())return![];return(this[_0x17f604(0x8dd)]()[_0x17f604(0x39c)]||'')[_0x17f604(0x85a)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x478a06(0x9c5)][_0x478a06(0xa70)]=function(_0x8110b9){const _0x40f830=_0x478a06;if(this[_0x40f830(0xadc)]()){let _0x578859=BattleManager[_0x40f830(0x796)];_0x8110b9/=_0x578859[_0x40f830(0x496)],this[_0x40f830(0x56d)]()&&(_0x8110b9*=this[_0x40f830(0x4fe)]()[_0x40f830(0x91c)]()+0x1),_0x8110b9=_0x8110b9>0x0?Math[_0x40f830(0x4f5)](_0x8110b9):Math[_0x40f830(0xa76)](_0x8110b9);}return _0x8110b9;},VisuMZ['BattleCore'][_0x478a06(0x474)]=Game_Action[_0x478a06(0x9c5)][_0x478a06(0xb6c)],Game_Action[_0x478a06(0x9c5)]['makeDamageValue']=function(_0x59395e,_0x1dc38b){const _0x1d5640=_0x478a06;let _0x2d059e=VisuMZ[_0x1d5640(0x1a5)][_0x1d5640(0x474)][_0x1d5640(0x21e)](this,_0x59395e,_0x1dc38b);return this['disperseDamage'](_0x2d059e);},Game_Action[_0x478a06(0x9c5)]['itemEffectRecoverHp']=function(_0x5a5d7c,_0x121db2){const _0x6b8c5c=_0x478a06;let _0x142978=(_0x5a5d7c[_0x6b8c5c(0x383)]*_0x121db2['value1']+_0x121db2['value2'])*_0x5a5d7c[_0x6b8c5c(0x4fc)];_0x142978=this[_0x6b8c5c(0xa70)](_0x142978),this[_0x6b8c5c(0x126)]()&&(_0x142978*=this['subject']()[_0x6b8c5c(0x438)]),_0x142978=Math[_0x6b8c5c(0xa76)](_0x142978),_0x142978!==0x0&&(_0x5a5d7c[_0x6b8c5c(0x3c4)](_0x142978),this[_0x6b8c5c(0xc5)](_0x5a5d7c));},Game_Action[_0x478a06(0x9c5)]['itemEffectRecoverMp']=function(_0x37518e,_0x439270){const _0x31f407=_0x478a06;let _0x4004b8=(_0x37518e[_0x31f407(0x8b4)]*_0x439270[_0x31f407(0x54d)]+_0x439270[_0x31f407(0x58c)])*_0x37518e['rec'];_0x4004b8=this[_0x31f407(0xa70)](_0x4004b8),this[_0x31f407(0x126)]()&&(_0x4004b8*=this[_0x31f407(0x4fe)]()[_0x31f407(0x438)]),_0x4004b8=Math['floor'](_0x4004b8),_0x4004b8!==0x0&&(_0x37518e[_0x31f407(0x6f6)](_0x4004b8),this[_0x31f407(0xc5)](_0x37518e));},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x62f)]=function(_0xb42bd4,_0x26a3d9){const _0x3d7af1=_0x478a06;let _0x2866a9=Math[_0x3d7af1(0xa76)](_0x26a3d9[_0x3d7af1(0x54d)]);_0x2866a9=this[_0x3d7af1(0xa70)](_0x2866a9),_0x2866a9!==0x0&&(_0xb42bd4[_0x3d7af1(0x465)](_0x2866a9),this['makeSuccess'](_0xb42bd4));},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x843)]=Game_Action[_0x478a06(0x9c5)][_0x478a06(0x3c7)],Game_Action['prototype'][_0x478a06(0x3c7)]=function(_0x4c5117){const _0x39a4c5=_0x478a06;if(_0x4c5117&&_0x4c5117[_0x39a4c5(0x8e3)]())_0x4c5117[_0x39a4c5(0x762)]();this[_0x39a4c5(0x6ca)](_0x39a4c5(0x5b8),_0x4c5117,0x0,!![]),VisuMZ[_0x39a4c5(0x1a5)][_0x39a4c5(0x843)][_0x39a4c5(0x21e)](this,_0x4c5117),this[_0x39a4c5(0x6ca)]('PostApply%1JS',_0x4c5117,this[_0x39a4c5(0x988)]||0x0,!![]),this['applyResultSwitches'](_0x4c5117);},Game_Action['prototype'][_0x478a06(0x6ca)]=function(_0x353010,_0x36ecc8,_0x3df055,_0x369e51){const _0x480347=_0x478a06;if(this[_0x480347(0x94e)]||this[_0x480347(0xa92)])return;_0x3df055=_0x3df055||0x0;const _0x3738fe=_0x3df055,_0x2b3e57=VisuMZ[_0x480347(0x1a5)][_0x480347(0x468)]['Mechanics'],_0x40370d=_0x353010[_0x480347(0x177)]('');if(_0x2b3e57[_0x40370d]){_0x3df055=_0x2b3e57[_0x40370d][_0x480347(0x21e)](this,_0x3df055,_0x36ecc8);if(_0x369e51)_0x3df055=_0x3738fe;}let _0x4647bd=VisuMZ['BattleCore'][_0x480347(0xb43)](this['item'](),_0x353010['format'](''));if(VisuMZ[_0x480347(0x1a5)]['JS'][_0x4647bd]){_0x3df055=VisuMZ['BattleCore']['JS'][_0x4647bd][_0x480347(0x21e)](this,this['subject'](),_0x36ecc8,this['item'](),_0x3df055);if(_0x369e51)_0x3df055=_0x3738fe;}for(const _0x1007d1 of this[_0x480347(0x4fe)]()[_0x480347(0x7f4)]()){if(!_0x1007d1)continue;_0x4647bd=VisuMZ['BattleCore'][_0x480347(0xb43)](_0x1007d1,_0x353010[_0x480347(0x177)]('AsUser'));if(VisuMZ[_0x480347(0x1a5)]['JS'][_0x4647bd]){_0x3df055=VisuMZ[_0x480347(0x1a5)]['JS'][_0x4647bd][_0x480347(0x21e)](this,this[_0x480347(0x4fe)](),_0x36ecc8,_0x1007d1,_0x3df055);if(_0x369e51)_0x3df055=_0x3738fe;}}for(const _0x28fee8 of _0x36ecc8[_0x480347(0x7f4)]()){if(!_0x28fee8)continue;_0x4647bd=VisuMZ['BattleCore'][_0x480347(0xb43)](_0x28fee8,_0x353010[_0x480347(0x177)]('AsTarget'));if(VisuMZ[_0x480347(0x1a5)]['JS'][_0x4647bd]){_0x3df055=VisuMZ['BattleCore']['JS'][_0x4647bd][_0x480347(0x21e)](this,this[_0x480347(0x4fe)](),_0x36ecc8,_0x28fee8,_0x3df055);if(_0x369e51)_0x3df055=_0x3738fe;}}return _0x3df055;},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x60d)]=function(_0x60695e){const _0x3de55c=_0x478a06,_0x47adff=this[_0x3de55c(0x86d)]||0x0,_0x1fb90b=VisuMZ[_0x3de55c(0x1a5)]['Settings']['Mechanics'],_0x1c3f40=_0x60695e['format']('');_0x1fb90b[_0x1c3f40]&&_0x1fb90b[_0x1c3f40][_0x3de55c(0x21e)](this,_0x47adff);let _0x339510=VisuMZ[_0x3de55c(0x1a5)]['createKeyJS'](this[_0x3de55c(0x8dd)](),_0x60695e);VisuMZ['BattleCore']['JS'][_0x339510]&&VisuMZ[_0x3de55c(0x1a5)]['JS'][_0x339510][_0x3de55c(0x21e)](this,this[_0x3de55c(0x4fe)](),this['subject'](),this[_0x3de55c(0x8dd)](),_0x47adff);for(const _0x1fc452 of this['subject']()['traitObjects']()){if(!_0x1fc452)continue;_0x339510=VisuMZ['BattleCore'][_0x3de55c(0xb43)](_0x1fc452,_0x60695e),VisuMZ[_0x3de55c(0x1a5)]['JS'][_0x339510]&&VisuMZ[_0x3de55c(0x1a5)]['JS'][_0x339510][_0x3de55c(0x21e)](this,this['subject'](),this[_0x3de55c(0x4fe)](),_0x1fc452,_0x47adff);}},Game_Action[_0x478a06(0x9c5)]['speed']=function(){const _0x2a2021=_0x478a06;return VisuMZ[_0x2a2021(0x1a5)][_0x2a2021(0x468)][_0x2a2021(0xae0)][_0x2a2021(0xbab)][_0x2a2021(0x21e)](this);},Game_Action['prototype']['allowRandomSpeed']=function(){const _0x317663=_0x478a06;return VisuMZ['BattleCore']['Settings'][_0x317663(0xae0)][_0x317663(0xa79)];},Game_Action[_0x478a06(0x9c5)]['isCustomBattleScope']=function(){const _0x84982a=_0x478a06;if(this[_0x84982a(0x7d6)]===_0x84982a(0x560))return![];if(this['_targetBattlerKey']==='all\x20enemies')return![];if(!this['item']())return![];return this[_0x84982a(0x8dd)]()[_0x84982a(0x39c)][_0x84982a(0x85a)](/<JS TARGETS>/i);},Game_Action[_0x478a06(0x9c5)]['isBattleCoreTargetScope']=function(){const _0x3c44a1=_0x478a06;if(this[_0x3c44a1(0x7d6)]==='all\x20actors')return![];if(this[_0x3c44a1(0x7d6)]===_0x3c44a1(0x398))return![];if(!this['_forcing']&&this[_0x3c44a1(0x4fe)]()[_0x3c44a1(0x36e)]())return![];if(this[_0x3c44a1(0x594)]())return!![];if(!this[_0x3c44a1(0x8dd)]())return![];return typeof this[_0x3c44a1(0x8dd)]()['scope']===_0x3c44a1(0x6b9);},VisuMZ['BattleCore'][_0x478a06(0x17e)]=Game_Action['prototype']['isForOpponent'],Game_Action['prototype'][_0x478a06(0x77c)]=function(){const _0x99b55b=_0x478a06;if(this[_0x99b55b(0x7d6)]===_0x99b55b(0x560))return![];if(this[_0x99b55b(0x7d6)]===_0x99b55b(0x398))return!![];return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this[_0x99b55b(0x1e2)]():VisuMZ[_0x99b55b(0x1a5)][_0x99b55b(0x17e)][_0x99b55b(0x21e)](this);},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x1e2)]=function(){const _0x1a2ba2=_0x478a06,_0x588754=String(this[_0x1a2ba2(0x8dd)]()['scope']);if(_0x588754[_0x1a2ba2(0x85a)](/ANY/i))return!![];return _0x588754[_0x1a2ba2(0x85a)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xa2c)]=Game_Action['prototype'][_0x478a06(0x3eb)],Game_Action[_0x478a06(0x9c5)][_0x478a06(0x3eb)]=function(){const _0x342be7=_0x478a06;if(this[_0x342be7(0x7d6)]===_0x342be7(0x560))return!![];if(this['_targetBattlerKey']===_0x342be7(0x398))return![];return this[_0x342be7(0x3db)]()&&!this[_0x342be7(0x594)]()?this[_0x342be7(0x315)]():VisuMZ[_0x342be7(0x1a5)][_0x342be7(0xa2c)][_0x342be7(0x21e)](this);},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x315)]=function(){const _0xaa767b=_0x478a06,_0x1ce52b=String(this[_0xaa767b(0x8dd)]()[_0xaa767b(0x564)]);return _0x1ce52b[_0xaa767b(0x85a)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action['prototype'][_0x478a06(0x602)]=function(){const _0x55b456=_0x478a06;if(this[_0x55b456(0x3db)]()&&!this[_0x55b456(0x594)]()){const _0x377d9e=String(this['item']()[_0x55b456(0x564)]);return _0x377d9e[_0x55b456(0x85a)](/(?:ENEMY|FOE)/i)&&_0x377d9e['match'](/OR/i)&&_0x377d9e[_0x55b456(0x85a)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x7c7)]=function(){const _0x57c8bf=_0x478a06;if(this[_0x57c8bf(0x602)]()){const _0x8329bc=String(this[_0x57c8bf(0x8dd)]()[_0x57c8bf(0x564)]);if(_0x8329bc[_0x57c8bf(0x85a)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x993)]=function(){const _0x17c57e=_0x478a06;if(this[_0x17c57e(0x602)]()){const _0x39c095=String(this[_0x17c57e(0x8dd)]()[_0x17c57e(0x564)]);if(_0x39c095['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x924)]=Game_Action[_0x478a06(0x9c5)]['isForAliveFriend'],Game_Action[_0x478a06(0x9c5)][_0x478a06(0xff)]=function(){const _0x3578da=_0x478a06;if(this[_0x3578da(0x7d6)]===_0x3578da(0x560))return!![];return this['isBattleCoreTargetScope']()&&!this[_0x3578da(0x594)]()?this['isForAliveFriendBattleCore']():VisuMZ[_0x3578da(0x1a5)][_0x3578da(0x924)]['call'](this);},VisuMZ['BattleCore'][_0x478a06(0x771)]=Game_Action[_0x478a06(0x9c5)][_0x478a06(0x342)],Game_Action[_0x478a06(0x9c5)][_0x478a06(0x342)]=function(){const _0x2385e3=_0x478a06;if(this['_targetBattlerKey']===_0x2385e3(0x560))return VisuMZ['BattleCore'][_0x2385e3(0x771)][_0x2385e3(0x21e)](this);return VisuMZ['BattleCore'][_0x2385e3(0x771)][_0x2385e3(0x21e)](this);},Game_Action['prototype'][_0x478a06(0x950)]=function(){const _0xc9356c=_0x478a06;if(this[_0xc9356c(0x602)]())return!![];return![];},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x8ea)]=function(){const _0x730f1a=_0x478a06;return this[_0x730f1a(0x8dd)]()&&this[_0x730f1a(0x8dd)]()[_0x730f1a(0x39c)][_0x730f1a(0x85a)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x2cc)]=Game_Action[_0x478a06(0x9c5)][_0x478a06(0x3a9)],Game_Action[_0x478a06(0x9c5)][_0x478a06(0x3a9)]=function(){const _0x6f02f8=_0x478a06;if(this[_0x6f02f8(0x7d6)]==='all\x20actors')return![];if(this['_targetBattlerKey']===_0x6f02f8(0x398))return![];return this['isBattleCoreTargetScope']()&&!this[_0x6f02f8(0x594)]()?this[_0x6f02f8(0x4f3)]():VisuMZ[_0x6f02f8(0x1a5)]['Game_Action_isForOne']['call'](this);},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x4f3)]=function(){if(this['isForAnyone']())return!![];return![];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x9ab)]=Game_Action[_0x478a06(0x9c5)]['isForRandom'],Game_Action[_0x478a06(0x9c5)]['isForRandom']=function(){const _0x4fb390=_0x478a06;if(this['_targetBattlerKey']===_0x4fb390(0x560))return![];if(this[_0x4fb390(0x7d6)]===_0x4fb390(0x398))return![];return this[_0x4fb390(0x3db)]()&&!this[_0x4fb390(0x594)]()?this['isForRandomBattleCore']():VisuMZ[_0x4fb390(0x1a5)][_0x4fb390(0x9ab)][_0x4fb390(0x21e)](this);},Game_Action['prototype'][_0x478a06(0x7d9)]=function(){const _0x495df4=_0x478a06,_0x15e55f=String(this['item']()['scope']);return _0x15e55f[_0x495df4(0x85a)](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore'][_0x478a06(0x7b5)]=Game_Action['prototype'][_0x478a06(0x540)],Game_Action[_0x478a06(0x9c5)][_0x478a06(0x540)]=function(){const _0x1e6bbf=_0x478a06;if(this[_0x1e6bbf(0x7d6)]===_0x1e6bbf(0x560))return!![];if(this[_0x1e6bbf(0x7d6)]==='all\x20enemies')return!![];return VisuMZ[_0x1e6bbf(0x1a5)][_0x1e6bbf(0x7b5)][_0x1e6bbf(0x21e)](this);},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x5e4)]=function(){const _0x2eacfd=_0x478a06;if(!this[_0x2eacfd(0x8dd)]())return![];if(this['isForDeadFriend']())return![];return(this[_0x2eacfd(0x8dd)]()[_0x2eacfd(0x39c)]||'')[_0x2eacfd(0x85a)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x14f)]=Game_Action['prototype'][_0x478a06(0xbd3)],Game_Action[_0x478a06(0x9c5)][_0x478a06(0xbd3)]=function(_0x1d6836){const _0x586dba=_0x478a06;if(this[_0x586dba(0x8ea)]()&&_0x1d6836===this[_0x586dba(0x4fe)]())return![];return VisuMZ['BattleCore']['Game_Action_testApply'][_0x586dba(0x21e)](this,_0x1d6836);},VisuMZ['BattleCore'][_0x478a06(0x7ea)]=Game_Action['prototype']['itemTargetCandidates'],Game_Action[_0x478a06(0x9c5)][_0x478a06(0x5be)]=function(){const _0x4bb1a7=_0x478a06,_0xa13b61=VisuMZ[_0x4bb1a7(0x1a5)][_0x4bb1a7(0x7ea)][_0x4bb1a7(0x21e)](this);if(this[_0x4bb1a7(0x8ea)]())_0xa13b61[_0x4bb1a7(0x553)](this['subject']());return _0xa13b61;},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x9c7)]=Game_Action[_0x478a06(0x9c5)][_0x478a06(0x6cb)],Game_Action[_0x478a06(0x9c5)]['needsSelection']=function(){const _0x5da943=_0x478a06;return this['isBattleCoreTargetScope']()&&!this[_0x5da943(0x594)]()?this[_0x5da943(0x548)]():VisuMZ[_0x5da943(0x1a5)][_0x5da943(0x9c7)][_0x5da943(0x21e)](this);},Game_Action['prototype'][_0x478a06(0x548)]=function(){const _0x587150=_0x478a06,_0x3c1ea9=String(this['item']()[_0x587150(0x564)]);if(_0x3c1ea9[_0x587150(0x85a)](/RANDOM/i))return![];if(_0x3c1ea9[_0x587150(0x85a)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x3c1ea9['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x3c1ea9[_0x587150(0x85a)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x3c1ea9['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x587150(0x1a5)][_0x587150(0x9c7)][_0x587150(0x21e)](this);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x61c)]=Game_Action['prototype']['makeTargets'],Game_Action[_0x478a06(0x9c5)][_0x478a06(0xbc6)]=function(){const _0x5f0977=_0x478a06;let _0x5f2d48=[];return this[_0x5f0977(0x3db)]()?this[_0x5f0977(0x594)]()?_0x5f2d48=this[_0x5f0977(0xb59)]():_0x5f2d48=this['makeTargetsBattleCore']():_0x5f2d48=VisuMZ[_0x5f0977(0x1a5)][_0x5f0977(0x61c)]['call'](this),_0x5f2d48=this['applyTargetFilters'](_0x5f2d48),_0x5f2d48;},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x186)]=function(){const _0x442d4d=_0x478a06;return this[_0x442d4d(0x4fe)]()[_0x442d4d(0x847)]()&&!this[_0x442d4d(0x4fe)]()['isAutoBattle']();},Game_Action[_0x478a06(0x9c5)][_0x478a06(0xb59)]=function(){const _0x5b974b=_0x478a06,_0x3d8ed7=VisuMZ[_0x5b974b(0x1a5)]['createKeyJS'](this[_0x5b974b(0x8dd)](),_0x5b974b(0x1e7));if(VisuMZ['BattleCore']['JS'][_0x3d8ed7]){targets=VisuMZ[_0x5b974b(0x1a5)][_0x5b974b(0x61c)][_0x5b974b(0x21e)](this);const _0x21d2e2=VisuMZ[_0x5b974b(0x1a5)]['createKeyJS'](this[_0x5b974b(0x8dd)](),_0x5b974b(0x1e7));return targets=VisuMZ['BattleCore']['JS'][_0x21d2e2][_0x5b974b(0x21e)](this,this[_0x5b974b(0x4fe)](),targets),this['repeatTargets'](targets);}return this[_0x5b974b(0x5bf)]();},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x5bf)]=function(){const _0xfffb85=_0x478a06;let _0x4c738f=[];const _0x4c19f3=String(this[_0xfffb85(0x8dd)]()['scope']);if(this['isForAnyoneFocusOpponents']())return this[_0xfffb85(0x186)]()?(_0x4c738f=this[_0xfffb85(0x5e9)](),this[_0xfffb85(0x2f9)](_0x4c738f)):(this['_targetIndex']=-0x1,_0x4c738f[_0xfffb85(0x6b3)](...this[_0xfffb85(0x62d)]()),this[_0xfffb85(0x2f9)](_0x4c738f));if(this[_0xfffb85(0x7c7)]()){if(this['isSubjectValidForAnyoneSelect']())return _0x4c738f=this['getBattlerKeyTargets'](),this[_0xfffb85(0x2f9)](_0x4c738f);else{if(Imported[_0xfffb85(0x903)]){if(VisuMZ[_0xfffb85(0x7a4)][_0xfffb85(0x784)]<1.19){let _0x167f20='';_0x167f20+=_0xfffb85(0x442),_0x167f20+=_0xfffb85(0x142),_0x167f20+=_0xfffb85(0x713),alert(_0x167f20),SceneManager[_0xfffb85(0x834)]();}}return this[_0xfffb85(0x904)]=-0x1,_0x4c738f[_0xfffb85(0x6b3)](...this['targetsForFriends']()),this['repeatTargets'](_0x4c738f);}}if(_0x4c19f3[_0xfffb85(0x85a)](/(\d+) RANDOM ANY/i)){let _0x515057=Number(RegExp['$1']);while(_0x515057--){const _0x14c06b=Math[_0xfffb85(0x679)](0x2)===0x0?this[_0xfffb85(0x2fb)]():this['friendsUnit']();_0x4c738f['push'](_0x14c06b[_0xfffb85(0x5ae)]());}return this[_0xfffb85(0x2f9)](_0x4c738f);}if(_0x4c19f3[_0xfffb85(0x85a)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x4f548c=Number(RegExp['$1']);while(_0x4f548c--){_0x4c738f[_0xfffb85(0x6b3)](this[_0xfffb85(0x2fb)]()[_0xfffb85(0x5ae)]());}return this[_0xfffb85(0x2f9)](_0x4c738f);}if(_0x4c19f3['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x5813d9=Number(RegExp['$1']);while(_0x5813d9--){_0x4c738f[_0xfffb85(0x6b3)](this['friendsUnit']()['trueRandomTarget']());}return this[_0xfffb85(0x2f9)](_0x4c738f);}if(_0x4c19f3[_0xfffb85(0x85a)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x4c738f['push'](...this['friendsUnit']()[_0xfffb85(0x7bb)]()[_0xfffb85(0x4d3)](_0x2d5c33=>_0x2d5c33!==this['subject']())),this[_0xfffb85(0x2f9)](_0x4c738f);return VisuMZ['BattleCore'][_0xfffb85(0x61c)][_0xfffb85(0x21e)](this);},Game_Action[_0x478a06(0x9c5)][_0x478a06(0xa59)]=function(_0x2f8df9){const _0x373a1a=_0x478a06,_0x30b926=[];for(let _0x31516b=0x0;_0x31516b<this[_0x373a1a(0x247)]();_0x31516b++){_0x30b926['push'](_0x2f8df9[_0x373a1a(0x5ae)]());}return _0x30b926;},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x184)]=function(_0x1fdecc){const _0x478dc5=_0x478a06;if(!this[_0x478dc5(0x8dd)]())return _0x1fdecc;const _0x56855e=this[_0x478dc5(0x8dd)]()[_0x478dc5(0x39c)];if(this[_0x478dc5(0x8ea)]()){this[_0x478dc5(0x540)]()&&_0x1fdecc['remove'](this[_0x478dc5(0x4fe)]());if(_0x1fdecc[_0x478dc5(0x982)](this[_0x478dc5(0x4fe)]())){const _0x398598=this['friendsUnit']()[_0x478dc5(0x7bb)]()[_0x478dc5(0x553)](this['subject']());if(_0x398598[_0x478dc5(0x496)]>0x0){_0x398598[_0x478dc5(0x351)]((_0x96b0fe,_0x234ad4)=>_0x96b0fe[_0x478dc5(0x1d3)]()-_0x234ad4[_0x478dc5(0x1d3)]());while(_0x1fdecc[_0x478dc5(0x982)](this[_0x478dc5(0x4fe)]())){const _0x485325=_0x1fdecc['indexOf'](this['subject']());_0x1fdecc[_0x485325]=_0x398598[Math[_0x478dc5(0x679)](_0x398598['length'])];}}else _0x1fdecc[_0x478dc5(0x553)](this[_0x478dc5(0x4fe)]());}}return _0x1fdecc;},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x5fb)]=Game_Action['prototype']['itemEffectAddAttackState'],Game_Action['prototype'][_0x478a06(0x3ce)]=function(_0x1ae14f,_0x137926){const _0xc7e2c=_0x478a06;VisuMZ[_0xc7e2c(0x1a5)][_0xc7e2c(0x5fb)]['call'](this,_0x1ae14f,_0x137926);if(!_0x1ae14f[_0xc7e2c(0x2de)]())return;for(const _0x1fbc7e of this['subject']()[_0xc7e2c(0xbbb)]()){if(_0x1fbc7e===_0x1ae14f['deathStateId']()){let _0x3e829b=_0x137926[_0xc7e2c(0x54d)];_0x3e829b*=_0x1ae14f['stateRate'](_0x1fbc7e),_0x3e829b*=this['subject']()[_0xc7e2c(0x946)](_0x1fbc7e),_0x3e829b*=this[_0xc7e2c(0x7db)](_0x1ae14f),Math[_0xc7e2c(0x8a1)]()<_0x3e829b&&(_0x1ae14f[_0xc7e2c(0x1dc)]=!![],this[_0xc7e2c(0xc5)](_0x1ae14f));}}},VisuMZ[_0x478a06(0x1a5)]['Game_Action_itemEffectAddNormalState']=Game_Action['prototype'][_0x478a06(0x374)],Game_Action['prototype'][_0x478a06(0x374)]=function(_0x5e7fa6,_0x2f212f){const _0x31154c=_0x478a06;VisuMZ[_0x31154c(0x1a5)][_0x31154c(0xa4f)][_0x31154c(0x21e)](this,_0x5e7fa6,_0x2f212f);if(!_0x5e7fa6[_0x31154c(0x2de)]())return;if(_0x2f212f['dataId']!==_0x5e7fa6['deathStateId']())return;let _0x4b478d=_0x2f212f[_0x31154c(0x54d)];!this[_0x31154c(0xa23)]()&&(_0x4b478d*=_0x5e7fa6['stateRate'](_0x2f212f[_0x31154c(0x9cb)]),_0x4b478d*=this[_0x31154c(0x7db)](_0x5e7fa6)),Math[_0x31154c(0x8a1)]()<_0x4b478d&&(_0x5e7fa6[_0x31154c(0x1dc)]=!![],this[_0x31154c(0xc5)](_0x5e7fa6));},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x30a)]=Game_Action[_0x478a06(0x9c5)][_0x478a06(0x916)],Game_Action['prototype'][_0x478a06(0x916)]=function(){const _0x74ab77=_0x478a06;VisuMZ[_0x74ab77(0x1a5)]['Game_Action_applyGlobal'][_0x74ab77(0x21e)](this),this[_0x74ab77(0x94d)](),this[_0x74ab77(0x2c5)]();},Game_Action[_0x478a06(0x9c5)]['applyGlobalCommonEventNotetags']=function(){const _0x4834fa=_0x478a06;if(!SceneManager[_0x4834fa(0x785)]())return;const _0x5466e0=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x2e8b5e=this['item']()[_0x4834fa(0x39c)][_0x4834fa(0x85a)](_0x5466e0);if(_0x2e8b5e)for(const _0x4c63c9 of _0x2e8b5e){if(!_0x4c63c9)continue;_0x4c63c9[_0x4834fa(0x85a)](_0x5466e0);const _0x57ea0c=String(RegExp['$1'])[_0x4834fa(0x4c7)](',')[_0x4834fa(0x77a)](_0x4cb52d=>String(_0x4cb52d)[_0x4834fa(0xb7d)]()),_0x23aaa6=_0x57ea0c[_0x4834fa(0x77a)](_0x220a16=>DataManager[_0x4834fa(0xb9f)](_0x220a16));for(const _0x37c534 of _0x23aaa6){const _0x4f4ada=$dataCommonEvents[_0x37c534];_0x4f4ada&&$gameTemp[_0x4834fa(0x1be)](_0x37c534);}}},DataManager['getCommonEventIdWithName']=function(_0x5f89a8){const _0x3be716=_0x478a06;_0x5f89a8=_0x5f89a8[_0x3be716(0xabf)]()[_0x3be716(0xb7d)](),this[_0x3be716(0xad2)]=this['_commonEventIDs']||{};if(this[_0x3be716(0xad2)][_0x5f89a8])return this[_0x3be716(0xad2)][_0x5f89a8];for(const _0x5869bd of $dataCommonEvents){if(!_0x5869bd)continue;let _0x5e44da=_0x5869bd[_0x3be716(0x8ff)];_0x5e44da=_0x5e44da['replace'](/\x1I\[(\d+)\]/gi,''),_0x5e44da=_0x5e44da[_0x3be716(0xaa3)](/\\I\[(\d+)\]/gi,''),this['_commonEventIDs'][_0x5e44da[_0x3be716(0xabf)]()[_0x3be716(0xb7d)]()]=_0x5869bd['id'];}return this['_commonEventIDs'][_0x5f89a8]||0x0;},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x2c5)]=function(){const _0x3aec27=_0x478a06;if(!SceneManager[_0x3aec27(0x785)]())return;const _0x428809=VisuMZ[_0x3aec27(0x1a5)]['Settings']['Mechanics'];_0x428809['SwitchCritical']&&$gameSwitches[_0x3aec27(0x35a)](_0x428809['SwitchCritical'],![]),_0x428809['SwitchMissEvade']&&$gameSwitches[_0x3aec27(0x35a)](_0x428809[_0x3aec27(0x216)],![]),_0x428809['VariableDmg']&&$gameVariables['setValue'](_0x428809['VariableDmg'],0x0),_0x428809[_0x3aec27(0x2f7)]&&$gameVariables[_0x3aec27(0x35a)](_0x428809[_0x3aec27(0x2f7)],0x0);},Game_Action['prototype']['applyResultSwitches']=function(_0x184601){const _0x4b9d93=_0x478a06;if(!SceneManager[_0x4b9d93(0x785)]())return;if(!_0x184601)return;const _0x2673fd=_0x184601[_0x4b9d93(0x15f)](),_0x404387=VisuMZ[_0x4b9d93(0x1a5)][_0x4b9d93(0x468)][_0x4b9d93(0xae0)];_0x404387[_0x4b9d93(0x79e)]&&_0x2673fd[_0x4b9d93(0xb0b)]&&$gameSwitches[_0x4b9d93(0x35a)](_0x404387[_0x4b9d93(0x79e)],!![]);_0x404387[_0x4b9d93(0x216)]&&(_0x2673fd[_0x4b9d93(0xbf3)]||_0x2673fd[_0x4b9d93(0x8ed)])&&$gameSwitches['setValue'](_0x404387['SwitchMissEvade'],!![]);if(_0x404387[_0x4b9d93(0x1d0)]){let _0x41a748=$gameVariables['value'](_0x404387[_0x4b9d93(0x1d0)]);_0x2673fd[_0x4b9d93(0x837)]>0x0&&(_0x41a748+=Math[_0x4b9d93(0x42d)](_0x2673fd[_0x4b9d93(0x837)])),$gameVariables[_0x4b9d93(0x35a)](_0x404387[_0x4b9d93(0x1d0)],_0x41a748);}if(_0x404387[_0x4b9d93(0x2f7)]){let _0xa7db92=$gameVariables[_0x4b9d93(0x66c)](_0x404387[_0x4b9d93(0x2f7)]);_0x2673fd[_0x4b9d93(0x837)]<0x0&&(_0xa7db92+=Math[_0x4b9d93(0x42d)](_0x2673fd[_0x4b9d93(0x837)])),$gameVariables['setValue'](_0x404387[_0x4b9d93(0x2f7)],_0xa7db92);}},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x8e2)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x773)]=Game_Action['prototype'][_0x478a06(0x316)],Game_Action[_0x478a06(0x9c5)]['executeHpDamage']=function(_0x56b7a3,_0x115b6e){const _0xae6da8=_0x478a06;VisuMZ['BattleCore'][_0xae6da8(0x773)][_0xae6da8(0x21e)](this,_0x56b7a3,_0x115b6e);!this['isDrain']()&&_0x56b7a3&&_0x56b7a3[_0xae6da8(0x15f)]()[_0xae6da8(0x837)]>0x0&&this[_0xae6da8(0x9b4)]('HP',_0x56b7a3,_0x56b7a3['result']()[_0xae6da8(0x837)]);if(_0x56b7a3){this[_0xae6da8(0x8b0)]=this[_0xae6da8(0x8b0)]||{};const _0x296148=_0x56b7a3[_0xae6da8(0x7bd)]();this['_executeHpDamage'][_0x296148]=_0x115b6e;}},Game_Action[_0x478a06(0x9c5)]['getLastHpDamage']=function(_0x155480){const _0x4e0595=_0x478a06;this[_0x4e0595(0x8b0)]=this[_0x4e0595(0x8b0)]||{};const _0x1df375=_0x155480[_0x4e0595(0x7bd)]();return this[_0x4e0595(0x8b0)][_0x1df375]||0x0;},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x340)]=Game_Action['prototype'][_0x478a06(0xac7)],Game_Action[_0x478a06(0x9c5)]['executeMpDamage']=function(_0x2319ff,_0x1aec4d){const _0x5c07cd=_0x478a06;VisuMZ[_0x5c07cd(0x1a5)][_0x5c07cd(0x340)][_0x5c07cd(0x21e)](this,_0x2319ff,_0x1aec4d),!this[_0x5c07cd(0xa98)]()&&_0x2319ff&&_0x2319ff[_0x5c07cd(0x15f)]()['mpDamage']>0x0&&this[_0x5c07cd(0x9b4)]('MP',_0x2319ff,_0x2319ff[_0x5c07cd(0x15f)]()['mpDamage']);},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x9b4)]=function(_0x4889ea,_0x5bc63a,_0x14f5aa){const _0x5091f0=_0x478a06;_0x4889ea=_0x4889ea[_0x5091f0(0xabf)]()[_0x5091f0(0xb7d)]();const _0x112993=this[_0x5091f0(0xb6a)](_0x4889ea,_0x5bc63a);if(_0x112993<=0x0)return;const _0x84790=Math[_0x5091f0(0x801)](_0x14f5aa*_0x112993);if(_0x84790<=0x0)return;let _0x4f8a4b=this[_0x5091f0(0x4fe)]();if(this['_reflectionTarget'])_0x4f8a4b=this['_reflectionTarget'];const _0x31171d=_0x5bc63a[_0x5091f0(0x871)](_0x4889ea)?-0x1:0x1;if(_0x4889ea==='HP')_0x4f8a4b[_0x5091f0(0x3c4)](_0x31171d*_0x84790);if(_0x4889ea==='MP')_0x4f8a4b[_0x5091f0(0x6f6)](_0x31171d*_0x84790);},Game_Action[_0x478a06(0x9c5)][_0x478a06(0xb6a)]=function(_0x7c994c,_0x1d5a0f){const _0x5f1bc9=_0x478a06;if(this[_0x5f1bc9(0x513)](_0x7c994c))return 0x0;if(this[_0x5f1bc9(0x4fe)]()[_0x5f1bc9(0x558)](_0x7c994c))return 0x0;if(_0x1d5a0f[_0x5f1bc9(0x218)](_0x7c994c))return 0x0;let _0x1b6e26=0x0;return _0x1b6e26+=this[_0x5f1bc9(0x6e2)](_0x7c994c),_0x1b6e26+=this['subject']()['lifeStealRate'](_0x7c994c,this[_0x5f1bc9(0x8dd)]()[_0x5f1bc9(0xb96)]),_0x1b6e26[_0x5f1bc9(0x411)](0x0,0x1);},Game_Action['prototype']['isCancelLifeSteal']=function(_0x131f3e){const _0x426889=_0x478a06;_0x131f3e=_0x131f3e[_0x426889(0xabf)]()[_0x426889(0xb7d)]();const _0x108d7d=VisuMZ[_0x426889(0x1a5)][_0x426889(0x8e2)],_0x45f62a=this[_0x426889(0x8dd)]()['note']||'';if(_0x45f62a[_0x426889(0x85a)](_0x108d7d[_0x426889(0x3ab)]))return!![];if(_0x131f3e==='HP'&&_0x45f62a[_0x426889(0x85a)](_0x108d7d['cancelHpLifeSteal']))return!![];if(_0x131f3e==='MP'&&_0x45f62a[_0x426889(0x85a)](_0x108d7d[_0x426889(0x265)]))return!![];return![];},Game_Action[_0x478a06(0x9c5)][_0x478a06(0x6e2)]=function(_0x5a56a0){const _0x2e88c1=_0x478a06,_0x164d35=VisuMZ['BattleCore'][_0x2e88c1(0x8e2)],_0x566507=this['item']()[_0x2e88c1(0x39c)]||'';_0x5a56a0=_0x5a56a0[_0x2e88c1(0xabf)]()[_0x2e88c1(0xb7d)]();const _0x708c86=_0x566507[_0x2e88c1(0x85a)](_0x164d35['lifeSteaItem']);if(_0x708c86)for(const _0x46e82d of _0x708c86){_0x46e82d['match'](_0x164d35[_0x2e88c1(0x29e)]);const _0x56b933=String(RegExp['$1'])['toUpperCase']()[_0x2e88c1(0xb7d)](),_0x2b3d07=Number(RegExp['$2'])*0.01;if(_0x56b933!==_0x5a56a0)continue;return _0x2b3d07;}return 0x0;},Game_BattlerBase['prototype'][_0x478a06(0xb6a)]=function(_0x1924d2,_0x574c31){const _0x3690f4=_0x478a06,_0x37b98b=VisuMZ[_0x3690f4(0x1a5)][_0x3690f4(0x8e2)];let _0x258a5c=0x0;_0x1924d2=_0x1924d2['toUpperCase']()[_0x3690f4(0xb7d)]();for(const _0x159194 of this[_0x3690f4(0x7f4)]()){if(!_0x159194)continue;const _0x4b776e=_0x159194['note']||'',_0x5be949=_0x4b776e[_0x3690f4(0x85a)](_0x37b98b[_0x3690f4(0x1d9)]);if(_0x5be949)for(const _0x188666 of _0x5be949){_0x188666[_0x3690f4(0x85a)](_0x37b98b[_0x3690f4(0x1d9)]);const _0x3dbd53=String(RegExp['$1'])[_0x3690f4(0xabf)]()[_0x3690f4(0xb7d)](),_0x56a265=String(RegExp['$2']),_0x2c4ed6=Number(RegExp['$3'])*0.01;if(_0x3dbd53!==_0x1924d2)continue;if(_0x574c31===Game_Action[_0x3690f4(0x7b8)]&&_0x56a265[_0x3690f4(0x85a)](/CERTAIN/i))_0x258a5c+=_0x2c4ed6;else{if(_0x574c31===Game_Action['HITTYPE_PHYSICAL']&&_0x56a265[_0x3690f4(0x85a)](/PHYS/i))_0x258a5c+=_0x2c4ed6;else _0x574c31===Game_Action[_0x3690f4(0xba6)]&&_0x56a265[_0x3690f4(0x85a)](/MAGIC/i)&&(_0x258a5c+=_0x2c4ed6);}}}return _0x258a5c;},Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x558)]=function(_0x5144a3){const _0x2fd759=_0x478a06;_0x5144a3=_0x5144a3[_0x2fd759(0xabf)]()[_0x2fd759(0xb7d)]();const _0x2c734a=VisuMZ[_0x2fd759(0x1a5)][_0x2fd759(0x8e2)];for(const _0x305068 of this[_0x2fd759(0x7f4)]()){if(!_0x305068)continue;const _0x533660=_0x305068[_0x2fd759(0x39c)]||'';if(_0x533660[_0x2fd759(0x85a)](_0x2c734a[_0x2fd759(0x525)]))return!![];if(_0x5144a3==='HP'&&_0x533660['match'](_0x2c734a[_0x2fd759(0x99c)]))return!![];if(_0x5144a3==='MP'&&_0x533660[_0x2fd759(0x85a)](_0x2c734a['disarmMpLifeSteal']))return!![];}return![];},Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x871)]=function(_0x5d82f9){const _0x2f1802=_0x478a06;_0x5d82f9=_0x5d82f9['toUpperCase']()[_0x2f1802(0xb7d)]();const _0x466f86=VisuMZ[_0x2f1802(0x1a5)][_0x2f1802(0x8e2)];for(const _0x3118a1 of this[_0x2f1802(0x7f4)]()){if(!_0x3118a1)continue;const _0x58721a=_0x3118a1[_0x2f1802(0x39c)]||'';if(_0x58721a[_0x2f1802(0x85a)](_0x466f86[_0x2f1802(0x9ea)]))return!![];if(_0x5d82f9==='HP'&&_0x58721a['match'](_0x466f86[_0x2f1802(0x3b7)]))return!![];if(_0x5d82f9==='MP'&&_0x58721a['match'](_0x466f86[_0x2f1802(0xa3b)]))return!![];}return![];},Game_BattlerBase['prototype'][_0x478a06(0x218)]=function(_0xdc7b98){const _0x385466=_0x478a06;_0xdc7b98=_0xdc7b98[_0x385466(0xabf)]()[_0x385466(0xb7d)]();const _0x4fc5ce=VisuMZ[_0x385466(0x1a5)][_0x385466(0x8e2)];for(const _0x22d537 of this[_0x385466(0x7f4)]()){if(!_0x22d537)continue;const _0x56e46e=_0x22d537[_0x385466(0x39c)]||'';if(_0x56e46e['match'](_0x4fc5ce[_0x385466(0x331)]))return!![];if(_0xdc7b98==='HP'&&_0x56e46e[_0x385466(0x85a)](_0x4fc5ce['guardHpLifeSteal']))return!![];if(_0xdc7b98==='MP'&&_0x56e46e[_0x385466(0x85a)](_0x4fc5ce[_0x385466(0xbf0)]))return!![];}return![];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x750)]=Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x2ef)],Game_BattlerBase['prototype'][_0x478a06(0x2ef)]=function(){const _0x1ca4d0=_0x478a06;VisuMZ[_0x1ca4d0(0x1a5)]['Game_BattlerBase_initMembers'][_0x1ca4d0(0x21e)](this),this['initMembersBattleCore']();},Game_BattlerBase[_0x478a06(0x9c5)]['initMembersBattleCore']=function(){const _0x28a3de=_0x478a06;this[_0x28a3de(0x940)]=![];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x582)]=Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x85c)],Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x85c)]=function(){const _0x1e0a00=_0x478a06;this[_0x1e0a00(0xb8a)]={},VisuMZ[_0x1e0a00(0x1a5)]['Game_BattlerBase_refresh'][_0x1e0a00(0x21e)](this);},Game_BattlerBase['prototype'][_0x478a06(0x255)]=function(_0x7881e7){const _0x36da8d=_0x478a06;return this['_cache']=this[_0x36da8d(0xb8a)]||{},this['_cache'][_0x7881e7]!==undefined;},Game_BattlerBase['prototype'][_0x478a06(0x1db)]=function(){const _0x3973fa=_0x478a06;if(this[_0x3973fa(0xb8a)]['hardDamageCap']!==undefined)return this[_0x3973fa(0xb8a)][_0x3973fa(0x1db)];const _0x39ea46=/<DAMAGE CAP:[ ](\d+)>/i,_0x1c2ee8=this[_0x3973fa(0x7f4)]()['map'](_0x2ba7c1=>_0x2ba7c1&&_0x2ba7c1[_0x3973fa(0x39c)][_0x3973fa(0x85a)](_0x39ea46)?Number(RegExp['$1']):0x0);let _0x3775ba=_0x1c2ee8[_0x3973fa(0x496)]>0x0?Math['max'](..._0x1c2ee8):0x0;if(_0x3775ba<=0x0)_0x3775ba=VisuMZ[_0x3973fa(0x1a5)][_0x3973fa(0x468)][_0x3973fa(0x7fa)][_0x3973fa(0x2e0)];return this[_0x3973fa(0xb8a)]['hardDamageCap']=_0x3775ba,this[_0x3973fa(0xb8a)][_0x3973fa(0x1db)];},Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x31b)]=function(){const _0x20335b=_0x478a06;if(this[_0x20335b(0xb8a)][_0x20335b(0x51e)]!==undefined)return this[_0x20335b(0xb8a)][_0x20335b(0x51e)];let _0x1532d4=VisuMZ[_0x20335b(0x1a5)][_0x20335b(0x468)][_0x20335b(0x7fa)][_0x20335b(0x154)];const _0x34c9e7=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x4829cb=this[_0x20335b(0x7f4)]()[_0x20335b(0x77a)](_0x132d8a=>_0x132d8a&&_0x132d8a[_0x20335b(0x39c)][_0x20335b(0x85a)](_0x34c9e7)?Number(RegExp['$1'])/0x64:0x0);return _0x1532d4=_0x4829cb[_0x20335b(0x41f)]((_0x359d65,_0x2e250d)=>_0x359d65+_0x2e250d,_0x1532d4),this[_0x20335b(0xb8a)][_0x20335b(0x51e)]=_0x1532d4,this[_0x20335b(0xb8a)][_0x20335b(0x51e)][_0x20335b(0x411)](0.01,0x1);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x3cf)]=Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x420)],Game_BattlerBase['prototype']['die']=function(){const _0x40ffab=_0x478a06;VisuMZ[_0x40ffab(0x1a5)]['Game_BattlerBase_die'][_0x40ffab(0x21e)](this),SceneManager[_0x40ffab(0x785)]()&&(this[_0x40ffab(0x3ee)](_0x40ffab(0x30d)),this[_0x40ffab(0x737)]=undefined);},Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x244)]=function(){const _0x12cee0=_0x478a06;if(!SceneManager[_0x12cee0(0x785)]())return null;if(!SceneManager[_0x12cee0(0x143)]['_spriteset'])return null;return SceneManager[_0x12cee0(0x143)][_0x12cee0(0x526)][_0x12cee0(0xbc9)](this);},Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x39e)]=function(){const _0x5c304a=_0x478a06;return VisuMZ[_0x5c304a(0x1a5)][_0x5c304a(0x468)][_0x5c304a(0x145)][_0x5c304a(0x820)];},Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x6a2)]=function(){const _0x1091f7=_0x478a06;return VisuMZ[_0x1091f7(0x1a5)]['Settings'][_0x1091f7(0x145)][_0x1091f7(0x29c)];},Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x886)]=function(){const _0x39d752=_0x478a06;return this[_0x39d752(0x847)]&&this['isActor']()?VisuMZ['BattleCore']['Settings'][_0x39d752(0x145)][_0x39d752(0x1fb)]:VisuMZ[_0x39d752(0x1a5)][_0x39d752(0x468)]['Enemy'][_0x39d752(0x1fb)];},Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x37d)]=function(){return!![];},Game_BattlerBase[_0x478a06(0x9c5)]['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase['prototype']['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0xa1b)]=function(_0x49e3d0){const _0x35c0c8=_0x478a06;if(!_0x49e3d0)return 0x0;let _0x4d74c7=0x0;const _0x4bc774=_0x49e3d0[_0x35c0c8(0x39c)];return _0x4bc774[_0x35c0c8(0x85a)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x4d74c7+=Number(RegExp['$1'])),_0x4bc774['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x4d74c7+=Number(RegExp['$1'])),_0x4d74c7;},Game_BattlerBase['prototype'][_0x478a06(0x484)]=function(_0x5e688e){const _0x1b0439=_0x478a06;if(!_0x5e688e)return 0x0;let _0x3a1d1d=0x0;const _0x576987=_0x5e688e['note'];return _0x576987['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x3a1d1d+=Number(RegExp['$1'])),_0x576987[_0x1b0439(0x85a)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x3a1d1d+=Number(RegExp['$2'])),_0x3a1d1d;},VisuMZ['BattleCore'][_0x478a06(0x6fa)]=Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x36b)],Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x36b)]=function(_0x5e5698){const _0x1dcc47=_0x478a06;if(_0x5e5698===this[_0x1dcc47(0x495)]()&&this[_0x1dcc47(0x2de)]())return!![];return VisuMZ[_0x1dcc47(0x1a5)][_0x1dcc47(0x6fa)][_0x1dcc47(0x21e)](this,_0x5e5698);},Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x2de)]=function(){const _0x475880=_0x478a06;return this[_0x475880(0x940)];},Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x600)]=function(_0x548a6d){const _0x100496=_0x478a06;_0x548a6d?this[_0x100496(0x65d)]():this[_0x100496(0xb71)]();},Game_BattlerBase['prototype'][_0x478a06(0x65d)]=function(){const _0x282c06=_0x478a06;if(this[_0x282c06(0x9c0)]())return;this[_0x282c06(0x940)]=!![],this[_0x282c06(0x1dc)]=![];},Game_BattlerBase['prototype'][_0x478a06(0xb71)]=function(){const _0x31557b=_0x478a06,_0xc0c096=this[_0x31557b(0x1f5)]();this[_0x31557b(0x940)]=![],_0xc0c096&&this[_0x31557b(0x1dc)]&&this[_0x31557b(0x420)](),this[_0x31557b(0x1dc)]=![],this[_0x31557b(0x85c)](),this[_0x31557b(0x9c0)]()&&_0xc0c096&&(this[_0x31557b(0xa74)](),this[_0x31557b(0xc8)]());},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xa41)]=Game_Action[_0x478a06(0x9c5)]['numRepeats'],Game_Action[_0x478a06(0x9c5)][_0x478a06(0x9d8)]=function(){const _0x5251b1=_0x478a06;return this['item']()?VisuMZ[_0x5251b1(0x1a5)]['Game_Action_numRepeats'][_0x5251b1(0x21e)](this):0x0;},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x5b5)]=Game_Action[_0x478a06(0x9c5)]['setAttack'],Game_Action['prototype'][_0x478a06(0x97b)]=function(){const _0x1b94ba=_0x478a06;if(this[_0x1b94ba(0x4fe)]()&&this['subject']()['canAttack']())VisuMZ[_0x1b94ba(0x1a5)][_0x1b94ba(0x5b5)][_0x1b94ba(0x21e)](this);else BattleManager[_0x1b94ba(0x271)]?VisuMZ['BattleCore']['Game_Action_setAttack']['call'](this):this[_0x1b94ba(0x87d)]();},VisuMZ['BattleCore'][_0x478a06(0x3a0)]=Game_BattlerBase[_0x478a06(0x9c5)]['canAttack'],Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x9cd)]=function(){const _0x4c0626=_0x478a06;if(!this[_0x4c0626(0x89f)]())return![];return VisuMZ[_0x4c0626(0x1a5)][_0x4c0626(0x3a0)][_0x4c0626(0x21e)](this);},Game_BattlerBase[_0x478a06(0x9c5)]['canAttackBattleCore']=function(){const _0x3bebf1=_0x478a06;for(const _0x45052f of this[_0x3bebf1(0x7f4)]()){if(!_0x45052f)continue;if(_0x45052f['note'][_0x3bebf1(0x85a)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xa15)]=Game_Action[_0x478a06(0x9c5)][_0x478a06(0xe9)],Game_Action[_0x478a06(0x9c5)]['setGuard']=function(){const _0x31834e=_0x478a06;this[_0x31834e(0x4fe)]()[_0x31834e(0x300)]()&&VisuMZ[_0x31834e(0x1a5)][_0x31834e(0xa15)][_0x31834e(0x21e)](this);},VisuMZ['BattleCore']['Game_BattlerBase_canGuard']=Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x300)],Game_BattlerBase[_0x478a06(0x9c5)]['canGuard']=function(){const _0x5ad804=_0x478a06;if(!this[_0x5ad804(0x354)]())return![];return VisuMZ[_0x5ad804(0x1a5)][_0x5ad804(0xd0)][_0x5ad804(0x21e)](this);},Game_BattlerBase['prototype']['canGuardBattleCore']=function(){const _0x4997e2=_0x478a06;for(const _0x57e8fc of this['traitObjects']()){if(!_0x57e8fc)continue;if(_0x57e8fc[_0x4997e2(0x39c)]['match'](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x132)]=function(){const _0x3cd2c6=_0x478a06;for(const _0x3739f6 of this[_0x3cd2c6(0x7f4)]()){if(!_0x3739f6)continue;if(_0x3739f6['note'][_0x3cd2c6(0x85a)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x943)]=Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x47a)],Game_BattlerBase[_0x478a06(0x9c5)]['meetsUsableItemConditions']=function(_0xa7ef13){const _0xd9cd0d=_0x478a06;if(_0xa7ef13&&_0xa7ef13[_0xd9cd0d(0x39c)][_0xd9cd0d(0x85a)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x5883a=this[_0xd9cd0d(0xac5)]()[_0xd9cd0d(0x7bb)]();if(_0x5883a['length']===0x1&&_0x5883a[0x0]===this)return![];}return VisuMZ['BattleCore'][_0xd9cd0d(0x943)][_0xd9cd0d(0x21e)](this,_0xa7ef13);},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x2e6)]=function(){const _0x1762f6=_0x478a06;return VisuMZ[_0x1762f6(0x1a5)][_0x1762f6(0x468)][_0x1762f6(0xae0)][_0x1762f6(0xa79)];},VisuMZ[_0x478a06(0x1a5)]['Game_Battler_regenerateAll']=Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x5d4)],Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x5d4)]=function(){const _0x4c8c90=_0x478a06;if(SceneManager[_0x4c8c90(0x785)]()){if(BattleManager['isTpb']()){if(this[_0x4c8c90(0x3e7)]()<=0x0)return;}else{if($gameTroop['turnCount']()<=0x0)return;}}if(SceneManager['isSceneBattle']()&&BattleManager[_0x4c8c90(0xb72)]()&&this[_0x4c8c90(0xb7c)]===Graphics['frameCount'])return;this[_0x4c8c90(0xb7c)]=Graphics[_0x4c8c90(0x992)],SceneManager['isSceneBattle']()&&this[_0x4c8c90(0x357)](_0x4c8c90(0x8d1)),VisuMZ[_0x4c8c90(0x1a5)][_0x4c8c90(0x5a1)][_0x4c8c90(0x21e)](this),SceneManager[_0x4c8c90(0x785)]()&&(this['regenerateAllBattleCore'](),this['processBattleCoreJS'](_0x4c8c90(0xb7e)));},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x9ff)]=function(){const _0x2019ec=_0x478a06;if(SceneManager[_0x2019ec(0x785)]())for(const _0x8a2e49 of this['traitObjects']()){if(!_0x8a2e49)continue;this[_0x2019ec(0x5c9)](_0x8a2e49);}},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x5c9)]=function(_0x326e84){const _0x175d5b=_0x478a06;if(!Imported['VisuMZ_0_CoreEngine'])return;if(!SceneManager['isSceneBattle']())return;if(this[_0x175d5b(0x9c0)]())return;if(this['isHidden']())return;if(_0x326e84[_0x175d5b(0x39c)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x420343=Number(RegExp['$1']);$gameTemp[_0x175d5b(0x3a5)]([this],_0x420343,![],![]);}},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xa13)]=Game_Battler[_0x478a06(0x9c5)]['startTpbTurn'],Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x583)]=function(){const _0x595913=_0x478a06;this[_0x595913(0x357)](_0x595913(0x6b7)),VisuMZ['BattleCore'][_0x595913(0xa13)]['call'](this),this[_0x595913(0x357)](_0x595913(0x1c3));},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x149)]=Game_Battler[_0x478a06(0x9c5)]['onTurnEnd'],Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x670)]=function(){const _0x346871=_0x478a06;this['processBattleCoreJS'](_0x346871(0x13c)),VisuMZ['BattleCore']['Game_Battler_onTurnEnd'][_0x346871(0x21e)](this),VisuMZ[_0x346871(0x1a5)][_0x346871(0x468)]['Mechanics'][_0x346871(0x38a)]&&this[_0x346871(0x90b)](),this[_0x346871(0x357)](_0x346871(0x1f7));},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x357)]=function(_0x50fb5f){const _0x4fae64=_0x478a06;if(this[_0x4fae64(0x94e)]||this[_0x4fae64(0xa92)])return;const _0x48718a=VisuMZ[_0x4fae64(0x1a5)][_0x4fae64(0x468)]['Mechanics'];if(_0x48718a[_0x50fb5f])_0x48718a[_0x50fb5f]['call'](this);for(const _0x37fef2 of this['traitObjects']()){if(!_0x37fef2)continue;key=VisuMZ[_0x4fae64(0x1a5)]['createKeyJS'](_0x37fef2,_0x50fb5f),VisuMZ['BattleCore']['JS'][key]&&VisuMZ[_0x4fae64(0x1a5)]['JS'][key][_0x4fae64(0x21e)](this,this,this,_0x37fef2,0x0);}},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x278)]=function(){const _0x1c3b9=_0x478a06;return VisuMZ[_0x1c3b9(0x1a5)][_0x1c3b9(0x468)][_0x1c3b9(0x145)][_0x1c3b9(0x93a)]||![];},Game_Battler['prototype']['isChanting']=function(){const _0x148b73=_0x478a06;if(this[_0x148b73(0x7e4)]()){if(this[_0x148b73(0x278)]()){if(this[_0x148b73(0xa66)][_0x148b73(0x3cb)](_0x389eb8=>_0x389eb8[_0x148b73(0x8dd)]()&&_0x389eb8[_0x148b73(0xa71)]()))return!![];}else{if(this[_0x148b73(0xa66)][_0x148b73(0x3cb)](_0x42e1b5=>_0x42e1b5[_0x148b73(0x8dd)]()&&_0x42e1b5[_0x148b73(0x653)]()))return!![];}}if(BattleManager[_0x148b73(0xb72)]()&&this[_0x148b73(0x874)]===_0x148b73(0x23f))return this[_0x148b73(0x278)]()?this[_0x148b73(0x767)]()&&this[_0x148b73(0x767)]()[_0x148b73(0x8dd)]()&&this['currentAction']()[_0x148b73(0xa71)]():this['currentAction']()&&this[_0x148b73(0x767)]()[_0x148b73(0x8dd)]()&&this[_0x148b73(0x767)]()[_0x148b73(0x653)]();return![];},Game_Battler[_0x478a06(0x9c5)]['isCharging']=function(){const _0x441dce=_0x478a06;if(BattleManager[_0x441dce(0xb72)]()&&this[_0x441dce(0x874)]==='casting')return this['chantStyle']()?this[_0x441dce(0x767)]()&&this[_0x441dce(0x767)]()['item']()&&!this['currentAction']()[_0x441dce(0xa71)]():this['currentAction']()&&this[_0x441dce(0x767)]()[_0x441dce(0x8dd)]()&&!this[_0x441dce(0x767)]()[_0x441dce(0x653)]();return![];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x15d)]=Game_Battler['prototype']['clearDamagePopup'],Game_Battler[_0x478a06(0x9c5)]['clearDamagePopup']=function(){const _0x3de653=_0x478a06;VisuMZ['BattleCore'][_0x3de653(0x15d)][_0x3de653(0x21e)](this),this['_damagePopupArray']=[];},Game_Battler['prototype']['isDamagePopupRequested']=function(){const _0xce16bd=_0x478a06;if(!this[_0xce16bd(0x921)])this['clearDamagePopup']();return this[_0xce16bd(0x921)][_0xce16bd(0x496)]>0x0;},Game_Battler['prototype'][_0x478a06(0x1b0)]=function(){const _0x2019da=_0x478a06;if(!SceneManager[_0x2019da(0x785)]())return;if(BattleManager[_0x2019da(0x8bb)]())return;if(!this[_0x2019da(0x921)])this['clearDamagePopup']();this['createSeparateDamagePopups']();const _0x576b98=this[_0x2019da(0x244)]();if(_0x576b98)_0x576b98[_0x2019da(0x7fd)]();},Game_Battler[_0x478a06(0x9c5)]['createSeparateDamagePopups']=function(){const _0x2c7a14=_0x478a06,_0x5d4396=this[_0x2c7a14(0x15f)]();if(_0x5d4396[_0x2c7a14(0xbf3)]||_0x5d4396[_0x2c7a14(0x8ed)]){const _0x5a9c05=JsonEx[_0x2c7a14(0xb51)](_0x5d4396);_0x5a9c05[_0x2c7a14(0x6a5)]=![],_0x5a9c05[_0x2c7a14(0xa1c)]=0x0,this['_damagePopupArray'][_0x2c7a14(0x6b3)](_0x5a9c05);if(!_0x5d4396[_0x2c7a14(0x837)]&&!_0x5d4396[_0x2c7a14(0xa1c)])return;}if(_0x5d4396[_0x2c7a14(0x6a5)]){const _0x3b7f14=JsonEx['makeDeepCopy'](_0x5d4396);_0x3b7f14['missed']=![],_0x3b7f14[_0x2c7a14(0x8ed)]=![],_0x3b7f14[_0x2c7a14(0xa1c)]=0x0,this[_0x2c7a14(0x921)][_0x2c7a14(0x6b3)](_0x3b7f14);}if(_0x5d4396[_0x2c7a14(0xa1c)]!==0x0){const _0x104661=JsonEx[_0x2c7a14(0xb51)](_0x5d4396);_0x104661[_0x2c7a14(0xbf3)]=![],_0x104661[_0x2c7a14(0x8ed)]=![],_0x104661[_0x2c7a14(0x6a5)]=![],this['_damagePopupArray'][_0x2c7a14(0x6b3)](_0x104661);}},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x755)]=function(){const _0xdf9e11=_0x478a06;if(!this['_damagePopupArray'])this[_0xdf9e11(0x763)]();return VisuMZ[_0xdf9e11(0x1a5)]['Settings'][_0xdf9e11(0x7fa)][_0xdf9e11(0xa62)]?this[_0xdf9e11(0x921)]['shift']():this['_damagePopupArray'][_0xdf9e11(0x6d5)]();},Game_Battler['prototype'][_0x478a06(0x5aa)]=function(_0x51d8c9,_0x9516e){const _0x13bae4=_0x478a06;if(!SceneManager[_0x13bae4(0x785)]())return;if(BattleManager[_0x13bae4(0x8bb)]())return;if(!this[_0x13bae4(0x244)]())return;if(_0x51d8c9[_0x13bae4(0x496)]<=0x0)return;_0x9516e=_0x9516e||{},_0x9516e[_0x13bae4(0x355)]=_0x9516e[_0x13bae4(0x355)]||'#ffffff',_0x9516e[_0x13bae4(0xbb0)]=_0x9516e['flashColor']||[0x0,0x0,0x0,0x0],_0x9516e[_0x13bae4(0x417)]=_0x9516e['flashDuration']||0x0,this[_0x13bae4(0x244)]()[_0x13bae4(0x5aa)](_0x51d8c9,_0x9516e);},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x3f5)]=function(_0x300de9,_0x3b518b,_0x580329){const _0x1dd35d=_0x478a06;if(!SceneManager[_0x1dd35d(0x785)]())return;if(BattleManager[_0x1dd35d(0x8bb)]())return;if(!this[_0x1dd35d(0x244)]())return;if(_0x3b518b['length']<=0x0)return;_0x580329=_0x580329||{},_0x580329['textColor']=_0x580329[_0x1dd35d(0x355)]||_0x1dd35d(0x18e),_0x580329['flashColor']=_0x580329[_0x1dd35d(0xbb0)]||[0x0,0x0,0x0,0x0],_0x580329['flashDuration']=_0x580329[_0x1dd35d(0x417)]||0x0,this[_0x1dd35d(0x244)]()[_0x1dd35d(0x3f5)](_0x300de9,_0x3b518b,_0x580329);},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0xb62)]=function(){const _0x1ddbf4=_0x478a06;if(this[_0x1ddbf4(0xd1)]())return![];if(this[_0x1ddbf4(0x1f5)]()&&this[_0x1ddbf4(0x9c8)]())return!![];if(this[_0x1ddbf4(0x8e3)]()&&this['hasSvBattler']()){if(this[_0x1ddbf4(0x9c0)]()&&this['allowCollapse']())return![];}else{if(this[_0x1ddbf4(0x9c0)]())return![];}return!![];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x86c)]=Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x499)],Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x499)]=function(){const _0x52dbf1=_0x478a06;VisuMZ[_0x52dbf1(0x1a5)][_0x52dbf1(0x86c)][_0x52dbf1(0x21e)](this),this[_0x52dbf1(0x57e)]();},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x812)]=function(){return!![];},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0xabb)]=function(){return![];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x310)]=Game_Battler['prototype'][_0x478a06(0x2a8)],Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x2a8)]=function(_0x165e75){const _0x3de3a1=_0x478a06;VisuMZ[_0x3de3a1(0x1a5)]['Game_Battler_onBattleStart']['call'](this,_0x165e75),this[_0x3de3a1(0x730)](_0x165e75),this[_0x3de3a1(0x763)]();},Game_Battler['prototype']['onBattleStartBattleCore']=function(_0x13fff3){this['setBattlerFlip'](![]),this['_forcedHomeX']=undefined,this['_forcedHomeY']=undefined;},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x3e2)]=Game_Battler['prototype'][_0x478a06(0x581)],Game_Battler[_0x478a06(0x9c5)]['onBattleEnd']=function(){const _0x3ca39f=_0x478a06;VisuMZ[_0x3ca39f(0x1a5)][_0x3ca39f(0x3e2)][_0x3ca39f(0x21e)](this),this[_0x3ca39f(0x571)]();},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x571)]=function(){const _0x377b42=_0x478a06;this['_forcedHomeX']=undefined,this[_0x377b42(0x595)]=undefined;},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x6bf)]=Game_Battler[_0x478a06(0x9c5)][_0x478a06(0xb97)],Game_Battler[_0x478a06(0x9c5)][_0x478a06(0xb97)]=function(_0x861f00){const _0x5273dd=_0x478a06;VisuMZ[_0x5273dd(0x1a5)][_0x5273dd(0x6bf)][_0x5273dd(0x21e)](this,_0x861f00);if(!_0x861f00['isGuard']()){const _0x362f33=this[_0x5273dd(0x244)]();_0x362f33&&_0x362f33[_0x5273dd(0x2d5)]();}this[_0x5273dd(0x727)](![]);},Game_Battler[_0x478a06(0x9c5)]['performActionEndMembers']=function(){const _0xa7c578=_0x478a06;this[_0xa7c578(0x737)]=undefined;const _0x1eae6f=this['_flinched'];this['_flinched']=![];if(BattleManager['isActiveTpb']()&&this['isInputting']()){const _0x11e2cc=this[_0xa7c578(0x244)]();if(_0x11e2cc&&_0x1eae6f)_0x11e2cc['stepForward']();return;}const _0x31900d=this[_0xa7c578(0x244)]();if(_0x31900d)_0x31900d[_0xa7c578(0x89c)]();this['setBattlerFlip'](![]),this[_0xa7c578(0xc8)]();},Game_Battler['prototype'][_0x478a06(0xa20)]=function(_0x43f50e){const _0x208b69=_0x478a06;if(_0x43f50e[_0x208b69(0x56d)]())this[_0x208b69(0x688)]();else{if(_0x43f50e[_0x208b69(0x1fd)]())this[_0x208b69(0x3ee)](_0x208b69(0x7cc));else{if(_0x43f50e[_0x208b69(0xa71)]())this[_0x208b69(0x3ee)](_0x208b69(0x175));else{if(_0x43f50e[_0x208b69(0xbbd)]())[0x1,0x2,0x5,0x6]['includes'](_0x43f50e[_0x208b69(0x8dd)]()[_0x208b69(0x6b4)]['type'])?this[_0x208b69(0x688)]():this[_0x208b69(0x3ee)](_0x208b69(0x1f6));else _0x43f50e[_0x208b69(0x126)]()&&this[_0x208b69(0x3ee)](_0x208b69(0x8dd));}}}},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0xdc)]=function(){return $dataSystem['attackMotions'][0x0];},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x26a)]=function(){const _0x5dfeef=this['getAttackMotion']();return _0x5dfeef?_0x5dfeef['weaponImageId']:0x0;},Game_Battler[_0x478a06(0x9c5)]['performSubstitute']=function(_0x149242){const _0x2529ec=_0x478a06;if(!$gameSystem[_0x2529ec(0x787)]())return;const _0x2cadbb=this['battler'](),_0x3c6270=_0x149242[_0x2529ec(0x244)]();if(!_0x2cadbb||!_0x3c6270)return;const _0x3291c3=_0x3c6270[_0x2529ec(0x392)],_0x2f585c=_0x3c6270['_baseY'];this[_0x2529ec(0xa53)](_0x3291c3,_0x2f585c,0x0,![],'Linear',-0x1),_0x2cadbb['updatePosition']();const _0x5a6e23=VisuMZ['BattleCore'][_0x2529ec(0x468)][_0x2529ec(0xaef)];let _0x3279d2=(_0x3c6270[_0x2529ec(0xaad)]+_0x2cadbb[_0x2529ec(0xaad)])/0x2;_0x3279d2*=this[_0x2529ec(0x847)]()?0x1:-0x1;let _0x438558=_0x5a6e23[_0x2529ec(0xb04)]*(this['isActor']()?0x1:-0x1);_0x149242['moveBattlerDistance'](_0x3279d2,_0x438558,0x0,![],_0x2529ec(0x4df)),_0x3c6270['updatePosition']();},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x3ee)]=function(_0x26c1e8){const _0x186ce5=_0x478a06;if(SceneManager[_0x186ce5(0x785)]()){const _0x5d47f0=this[_0x186ce5(0x244)]();_0x5d47f0&&(_0x5d47f0[_0x186ce5(0x111)](_0x26c1e8),[_0x186ce5(0x348),_0x186ce5(0x9a7),_0x186ce5(0x870)]['includes'](_0x26c1e8)&&this[_0x186ce5(0x647)]());}this[_0x186ce5(0x57e)]();},Game_Battler['prototype'][_0x478a06(0x647)]=function(){},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x7ec)]=function(_0x176eda){const _0x43f16a=_0x478a06;if(SceneManager[_0x43f16a(0x785)]()){const _0x3ec357=this[_0x43f16a(0x244)]();if(_0x3ec357)_0x3ec357[_0x43f16a(0x721)](_0x176eda);}},Game_Battler[_0x478a06(0x9c5)]['startAttackWeaponAnimation']=function(){const _0xbdd339=_0x478a06;if(SceneManager[_0xbdd339(0x785)]()){const _0x15bc92=this['getAttackWeaponAnimationId']();this[_0xbdd339(0x7ec)](_0x15bc92);}},Game_Battler[_0x478a06(0x9c5)]['performCastAnimation']=function(_0x2471b6,_0x43a6ad){const _0x4caad1=_0x478a06;if(!_0x2471b6)return;if(!_0x2471b6['item']())return;if(_0x2471b6[_0x4caad1(0x56d)]())return;if(_0x2471b6['isGuard']())return;if(_0x2471b6[_0x4caad1(0x126)]())return;if($gameTemp[_0x4caad1(0x67b)])return;let _0x207508=0x0;const _0xe21209=VisuMZ['BattleCore'][_0x4caad1(0x468)]['ActionSequence'],_0x24c3f7=_0x2471b6[_0x4caad1(0x8dd)]()[_0x4caad1(0x39c)];if(_0x24c3f7[_0x4caad1(0x85a)](/<CAST ANIMATION: (\d+)>/i))_0x207508=Number(RegExp['$1']);else{if(_0x24c3f7['match'](/<NO CAST ANIMATION>/i))return;else{if(_0x2471b6[_0x4caad1(0xa23)]())_0x207508=_0xe21209[_0x4caad1(0x4b2)];else{if(_0x2471b6['isPhysical']())_0x207508=_0xe21209['CastPhysical'];else _0x2471b6[_0x4caad1(0xa71)]()&&(_0x207508=_0xe21209[_0x4caad1(0x6bb)]);}}}_0x207508>0x0&&$gameTemp[_0x4caad1(0x251)]([this],_0x207508,!!_0x43a6ad);},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x7f9)]=function(){const _0x1fc1e9=_0x478a06;SoundManager['playReflection']();let _0x590ea8=VisuMZ[_0x1fc1e9(0x1a5)][_0x1fc1e9(0x468)]['ActionSequence'][_0x1fc1e9(0x907)];_0x590ea8>0x0&&(Imported['VisuMZ_0_CoreEngine']?$gameTemp[_0x1fc1e9(0x3a5)]([this],_0x590ea8):$gameTemp['requestAnimation']([this],_0x590ea8));},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x4a0)]=function(){const _0x294a8e=_0x478a06;if(!$gameSystem[_0x294a8e(0x787)]())return![];if(!BattleManager[_0x294a8e(0xbb1)]())return![];if(!this[_0x294a8e(0x1f5)]())return![];if(this[_0x294a8e(0x8bc)]())return!![];if(this[_0x294a8e(0x966)]())return!![];if(this['_tpbChargeTime']>=0x1)return!![];return![];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x402)]=Game_Battler['prototype']['performDamage'],Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x6e3)]=function(){const _0x23dc50=_0x478a06;this[_0x23dc50(0x4a0)]()&&(this['_performDamageMotion']=!![]),VisuMZ[_0x23dc50(0x1a5)][_0x23dc50(0x402)][_0x23dc50(0x21e)](this),this['performFlinch'](),this[_0x23dc50(0x236)]();},VisuMZ['BattleCore'][_0x478a06(0x472)]=Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x243)],Game_Battler[_0x478a06(0x9c5)]['performMiss']=function(){const _0x4968f6=_0x478a06;this[_0x4968f6(0x4a0)]()&&(this['_performDamageMotion']=!![]),VisuMZ[_0x4968f6(0x1a5)][_0x4968f6(0x472)][_0x4968f6(0x21e)](this),this[_0x4968f6(0x9a4)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x424)]=Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x4ef)],Game_Battler['prototype']['performEvasion']=function(){const _0x12f0ca=_0x478a06;this[_0x12f0ca(0x4a0)]()&&(this[_0x12f0ca(0x737)]=!![]),VisuMZ[_0x12f0ca(0x1a5)][_0x12f0ca(0x424)]['call'](this),this[_0x12f0ca(0x9a4)]();},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x9a4)]=function(){const _0x59bf18=_0x478a06;if(!$gameSystem[_0x59bf18(0x787)]())return;if(this[_0x59bf18(0x662)])return;this[_0x59bf18(0x662)]=!![];const _0x59b73b=this['battler']();if(_0x59b73b)_0x59b73b[_0x59bf18(0x7a9)]();},Game_Battler['prototype']['performShakeFlinch']=function(){const _0x1d63c4=_0x478a06;if(!this[_0x1d63c4(0x812)]())return;const _0x54bc0c=VisuMZ[_0x1d63c4(0x1a5)][_0x1d63c4(0x468)][_0x1d63c4(0x145)];if(!(_0x54bc0c['ShakeFlinch']??![]))return;if(this[_0x1d63c4(0x6f5)]<=0x0)return;const _0x10a997=this[_0x1d63c4(0x244)]();if(_0x10a997){const _0x12526c=this[_0x1d63c4(0x6f5)],_0x283ef5=(_0x12526c/this['mhp'])[_0x1d63c4(0x411)](0.8,0x1),_0x22e690=_0x54bc0c[_0x1d63c4(0xae2)]??0x30,_0x20a213=_0x283ef5*_0x22e690;_0x10a997[_0x1d63c4(0x8e9)](_0x20a213,_0x283ef5);}},Game_Battler['prototype'][_0x478a06(0xc8)]=function(){const _0xafbb6b=_0x478a06;if(this[_0xafbb6b(0x9c0)]()&&this['_motionType']!==_0xafbb6b(0x30d)){this[_0xafbb6b(0x3ee)](_0xafbb6b(0x30d));return;}if(this[_0xafbb6b(0x9c0)]()&&this['_motionType']==='dead')return;if(!!this[_0xafbb6b(0xb2b)])return;if(this[_0xafbb6b(0x8e3)]()){if(!this[_0xafbb6b(0x6ba)]()&&this!==BattleManager[_0xafbb6b(0x6f3)]){if(this['battler']())this[_0xafbb6b(0x244)]()[_0xafbb6b(0xaff)]();}this[_0xafbb6b(0x57e)]();return;}if(this['_motionType']===_0xafbb6b(0x57f))return;if(this[_0xafbb6b(0x9dd)]===_0xafbb6b(0x9e8)&&!BattleManager[_0xafbb6b(0x8bc)]())return;if(this[_0xafbb6b(0x9dd)]==='guard'&&!BattleManager[_0xafbb6b(0x8bc)]())return;this[_0xafbb6b(0x499)]();if(BattleManager[_0xafbb6b(0xbb1)]()&&this===BattleManager[_0xafbb6b(0x6f3)])return;if(this[_0xafbb6b(0x244)]()&&BattleManager['isInputting']()){this['battler']()[_0xafbb6b(0xaff)](),this[_0xafbb6b(0x57e)]();return;}this[_0xafbb6b(0x244)]()&&BattleManager['isActiveTpb']()&&this!==BattleManager[_0xafbb6b(0x6f3)]&&this[_0xafbb6b(0x244)]()['refreshMotion']();},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x6ba)]=function(){const _0x2fbd4e=_0x478a06;if(!this[_0x2fbd4e(0x296)]())return![];const _0x5e57fa=this[_0x2fbd4e(0x244)]();if(!_0x5e57fa)return![];const _0x257629=_0x5e57fa[_0x2fbd4e(0x80b)];if(!_0x257629)return![];const _0x4b32be=_0x257629['_motion'];return _0x4b32be&&!_0x4b32be['loop'];},Game_Battler['prototype']['isBattlerFlipped']=function(){return this['_isBattlerFlipped'];},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x727)]=function(_0x50391f){const _0x3d24fb=_0x478a06;if(!$gameSystem[_0x3d24fb(0x787)]())return;this[_0x3d24fb(0x88d)]=_0x50391f;const _0x3f5204=this[_0x3d24fb(0x244)]();if(_0x3f5204)_0x3f5204['updateFlip']();},Game_Battler['prototype']['setBattlerFacePoint']=function(_0x129761,_0x1bcdbb,_0x3d55ef){const _0x3da6a6=_0x478a06;if(!$gameSystem[_0x3da6a6(0x787)]())return;const _0x4cc5c5=this['battler']();if(!_0x4cc5c5)return;if(_0x129761===_0x4cc5c5[_0x3da6a6(0x392)])return;let _0x470884=![];if(this[_0x3da6a6(0x847)]()){if(_0x129761>_0x4cc5c5[_0x3da6a6(0x392)])_0x470884=!![];if(_0x129761<_0x4cc5c5[_0x3da6a6(0x392)])_0x470884=![];}else{if(this[_0x3da6a6(0x8e3)]()){if(_0x129761>_0x4cc5c5['_baseX'])_0x470884=![];if(_0x129761<_0x4cc5c5[_0x3da6a6(0x392)])_0x470884=!![];}};this[_0x3da6a6(0x727)](_0x3d55ef?!_0x470884:_0x470884),_0x4cc5c5[_0x3da6a6(0x44e)]();},Game_Battler[_0x478a06(0x9c5)]['moveBattlerDistance']=function(_0x44cdfd,_0x11d02e,_0x49c24e,_0x18e899,_0x5ab445){const _0x108376=_0x478a06;if(!$gameSystem[_0x108376(0x787)]())return;const _0x15de02=this[_0x108376(0x244)]();if(!_0x15de02)return;if(_0x18e899)this[_0x108376(0x618)](_0x44cdfd+_0x15de02[_0x108376(0x392)],_0x11d02e+_0x15de02[_0x108376(0xb38)],![]);_0x44cdfd+=_0x15de02[_0x108376(0x392)]-_0x15de02['_homeX'],_0x11d02e+=_0x15de02['_baseY']-_0x15de02['_homeY'],_0x15de02[_0x108376(0xa33)](_0x44cdfd,_0x11d02e,_0x49c24e);if(Imported['VisuMZ_0_CoreEngine'])_0x15de02[_0x108376(0xad5)](_0x5ab445||_0x108376(0x4df));},Game_Battler[_0x478a06(0x9c5)]['moveBattlerToPoint']=function(_0x2736b6,_0x3e2551,_0xdf6508,_0x2a653e,_0x378194,_0x242529){const _0x12e140=_0x478a06;if(!$gameSystem['isSideView']())return;const _0x4d86c0=this[_0x12e140(0x244)]();if(!_0x4d86c0)return;if(_0x2736b6===Infinity||_0x3e2551===Infinity)return;if(isNaN(_0x2736b6)||isNaN(_0x3e2551))return;_0x242529=_0x242529||0x0;if(_0x242529>0x0){if(_0x4d86c0[_0x12e140(0x392)]>_0x2736b6)_0x2736b6+=_0x4d86c0[_0x12e140(0xaad)]/0x2+_0x242529;if(_0x4d86c0[_0x12e140(0x392)]<_0x2736b6)_0x2736b6-=_0x4d86c0[_0x12e140(0xaad)]/0x2+_0x242529;}if(_0x2a653e)this['setBattlerFacePoint'](_0x2736b6,_0x3e2551,![]);_0x2736b6-=_0x4d86c0[_0x12e140(0xb22)],_0x3e2551-=_0x4d86c0[_0x12e140(0xaca)],_0x4d86c0[_0x12e140(0xa33)](_0x2736b6,_0x3e2551,_0xdf6508);if(Imported[_0x12e140(0x1a1)])_0x4d86c0[_0x12e140(0xad5)](_0x378194||_0x12e140(0x4df));},Game_Battler['prototype']['moveBattlerHomeDistance']=function(_0x309c09,_0x4ea97e,_0xe40e72,_0x26006b,_0x19157c){const _0x575093=_0x478a06;if(!$gameSystem[_0x575093(0x787)]())return;const _0x49a27a=this[_0x575093(0x244)]();if(!_0x49a27a)return;if(_0x26006b)this[_0x575093(0x618)](_0x309c09+_0x49a27a['_baseX'],_0x4ea97e+_0x49a27a[_0x575093(0xb38)],![]);_0x309c09+=_0x49a27a[_0x575093(0xb22)],_0x4ea97e+=_0x49a27a[_0x575093(0xaca)],_0x49a27a[_0x575093(0x5bb)](_0x309c09,_0x4ea97e,_0xe40e72,_0x19157c),this['_forcedHomeX']=_0x309c09,this[_0x575093(0x595)]=_0x4ea97e;},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x61e)]=function(_0x19aa4f,_0x5bd765,_0x1b196e,_0x169134,_0x3cac4a,_0x3f1f96){const _0x3d54c5=_0x478a06;if(!$gameSystem['isSideView']())return;const _0x23beb5=this[_0x3d54c5(0x244)]();if(!_0x23beb5)return;_0x3f1f96=_0x3f1f96||0x0;if(_0x3f1f96>0x0){if(_0x23beb5[_0x3d54c5(0x392)]>_0x19aa4f)_0x19aa4f+=_0x23beb5['width']/0x2+_0x3f1f96;if(_0x23beb5[_0x3d54c5(0x392)]<_0x19aa4f)_0x19aa4f-=_0x23beb5['width']/0x2+_0x3f1f96;}if(_0x169134)this[_0x3d54c5(0x618)](_0x19aa4f,_0x5bd765,![]);_0x23beb5[_0x3d54c5(0x5bb)](_0x19aa4f,_0x5bd765,_0x1b196e,_0x3cac4a),this[_0x3d54c5(0x5ab)]=_0x19aa4f,this[_0x3d54c5(0x595)]=_0x5bd765;},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x9b5)]=function(_0x4b6a41,_0x179754,_0x15dcf9){const _0x301432=_0x478a06;if(!$gameSystem['isSideView']())return;const _0x46bf40=this[_0x301432(0x244)]();if(!_0x46bf40)return;_0x46bf40[_0x301432(0x6a6)](_0x4b6a41,_0x179754,_0x15dcf9);},Game_Battler[_0x478a06(0x9c5)]['jumpBattler']=function(_0x154089,_0x419cae){const _0xd05657=_0x478a06;if(!$gameSystem['isSideView']())return;const _0x437ba8=this[_0xd05657(0x244)]();if(!_0x437ba8)return;_0x437ba8[_0xd05657(0xabc)](_0x154089,_0x419cae);},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x124)]=function(_0x438876,_0x1d35c9,_0x46e8d0,_0x27ef75){const _0x793615=_0x478a06;if(!$gameSystem['isSideView']())return;const _0x19df9f=this[_0x793615(0x244)]();if(!_0x19df9f)return;_0x19df9f[_0x793615(0x148)](_0x438876,_0x1d35c9,_0x46e8d0,_0x27ef75);},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x2bf)]=function(_0x49b809,_0x4a0415,_0x1e30ec,_0x5351ba){const _0x5f417f=_0x478a06;if(!$gameSystem[_0x5f417f(0x787)]())return;const _0x286671=this['battler']();if(!_0x286671)return;this[_0x5f417f(0x847)]()&&(_0x49b809*=-0x1,_0x4a0415*=-0x1),_0x286671[_0x5f417f(0x38c)](_0x49b809,_0x4a0415,_0x1e30ec,_0x5351ba);},Game_Battler['prototype'][_0x478a06(0x269)]=function(_0x1634fc,_0x188b44,_0x2352f3,_0x437467){const _0x3f3047=_0x478a06;if(!$gameSystem[_0x3f3047(0x787)]())return;const _0x1a947b=this[_0x3f3047(0x244)]();if(!_0x1a947b)return;_0x1a947b[_0x3f3047(0x159)](_0x1634fc,_0x188b44,_0x2352f3,_0x437467);},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x5a9)]=function(_0x48826f,_0x53d868,_0x491e66){const _0xba9057=_0x478a06;if(!$gameSystem['isSideView']())return;const _0xf588a6=this[_0xba9057(0x244)]();if(!_0xf588a6)return;_0xf588a6['startOpacity'](_0x48826f,_0x53d868,_0x491e66);},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x57e)]=function(){const _0x4c4a54=_0x478a06,_0xb700ca=!!this[_0x4c4a54(0xb2b)];this[_0x4c4a54(0xb2b)]=undefined,_0xb700ca&&(this[_0x4c4a54(0xc8)](),this['clearFreezeMotionForWeapons']());},Game_Battler['prototype']['clearFreezeMotionForWeapons']=function(){const _0x1ccde4=_0x478a06;if(!SceneManager[_0x1ccde4(0x785)]())return;const _0x2fd973=this[_0x1ccde4(0x244)]();if(!_0x2fd973)return;let _0x5f52f1=this['isActor']()?_0x2fd973['_weaponSprite']:_0x2fd973[_0x1ccde4(0x80b)][_0x1ccde4(0x3c5)];_0x5f52f1&&_0x5f52f1[_0x1ccde4(0x40f)](0x0);},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x1c0)]=function(_0x59ca45,_0x1e80a3,_0x2197a7){const _0x379267=_0x478a06;if(this[_0x379267(0x8e3)]()&&!this[_0x379267(0x296)]())return;let _0x46086c=0x0,_0x1c7c89=0x0;_0x59ca45[_0x379267(0x85a)](/ATTACK[ ](\d+)/i)&&(_0x1c7c89=Number(RegExp['$1']),_0x1c7c89--);if(this['isActor']()){const _0x33bf65=this[_0x379267(0x5a8)]();_0x46086c=_0x33bf65[_0x1c7c89]?_0x33bf65[_0x1c7c89]['wtypeId']:0x0;}else this[_0x379267(0x8e3)]()&&(_0x46086c=this['svBattlerData']()[_0x379267(0x504)]||0x0);const _0x2012bc=$dataSystem[_0x379267(0x1b8)][_0x46086c];_0x59ca45['match'](/attack/i)&&(_0x59ca45=[_0x379267(0x9a7),_0x379267(0x348),_0x379267(0x870)][_0x2012bc['type']]||_0x379267(0x348)),this[_0x379267(0xb2b)]={'motionType':_0x59ca45,'weaponImageId':_0x1e80a3?_0x2012bc[_0x379267(0x425)]:0x0,'pattern':_0x2197a7};},Game_Battler[_0x478a06(0x9c5)]['isFriendly']=function(_0x4891df){const _0x34938f=_0x478a06;if(!_0x4891df)return![];return _0x4891df[_0x34938f(0xac5)]()===this[_0x34938f(0xac5)]();},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x57b)]=function(_0x2c3cb1){const _0x510ab2=_0x478a06;if(!_0x2c3cb1)return![];return _0x2c3cb1[_0x510ab2(0x2fb)]()===this[_0x510ab2(0xac5)]();},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x346)]=function(){return![];},Game_Actor[_0x478a06(0x9c5)][_0x478a06(0x346)]=function(){const _0x15765d=_0x478a06;return this[_0x15765d(0x676)]()[_0x15765d(0x85a)](/\$/i);},Game_Enemy[_0x478a06(0x9c5)]['hasStaticSvBattler']=function(){const _0x23cb14=_0x478a06;return this[_0x23cb14(0x296)]()&&this[_0x23cb14(0x9f6)]()[_0x23cb14(0x85a)](/\$/i);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xbe7)]=Game_Actor[_0x478a06(0x9c5)][_0x478a06(0x40f)],Game_Actor[_0x478a06(0x9c5)][_0x478a06(0x40f)]=function(_0x5e6e73){const _0x3b000b=_0x478a06;VisuMZ[_0x3b000b(0x1a5)][_0x3b000b(0xbe7)][_0x3b000b(0x21e)](this,_0x5e6e73),this[_0x3b000b(0xb6b)]();},Game_Actor[_0x478a06(0x9c5)][_0x478a06(0xb6b)]=function(){const _0x3e9a02=_0x478a06;this[_0x3e9a02(0x199)]='',this[_0x3e9a02(0x421)]()&&this[_0x3e9a02(0x421)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x3e9a02(0x199)]=String(RegExp['$1']));},Game_Actor['prototype'][_0x478a06(0x7df)]=function(){const _0x8c1913=_0x478a06;if(this[_0x8c1913(0x743)]()!=='')return this[_0x8c1913(0x743)]();else{if(Imported['VisuMZ_1_MainMenuCore']&&this[_0x8c1913(0x254)]()!=='')return this[_0x8c1913(0x254)]();}return'';},Game_Actor['prototype'][_0x478a06(0x743)]=function(){const _0x2ecc2a=_0x478a06;if(this['_battlePortrait']===undefined)this['initBattlePortrait']();return this[_0x2ecc2a(0x199)];},Game_Actor['prototype'][_0x478a06(0x609)]=function(_0x115315){const _0x278a3e=_0x478a06;if(this[_0x278a3e(0x199)]===undefined)this[_0x278a3e(0xb6b)]();this[_0x278a3e(0x199)]=_0x115315;if(SceneManager[_0x278a3e(0x785)]()&&$gameParty[_0x278a3e(0x6dd)]()[_0x278a3e(0x982)](this)){const _0x69e35=SceneManager['_scene'][_0x278a3e(0x967)];_0x69e35&&_0x69e35[_0x278a3e(0x119)](this);}},Game_Actor[_0x478a06(0x9c5)][_0x478a06(0xbe9)]=function(){return!![];},Game_Actor[_0x478a06(0x9c5)][_0x478a06(0x69a)]=function(){const _0x1a505d=_0x478a06;if(!this[_0x1a505d(0x36e)]()&&BattleManager[_0x1a505d(0x3b4)])return!![];return Game_Battler[_0x1a505d(0x9c5)]['isAutoBattle'][_0x1a505d(0x21e)](this);},VisuMZ[_0x478a06(0x1a5)]['Game_Actor_makeActionList']=Game_Actor[_0x478a06(0x9c5)][_0x478a06(0x749)],Game_Actor[_0x478a06(0x9c5)][_0x478a06(0x749)]=function(){const _0x3ca6c1=_0x478a06;if(BattleManager[_0x3ca6c1(0x3b4)]&&!ConfigManager[_0x3ca6c1(0x4fa)])return this[_0x3ca6c1(0xa1d)]();else{return VisuMZ[_0x3ca6c1(0x1a5)]['Game_Actor_makeActionList']['call'](this);;}},Game_Actor[_0x478a06(0x9c5)][_0x478a06(0xa1d)]=function(){const _0x59a941=_0x478a06,_0x4bce2a=[],_0x458a47=new Game_Action(this);return _0x458a47[_0x59a941(0x97b)](),_0x4bce2a[_0x59a941(0x6b3)](_0x458a47),_0x4bce2a;},Game_Actor[_0x478a06(0x9c5)][_0x478a06(0xb47)]=function(){const _0x142f03=_0x478a06;return this[_0x142f03(0xa88)]()[_0x142f03(0x39c)]['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x142f03(0x4c7)](/[\r\n]+/):VisuMZ['BattleCore'][_0x142f03(0x468)][_0x142f03(0xa6d)]['BattleCmdList'];},Game_Actor[_0x478a06(0x9c5)]['svBattlerAnchorX']=function(){const _0xf1caa6=_0x478a06;if(this[_0xf1caa6(0xb8a)][_0xf1caa6(0x587)]!==undefined)return this['_cache'][_0xf1caa6(0x587)];return this[_0xf1caa6(0x421)]()[_0xf1caa6(0x39c)][_0xf1caa6(0x85a)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0xf1caa6(0xb8a)][_0xf1caa6(0x587)]=eval(RegExp['$1']),this[_0xf1caa6(0xb8a)][_0xf1caa6(0x610)]=eval(RegExp['$2'])):this['_cache'][_0xf1caa6(0x587)]=Game_Battler[_0xf1caa6(0x9c5)][_0xf1caa6(0x39e)]['call'](this),this[_0xf1caa6(0xb8a)][_0xf1caa6(0x587)];},Game_Actor[_0x478a06(0x9c5)][_0x478a06(0x6a2)]=function(){const _0x7f95a6=_0x478a06;if(this[_0x7f95a6(0xb8a)][_0x7f95a6(0x610)]!==undefined)return this[_0x7f95a6(0xb8a)]['svAnchorY'];return this[_0x7f95a6(0x421)]()[_0x7f95a6(0x39c)][_0x7f95a6(0x85a)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x7f95a6(0xb8a)][_0x7f95a6(0x587)]=eval(RegExp['$1']),this[_0x7f95a6(0xb8a)]['svAnchorY']=eval(RegExp['$2'])):this[_0x7f95a6(0xb8a)][_0x7f95a6(0x610)]=Game_Battler[_0x7f95a6(0x9c5)]['svBattlerAnchorY'][_0x7f95a6(0x21e)](this),this[_0x7f95a6(0xb8a)][_0x7f95a6(0x610)];},Game_Actor[_0x478a06(0x9c5)][_0x478a06(0x886)]=function(){const _0x1e1364=_0x478a06;if(this[_0x1e1364(0xb8a)]['svShadow']!==undefined)return this[_0x1e1364(0xb8a)][_0x1e1364(0x9d4)];if(this[_0x1e1364(0x421)]()[_0x1e1364(0x39c)][_0x1e1364(0x85a)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x1e1364(0xb8a)][_0x1e1364(0x9d4)]=!![];else this[_0x1e1364(0x421)]()[_0x1e1364(0x39c)][_0x1e1364(0x85a)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x1e1364(0xb8a)]['svShadow']=![]:this['_cache']['svShadow']=Game_Battler[_0x1e1364(0x9c5)]['svBattlerShadowVisible']['call'](this);return this[_0x1e1364(0xb8a)][_0x1e1364(0x9d4)];},Game_Actor[_0x478a06(0x9c5)][_0x478a06(0x37d)]=function(){const _0x500149=_0x478a06;return VisuMZ[_0x500149(0x1a5)][_0x500149(0x468)][_0x500149(0x145)]['SmoothImage'];},Game_Actor[_0x478a06(0x9c5)][_0x478a06(0x647)]=function(){const _0x45bced=_0x478a06,_0x17a3b1=this[_0x45bced(0x5a8)](),_0x24bdd0=_0x17a3b1[0x0]?_0x17a3b1[0x0][_0x45bced(0x504)]:0x0,_0x510672=$dataSystem[_0x45bced(0x1b8)][_0x24bdd0];_0x510672&&this[_0x45bced(0x7ec)](_0x510672['weaponImageId']);},Game_Actor[_0x478a06(0x9c5)][_0x478a06(0x661)]=function(_0x23317a){const _0x371524=_0x478a06;Game_Battler[_0x371524(0x9c5)][_0x371524(0x661)][_0x371524(0x21e)](this,_0x23317a),this[_0x371524(0xa20)](_0x23317a);},Game_Actor[_0x478a06(0x9c5)][_0x478a06(0xdc)]=function(){const _0x575131=_0x478a06,_0x135868=this[_0x575131(0x5a8)](),_0x4ebd39=_0x135868[0x0]?_0x135868[0x0][_0x575131(0x504)]:0x0;return $dataSystem['attackMotions'][_0x4ebd39];},Game_Actor[_0x478a06(0x9c5)][_0x478a06(0xad3)]=function(_0x549671){const _0x19414c=_0x478a06;_0x549671=_0x549671||0x1,_0x549671--;const _0x35e69b=this[_0x19414c(0x5a8)]();return _0x35e69b[_0x549671]?_0x35e69b[_0x549671]['animationId']:0x0;},Game_Actor[_0x478a06(0x9c5)]['getAttackMotionSlot']=function(_0x57ffc2){const _0x5a6303=_0x478a06;_0x57ffc2=_0x57ffc2||0x1,_0x57ffc2--;const _0x2894e6=this[_0x5a6303(0x5a8)](),_0x13ee41=_0x2894e6[_0x57ffc2]?_0x2894e6[_0x57ffc2]['wtypeId']:0x0;return $dataSystem[_0x5a6303(0x1b8)][_0x13ee41];},Game_Actor[_0x478a06(0x9c5)][_0x478a06(0x959)]=function(_0x5de2b2){const _0x18ecd0=_0x478a06;_0x5de2b2=_0x5de2b2||0x1,_0x5de2b2--;const _0x8d0648=this[_0x18ecd0(0x5a8)](),_0x5a3bca=_0x8d0648[_0x5de2b2]?_0x8d0648[_0x5de2b2][_0x18ecd0(0x504)]:0x0,_0x458d51=$dataSystem['attackMotions'][_0x5a3bca];if(_0x458d51){if(_0x458d51['type']===0x0)this[_0x18ecd0(0x3ee)](_0x18ecd0(0x9a7));else{if(_0x458d51[_0x18ecd0(0x47c)]===0x1)this['requestMotion'](_0x18ecd0(0x348));else _0x458d51[_0x18ecd0(0x47c)]===0x2&&this[_0x18ecd0(0x3ee)](_0x18ecd0(0x870));}this['startWeaponAnimation'](_0x458d51[_0x18ecd0(0x425)]);}},Game_Battler[_0x478a06(0x9c5)][_0x478a06(0x586)]=function(_0x31251b){const _0x3ed0f2=_0x478a06;if(this[_0x3ed0f2(0x847)]()){const _0x101028=this['weapons']();if(_0x101028[_0x3ed0f2(0x496)]>0x0){const _0x3e4447=_0x101028[_0x31251b];if(_0x3e4447)_0x31251b=this['equips']()[_0x3ed0f2(0x960)](_0x3e4447);}}this[_0x3ed0f2(0x400)]=_0x31251b||0x0,this[_0x3ed0f2(0xb8a)]={};},Game_Battler[_0x478a06(0x9c5)]['nextActiveWeaponSlot']=function(){const _0x3aa1ad=_0x478a06;this[_0x3aa1ad(0x400)]=this[_0x3aa1ad(0x400)]||0x0,this['_activeWeaponSlot']++,this['_cache']={};},Game_Battler['prototype'][_0x478a06(0x4d6)]=function(){const _0x22ac66=_0x478a06;this['_activeWeaponSlot']=undefined,this[_0x22ac66(0xb8a)]={};},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x387)]=Game_Actor[_0x478a06(0x9c5)][_0x478a06(0x294)],Game_Actor[_0x478a06(0x9c5)][_0x478a06(0x294)]=function(){const _0x4dccd9=_0x478a06;let _0x27d54e=VisuMZ[_0x4dccd9(0x1a5)][_0x4dccd9(0x387)][_0x4dccd9(0x21e)](this);if(this[_0x4dccd9(0x75d)])return _0x27d54e;if(this[_0x4dccd9(0x400)]!==undefined){this[_0x4dccd9(0x75d)]=!![];const _0x4f9855=this[_0x4dccd9(0xadb)]();for(let _0x45ac5e=0x0;_0x45ac5e<_0x4f9855['length'];_0x45ac5e++){_0x4f9855[_0x45ac5e]===0x1&&this['_activeWeaponSlot']!==_0x45ac5e&&(_0x27d54e[_0x45ac5e]=null);}this[_0x4dccd9(0x75d)]=undefined;}return _0x27d54e;},Window_BattleLog[_0x478a06(0x9c5)]['getDualWieldTimes']=function(_0x2b0f19){const _0x465d63=_0x478a06;return _0x2b0f19[_0x465d63(0x847)]()?_0x2b0f19[_0x465d63(0x5a8)]()['length']||0x1:0x1;},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x260)]=function(_0x99f27d,_0x43fdba){const _0xd93b3b=_0x478a06;_0x99f27d&&_0x99f27d[_0xd93b3b(0x847)]()&&_0x99f27d[_0xd93b3b(0x586)](_0x43fdba),this[_0xd93b3b(0x9d3)]();},Window_BattleLog['prototype'][_0x478a06(0x8d4)]=function(_0x6db814){const _0x3dafff=_0x478a06;_0x6db814&&_0x6db814[_0x3dafff(0x847)]()&&_0x6db814['clearActiveWeaponSlot'](),this['callNextMethod']();},Game_Actor[_0x478a06(0x9c5)][_0x478a06(0x6ac)]=function(){const _0x59c942=_0x478a06;let _0x1c6dbb=_0x59c942(0x6ac);if(this['checkCacheKey'](_0x1c6dbb))return this[_0x59c942(0xb8a)][_0x1c6dbb];return this['_cache'][_0x1c6dbb]=this['createBattleUIOffsetX'](this['actor']()),this[_0x59c942(0xb8a)][_0x1c6dbb];},Game_Actor['prototype'][_0x478a06(0x2e2)]=function(){const _0x6a0722=_0x478a06;let _0x221904=_0x6a0722(0x2e2);if(this[_0x6a0722(0x255)](_0x221904))return this['_cache'][_0x221904];return this[_0x6a0722(0xb8a)][_0x221904]=this['createBattleUIOffsetY'](this[_0x6a0722(0x421)]()),this[_0x6a0722(0xb8a)][_0x221904];},VisuMZ['BattleCore'][_0x478a06(0xa02)]=Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x40f)],Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x40f)]=function(_0x80efbf,_0x1ad31b,_0x26cb9b){const _0x510747=_0x478a06;_0x80efbf=DataManager[_0x510747(0x527)](_0x80efbf),VisuMZ[_0x510747(0x1a5)][_0x510747(0xa02)]['call'](this,_0x80efbf,_0x1ad31b,_0x26cb9b),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x510747(0xbce)](),this[_0x510747(0x1c2)](),this[_0x510747(0x556)](),this[_0x510747(0x630)](),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x510747(0x5e7)]();},Game_Enemy[_0x478a06(0x9c5)]['clearBattleCoreData']=function(){const _0x21239a=_0x478a06,_0x18ae65=VisuMZ['BattleCore'][_0x21239a(0x468)][_0x21239a(0x9b6)];this[_0x21239a(0x272)]=_0x18ae65[_0x21239a(0x83e)],this[_0x21239a(0xa82)]={},this[_0x21239a(0x762)]();},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x556)]=function(){const _0x28fb9b=_0x478a06,_0x3cd1d1=VisuMZ[_0x28fb9b(0x1a5)]['Settings']['Enemy'],_0x37afb=this['enemy']()[_0x28fb9b(0x39c)];this[_0x28fb9b(0xa82)]={'name':'','wtypeId':_0x3cd1d1[_0x28fb9b(0xbef)],'collapse':_0x3cd1d1[_0x28fb9b(0x6f7)],'motionIdle':_0x3cd1d1[_0x28fb9b(0x71d)],'width':_0x3cd1d1[_0x28fb9b(0x829)]||0x40,'height':_0x3cd1d1[_0x28fb9b(0x33c)]||0x40,'anchorX':_0x3cd1d1[_0x28fb9b(0x820)]||0x0,'anchorY':_0x3cd1d1[_0x28fb9b(0x29c)]||0x0,'shadow':_0x3cd1d1[_0x28fb9b(0x1fb)]};_0x37afb[_0x28fb9b(0x85a)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this['_attackAnimationId']=Number(RegExp['$1']));const _0x4137c5=this[_0x28fb9b(0xa82)];if(_0x37afb[_0x28fb9b(0x85a)](/<SIDEVIEW BATTLER: (.*)>/i))_0x4137c5[_0x28fb9b(0x8ff)]=String(RegExp['$1']);else{if(_0x37afb[_0x28fb9b(0x85a)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x30eb49=String(RegExp['$1'])[_0x28fb9b(0x4c7)](/[\r\n]+/)[_0x28fb9b(0x553)]('');_0x4137c5[_0x28fb9b(0x8ff)]=DataManager[_0x28fb9b(0xa3a)](_0x30eb49);}}_0x37afb['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x4137c5['anchorX']=eval(RegExp['$1']),_0x4137c5[_0x28fb9b(0x779)]=eval(RegExp['$2']));if(_0x37afb[_0x28fb9b(0x85a)](/<SIDEVIEW COLLAPSE>/i))_0x4137c5[_0x28fb9b(0x710)]=!![];else _0x37afb[_0x28fb9b(0x85a)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x4137c5[_0x28fb9b(0x710)]=![]);if(_0x37afb[_0x28fb9b(0x85a)](/<SIDEVIEW SHOW SHADOW>/i))_0x4137c5[_0x28fb9b(0x4b8)]=!![];else _0x37afb[_0x28fb9b(0x85a)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x4137c5[_0x28fb9b(0x4b8)]=![]);if(_0x37afb[_0x28fb9b(0x85a)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x4137c5[_0x28fb9b(0x19f)]=String(RegExp['$1'])['toLowerCase']()[_0x28fb9b(0xb7d)]();else{if(_0x37afb['match'](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x38b6cc=String(RegExp['$1'])[_0x28fb9b(0x4c7)](/[\r\n]+/)[_0x28fb9b(0x553)]('');_0x4137c5[_0x28fb9b(0x19f)]=DataManager[_0x28fb9b(0xa3a)](_0x38b6cc);}}_0x37afb[_0x28fb9b(0x85a)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x4137c5[_0x28fb9b(0xaad)]=Number(RegExp['$1']),_0x4137c5[_0x28fb9b(0x15a)]=Number(RegExp['$2']));if(_0x37afb[_0x28fb9b(0x85a)](/<SIDEVIEW WEAPON: (.*)>/i))_0x4137c5[_0x28fb9b(0x504)]=DataManager[_0x28fb9b(0x667)](RegExp['$1']);else{if(_0x37afb[_0x28fb9b(0x85a)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x518e17=String(RegExp['$1'])[_0x28fb9b(0x4c7)](/[\r\n]+/)[_0x28fb9b(0x553)](''),_0x20a8ea=DataManager[_0x28fb9b(0xa3a)](_0x518e17);_0x4137c5[_0x28fb9b(0x504)]=DataManager['getWtypeIdWithName'](_0x20a8ea);}}if(Imported['VisuMZ_1_ElementStatusCore']){const _0x131118=this[_0x28fb9b(0xa06)]();for(const _0x3b48fd of _0x131118){const _0x4103ee=this['traitSet'](_0x3b48fd)[_0x28fb9b(0x5b3)][_0x28fb9b(0xabf)]()[_0x28fb9b(0xb7d)](),_0x2d3c61=_0x3b48fd[_0x28fb9b(0xabf)]()[_0x28fb9b(0xb7d)]();if(_0x37afb[_0x28fb9b(0x85a)](VisuMZ[_0x28fb9b(0x516)]['RegExp'][_0x28fb9b(0xacb)[_0x28fb9b(0x177)](_0x2d3c61,_0x4103ee)]))_0x4137c5[_0x28fb9b(0x8ff)]=String(RegExp['$1']);else{if(_0x37afb[_0x28fb9b(0x85a)](VisuMZ['ElementStatusCore'][_0x28fb9b(0x2e3)][_0x28fb9b(0x4f6)[_0x28fb9b(0x177)](_0x2d3c61,_0x4103ee)])){const _0x4e0ee3=String(RegExp['$1'])[_0x28fb9b(0x4c7)](/[\r\n]+/)[_0x28fb9b(0x553)]('');_0x4137c5[_0x28fb9b(0x8ff)]=DataManager[_0x28fb9b(0xa3a)](_0x4e0ee3);}}if(_0x37afb[_0x28fb9b(0x85a)](VisuMZ['ElementStatusCore'][_0x28fb9b(0x2e3)][_0x28fb9b(0x6fb)['format'](_0x2d3c61,_0x4103ee)]))_0x4137c5['wtypeId']=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x37afb[_0x28fb9b(0x85a)](VisuMZ[_0x28fb9b(0x516)]['RegExp'][_0x28fb9b(0x8b2)[_0x28fb9b(0x177)](_0x2d3c61,_0x4103ee)])){const _0x42d571=String(RegExp['$1'])[_0x28fb9b(0x4c7)](/[\r\n]+/)[_0x28fb9b(0x553)](''),_0x5e92f3=DataManager['processRandomizedData'](_0x42d571);_0x4137c5[_0x28fb9b(0x504)]=DataManager[_0x28fb9b(0x667)](_0x5e92f3);}}if(_0x37afb['match'](VisuMZ[_0x28fb9b(0x516)][_0x28fb9b(0x2e3)][_0x28fb9b(0x639)[_0x28fb9b(0x177)](_0x2d3c61,_0x4103ee)]))_0x4137c5[_0x28fb9b(0x19f)]=String(RegExp['$1'])[_0x28fb9b(0xbd5)]()[_0x28fb9b(0xb7d)]();else{if(_0x37afb[_0x28fb9b(0x85a)](VisuMZ[_0x28fb9b(0x516)][_0x28fb9b(0x2e3)][_0x28fb9b(0x707)[_0x28fb9b(0x177)](_0x2d3c61,_0x4103ee)])){const _0x4df755=String(RegExp['$1'])['split'](/[\r\n]+/)['remove']('');_0x4137c5[_0x28fb9b(0x19f)]=DataManager[_0x28fb9b(0xa3a)](_0x4df755);}}}}},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x56a)]=function(){return this['_attackAnimationId']||0x0;},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x493)]=function(){const _0x13c780=_0x478a06;return this[_0x13c780(0x56a)]();},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0xad3)]=function(_0x4e493e){const _0xc8bee5=_0x478a06;return this[_0xc8bee5(0x56a)]();},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x812)]=function(){const _0x2f78e4=_0x478a06;if(this[_0x2f78e4(0x2f2)]()[_0x2f78e4(0x39c)][_0x2f78e4(0x85a)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x2f78e4(0x9c5)][_0x2f78e4(0x812)][_0x2f78e4(0x21e)](this);},Game_Enemy['prototype'][_0x478a06(0xabb)]=function(){const _0xdaf2c6=_0x478a06;if(this[_0xdaf2c6(0x2f2)]()[_0xdaf2c6(0x39c)]['match'](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x71b)]=function(){const _0x3b4ee2=_0x478a06,_0x249ad7=[];for(const _0x43d18b of this['enemy']()[_0x3b4ee2(0x3fd)]){const _0x4fdaf5=$dataSkills[_0x43d18b['skillId']];if(_0x4fdaf5&&!_0x249ad7['includes'](_0x4fdaf5))_0x249ad7[_0x3b4ee2(0x6b3)](_0x4fdaf5);}return _0x249ad7;},Game_Enemy[_0x478a06(0x9c5)]['battleUIOffsetX']=function(){const _0x34128f=_0x478a06;let _0x2fe625=_0x34128f(0x6ac);if(this[_0x34128f(0x255)](_0x2fe625))return this[_0x34128f(0xb8a)][_0x2fe625];return this['_cache'][_0x2fe625]=this[_0x34128f(0xa1b)](this[_0x34128f(0x2f2)]()),this[_0x34128f(0xb8a)][_0x2fe625];},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x2e2)]=function(){const _0x480a29=_0x478a06;let _0x21d6dc=_0x480a29(0x2e2);if(this['checkCacheKey'](_0x21d6dc))return this['_cache'][_0x21d6dc];return this[_0x480a29(0xb8a)][_0x21d6dc]=this[_0x480a29(0x484)](this[_0x480a29(0x2f2)]()),this[_0x480a29(0xb8a)][_0x21d6dc];},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x153)]=function(){const _0x467de2=_0x478a06;if(this['_svBattlerData']!==undefined)return this[_0x467de2(0xa82)];return this[_0x467de2(0x556)](),this[_0x467de2(0xa82)];},Game_Enemy['prototype'][_0x478a06(0x296)]=function(){const _0x4254dd=_0x478a06;return this[_0x4254dd(0x153)]()['name']!=='';},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x9f6)]=function(){const _0x2da8bb=_0x478a06;return this[_0x2da8bb(0x153)]()[_0x2da8bb(0x8ff)];},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x37d)]=function(){const _0x2be6b0=_0x478a06;return this[_0x2be6b0(0x296)]()?VisuMZ[_0x2be6b0(0x1a5)][_0x2be6b0(0x468)][_0x2be6b0(0x145)]['SmoothImage']:VisuMZ[_0x2be6b0(0x1a5)][_0x2be6b0(0x468)][_0x2be6b0(0x9b6)][_0x2be6b0(0x6cd)];},Game_Enemy['prototype'][_0x478a06(0x661)]=function(_0x57d005){const _0x3c504d=_0x478a06;Game_Battler[_0x3c504d(0x9c5)][_0x3c504d(0x661)][_0x3c504d(0x21e)](this,_0x57d005);if(this[_0x3c504d(0x296)]())this[_0x3c504d(0xa20)](_0x57d005);},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x688)]=function(){const _0x1b718d=_0x478a06,_0x3a5455=this[_0x1b718d(0x153)]()['wtypeId']||0x0,_0x455280=$dataSystem[_0x1b718d(0x1b8)][_0x3a5455];if(_0x455280){if(_0x455280['type']===0x0)this[_0x1b718d(0x3ee)](_0x1b718d(0x9a7));else{if(_0x455280[_0x1b718d(0x47c)]===0x1)this['requestMotion']('swing');else _0x455280[_0x1b718d(0x47c)]===0x2&&this[_0x1b718d(0x3ee)](_0x1b718d(0x870));}}},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x647)]=function(){const _0x2fb59a=_0x478a06,_0x4c5d4c=this[_0x2fb59a(0x153)]()[_0x2fb59a(0x504)]||0x0,_0xa16a0a=$dataSystem['attackMotions'][_0x4c5d4c];_0xa16a0a&&this[_0x2fb59a(0x7ec)](_0xa16a0a['weaponImageId']);},Game_Enemy[_0x478a06(0x9c5)]['getAttackMotion']=function(){const _0x3db609=_0x478a06,_0x3ac4ea=this[_0x3db609(0x153)]()[_0x3db609(0x504)]||0x0;return $dataSystem[_0x3db609(0x1b8)][_0x3ac4ea];},Game_Enemy[_0x478a06(0x9c5)]['getAttackMotionSlot']=function(_0x366619){const _0x56a05f=_0x478a06;return this[_0x56a05f(0xdc)]();},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x6e3)]=function(){const _0x11c82d=_0x478a06;Game_Battler['prototype'][_0x11c82d(0x6e3)][_0x11c82d(0x21e)](this),this[_0x11c82d(0xbe9)]()&&this[_0x11c82d(0x296)]()&&this[_0x11c82d(0x3ee)](_0x11c82d(0x6b4)),SoundManager['playEnemyDamage']();},Game_Enemy['prototype'][_0x478a06(0x4ef)]=function(){const _0x106994=_0x478a06;Game_Battler[_0x106994(0x9c5)][_0x106994(0x4ef)]['call'](this),this[_0x106994(0x3ee)]('evade');},Game_Enemy['prototype'][_0x478a06(0x80c)]=function(){const _0x490266=_0x478a06;Game_Battler[_0x490266(0x9c5)][_0x490266(0x80c)][_0x490266(0x21e)](this),this[_0x490266(0x3ee)](_0x490266(0x7f6));},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x375)]=function(){const _0x17748e=_0x478a06;Game_Battler[_0x17748e(0x9c5)][_0x17748e(0x375)]['call'](this),this['performAttack']();},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x73b)]=function(){const _0x757721=_0x478a06;if(this[_0x757721(0x296)]()){if(this[_0x757721(0x629)]()>=0x1)return!![];return this[_0x757721(0x153)]()['collapse'];}else return!![];},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x39e)]=function(){const _0x4562b0=_0x478a06;return this[_0x4562b0(0x153)]()[_0x4562b0(0xb53)];},Game_Enemy['prototype'][_0x478a06(0x6a2)]=function(){const _0x312287=_0x478a06;return this[_0x312287(0x153)]()[_0x312287(0x779)];},Game_Enemy['prototype'][_0x478a06(0x886)]=function(){const _0x5a52b0=_0x478a06;return this[_0x5a52b0(0x153)]()['shadow'];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x77e)]=Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0xa54)],Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0xa54)]=function(_0x5cb791){const _0x1579bc=_0x478a06;VisuMZ[_0x1579bc(0x1a5)][_0x1579bc(0x77e)][_0x1579bc(0x21e)](this,_0x5cb791),this[_0x1579bc(0x1c2)](),this['setupBattleCoreData']();const _0x22e1fa=this[_0x1579bc(0x244)]();_0x22e1fa&&(_0x22e1fa[_0x1579bc(0x31e)]=undefined,_0x22e1fa['setBattler'](this));},Game_Enemy['prototype'][_0x478a06(0x762)]=function(){const _0x1e7f75=_0x478a06,_0x3b2b40=VisuMZ[_0x1e7f75(0x1a5)][_0x1e7f75(0x468)][_0x1e7f75(0x9b6)];this[_0x1e7f75(0x52b)]=_0x3b2b40['NameDamageVisibility']??0x0;},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x290)]=function(){const _0x30c82b=_0x478a06;return this[_0x30c82b(0x52b)]&&this[_0x30c82b(0x52b)]>0x0;},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x433)]=function(){const _0x5153e9=_0x478a06;this[_0x5153e9(0x52b)]&&this[_0x5153e9(0x52b)]>0x0&&this[_0x5153e9(0x52b)]--;},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0xa60)]=function(){const _0xb33154=_0x478a06;this[_0xb33154(0x52b)]=0x0;},Game_Enemy[_0x478a06(0x9c5)]['setupBattleCoreAspects']=function(){const _0x599c37=_0x478a06;this[_0x599c37(0x687)]();const _0x5acb31=this[_0x599c37(0x2f2)]()[_0x599c37(0x39c)]||'';if(_0x5acb31[_0x599c37(0x85a)](/<ASPECT NAME:[ ](.*)>/i)){const _0x26408a=String(RegExp['$1']);this[_0x599c37(0xb29)]()['name']=_0x26408a['format'](this[_0x599c37(0x9ae)]());}_0x5acb31[_0x599c37(0x85a)](/<ASPECT ICON:[ ](\d+)>/i)&&(this[_0x599c37(0xb29)]()[_0x599c37(0x4b7)]=Number(RegExp['$1'])),_0x5acb31[_0x599c37(0x85a)](/<ASPECT COLOR:[ ](.*)>/i)&&(this[_0x599c37(0xb29)]()[_0x599c37(0xb46)]=String(RegExp['$1'])),_0x5acb31[_0x599c37(0x85a)](/<ASPECT DESCRIPTION>\s*([\s\S]*)\s*<\/ASPECT DESCRIPTION>/i)&&(this['getAspectData']()[_0x599c37(0x42b)]=String(RegExp['$1']));},Game_Enemy['prototype']['clearBattleCoreAspects']=function(){const _0x358b88=_0x478a06,_0x17346a=VisuMZ[_0x358b88(0x1a5)][_0x358b88(0x468)][_0x358b88(0x9b6)][_0x358b88(0x887)]??_0x358b88(0xa27);this[_0x358b88(0x9cc)]={'name':_0x17346a['format'](this[_0x358b88(0x9ae)]()),'iconIndex':VisuMZ[_0x358b88(0x1a5)][_0x358b88(0x468)][_0x358b88(0x9b6)][_0x358b88(0x8a5)]??0x1a,'nameColor':VisuMZ['BattleCore'][_0x358b88(0x468)][_0x358b88(0x9b6)][_0x358b88(0x842)]??'2','description':''};},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0xb29)]=function(){const _0x9170f9=_0x478a06;if(this[_0x9170f9(0x9cc)]===undefined)this['setupBattleCoreAspects']();return this[_0x9170f9(0x9cc)];},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x4a2)]=function(){const _0x2f2e73=_0x478a06;return(this[_0x2f2e73(0xb29)]()[_0x2f2e73(0x42b)]||'')[_0x2f2e73(0x496)]>0x0;},Game_BattlerBase['prototype'][_0x478a06(0x2c7)]=function(){const _0x35afc2=_0x478a06;return VisuMZ[_0x35afc2(0x1a5)][_0x35afc2(0x468)][_0x35afc2(0x7fa)][_0x35afc2(0xc0)];},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x2c7)]=function(){const _0x2fdfd7=_0x478a06,_0xb60a78=this['enemy']()?this[_0x2fdfd7(0x2f2)]()[_0x2fdfd7(0x39c)]||'':'';if(_0xb60a78[_0x2fdfd7(0x85a)](/<POPUP POSITION: HEAD>/i))return _0x2fdfd7(0x9cf);else{if(_0xb60a78[_0x2fdfd7(0x85a)](/<POPUP POSITION: CENTER>/i))return _0x2fdfd7(0x11d);else{if(_0xb60a78[_0x2fdfd7(0x85a)](/<POPUP POSITION: BASE>/i))return'base';}}return Game_BattlerBase['prototype'][_0x2fdfd7(0x2c7)][_0x2fdfd7(0x21e)](this);},Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0x641)]=function(){return 0x0;},Game_Enemy['prototype']['damagePopupOffsetX']=function(){const _0x577b2c=_0x478a06,_0x108d58=this[_0x577b2c(0x2f2)]()?this['enemy']()[_0x577b2c(0x39c)]||'':'';if(_0x108d58['match'](/<POPUP OFFSET X: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase['prototype']['damagePopupOffsetX'][_0x577b2c(0x21e)](this);},Game_BattlerBase[_0x478a06(0x9c5)]['damagePopupOffsetY']=function(){return 0x0;},Game_Enemy[_0x478a06(0x9c5)][_0x478a06(0x659)]=function(){const _0x4c7435=_0x478a06,_0x32b082=this['enemy']()?this['enemy']()[_0x4c7435(0x39c)]||'':'';if(_0x32b082[_0x4c7435(0x85a)](/<POPUP OFFSET Y: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x4c7435(0x9c5)][_0x4c7435(0x659)][_0x4c7435(0x21e)](this);},Game_Unit[_0x478a06(0x9c5)][_0x478a06(0x357)]=function(_0x3fa825){const _0x4e7556=_0x478a06;for(const _0x34b271 of this[_0x4e7556(0x645)]()){if(_0x34b271)_0x34b271[_0x4e7556(0x357)](_0x3fa825);}},Game_Unit[_0x478a06(0x9c5)][_0x478a06(0x5ae)]=function(){const _0x2803e3=_0x478a06,_0x290f44=this[_0x2803e3(0x7bb)]();return _0x290f44[Math[_0x2803e3(0x679)](_0x290f44['length'])];},VisuMZ[_0x478a06(0x1a5)]['Game_Party_addActor']=Game_Party[_0x478a06(0x9c5)][_0x478a06(0xbed)],Game_Party[_0x478a06(0x9c5)][_0x478a06(0xbed)]=function(_0x1075db){const _0x3229ad=_0x478a06;VisuMZ[_0x3229ad(0x1a5)][_0x3229ad(0x161)][_0x3229ad(0x21e)](this,_0x1075db),BattleManager['refreshStatusWindow']();},VisuMZ[_0x478a06(0x1a5)]['Game_Party_removeActor']=Game_Party[_0x478a06(0x9c5)]['removeActor'],Game_Party['prototype'][_0x478a06(0xf1)]=function(_0x125165){const _0xcecc5b=_0x478a06;VisuMZ[_0xcecc5b(0x1a5)]['Game_Party_removeActor'][_0xcecc5b(0x21e)](this,_0x125165),BattleManager[_0xcecc5b(0x9f2)]();},VisuMZ[_0x478a06(0x1a5)]['Game_Troop_setup']=Game_Troop[_0x478a06(0x9c5)][_0x478a06(0x40f)],Game_Troop[_0x478a06(0x9c5)][_0x478a06(0x40f)]=function(_0x341674){const _0x4bb743=_0x478a06;$gameTemp[_0x4bb743(0x742)](),$gameTemp[_0x4bb743(0x3c2)](_0x341674),VisuMZ[_0x4bb743(0x1a5)][_0x4bb743(0x28b)][_0x4bb743(0x21e)](this,_0x341674),this[_0x4bb743(0xc9)]();},VisuMZ[_0x478a06(0x1a5)]['Game_Troop_expTotal']=Game_Troop[_0x478a06(0x9c5)][_0x478a06(0x7d7)],Game_Troop[_0x478a06(0x9c5)][_0x478a06(0x7d7)]=function(){const _0x109e2a=_0x478a06;let _0x1cada0=VisuMZ['BattleCore'][_0x109e2a(0x6df)][_0x109e2a(0x21e)](this);return this[_0x109e2a(0x643)]&&(_0x1cada0*=this['expRate']()),Math[_0x109e2a(0x4f5)](_0x1cada0);},Game_Troop[_0x478a06(0x9c5)][_0x478a06(0x643)]=function(){return 0x1;},Game_Troop[_0x478a06(0x9c5)][_0x478a06(0xc9)]=function(){const _0xf82f61=_0x478a06,_0x245740=DataManager[_0xf82f61(0x6d4)](this[_0xf82f61(0x1e4)]()['id']);if(_0x245740[_0xf82f61(0x85a)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x5ecc1b=RegExp['$1'][_0xf82f61(0x4c7)](',')['map'](_0x4dd6bb=>Number(_0x4dd6bb));this['checkExtendTroopCompatibility'](),this[_0xf82f61(0x7ad)](_0x5ecc1b);}},Game_Troop['prototype'][_0x478a06(0x224)]=function(){const _0x38f692=_0x478a06;let _0x298734=_0x38f692(0x20a)+'\x0a';_0x298734+=_0x38f692(0x7f7),Imported[_0x38f692(0x2e4)]&&(VisuMZ['BattleSystemBTB']['version']<1.11&&(alert(_0x298734[_0x38f692(0x177)]('BTB')),SceneManager['exit']())),Imported[_0x38f692(0xbdd)]&&(VisuMZ[_0x38f692(0x18c)][_0x38f692(0x784)]<1.19&&(alert(_0x298734[_0x38f692(0x177)](_0x38f692(0xad0))),SceneManager['exit']())),Imported[_0x38f692(0x4cf)]&&(VisuMZ[_0x38f692(0x274)][_0x38f692(0x784)]<1.15&&(alert(_0x298734[_0x38f692(0x177)](_0x38f692(0x84f))),SceneManager['exit']()));},Game_Troop[_0x478a06(0x9c5)][_0x478a06(0x7ad)]=function(_0x4fab24){const _0xf256d=_0x478a06;this[_0xf256d(0x5ea)]={};for(const _0x2d806d of this[_0xf256d(0x645)]()){if(!_0x2d806d)continue;_0x2d806d[_0xf256d(0x55d)]('');}for(const _0x4c8bf0 of _0x4fab24){const _0x262281=$dataTroops[_0x4c8bf0];if(_0x262281)this[_0xf256d(0x28f)](_0x262281);}this['makeUniqueNames']();},Game_Troop[_0x478a06(0x9c5)][_0x478a06(0x28f)]=function(_0x15fa3c){const _0x6a9535=_0x478a06;for(const _0x23861a of _0x15fa3c['members']){if($dataEnemies[_0x23861a['enemyId']]){const _0x274853=_0x23861a['enemyId'],_0x5a7cfa=_0x23861a['x'],_0x28b726=_0x23861a['y'],_0x51108e=new Game_Enemy(_0x274853,_0x5a7cfa,_0x28b726);_0x23861a[_0x6a9535(0x1e9)]&&_0x51108e[_0x6a9535(0x4be)](),this[_0x6a9535(0x414)][_0x6a9535(0x6b3)](_0x51108e);}}},VisuMZ['BattleCore'][_0x478a06(0xba2)]=Game_Map['prototype'][_0x478a06(0xa7c)],Game_Map['prototype']['setupBattleback']=function(){const _0x29c9d1=_0x478a06;VisuMZ['BattleCore'][_0x29c9d1(0xba2)][_0x29c9d1(0x21e)](this),this['setupBattlebackBattleCore']();},Game_Map[_0x478a06(0x9c5)][_0x478a06(0x584)]=function(){const _0x391a6e=_0x478a06;this[_0x391a6e(0x291)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x4384e2=$dataMap[_0x391a6e(0x39c)];if(!_0x4384e2)return;const _0x348aaa=_0x4384e2['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x348aaa)for(const _0x2d7b88 of _0x348aaa){_0x2d7b88[_0x391a6e(0x85a)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x500faf=Number(RegExp['$1']),_0x51dde2=Number(RegExp['$2']),_0x2bea33=_0x51dde2===0x1?this[_0x391a6e(0x291)]:this[_0x391a6e(0x6f2)],_0x189207=String(RegExp['$3']);_0x2bea33[_0x500faf]=_0x189207;}},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xb5a)]=Game_Map['prototype'][_0x478a06(0x20c)],Game_Map['prototype']['battleback1Name']=function(){const _0x5711a5=_0x478a06;if(!BattleManager[_0x5711a5(0xbb5)]()){const _0x29f7ad=$gamePlayer[_0x5711a5(0xd6)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x5711a5(0x291)][_0x29f7ad])return this['_regionBattleback1'][_0x29f7ad];}return VisuMZ['BattleCore']['Game_Map_battleback1Name'][_0x5711a5(0x21e)](this);},VisuMZ['BattleCore'][_0x478a06(0x19c)]=Game_Map['prototype'][_0x478a06(0x805)],Game_Map['prototype'][_0x478a06(0x805)]=function(){const _0x238724=_0x478a06;if(!BattleManager[_0x238724(0xbb5)]()){const _0x3e1304=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x238724(0x6f2)][_0x3e1304])return this['_regionBattleback2'][_0x3e1304];}return VisuMZ[_0x238724(0x1a5)][_0x238724(0x19c)]['call'](this);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xb40)]=Game_Map[_0x478a06(0x9c5)][_0x478a06(0xb54)],Game_Map[_0x478a06(0x9c5)]['encounterList']=function(){const _0x2eef22=_0x478a06;let _0x28294b=JsonEx[_0x2eef22(0xb51)](VisuMZ[_0x2eef22(0x1a5)][_0x2eef22(0xb40)][_0x2eef22(0x21e)](this));return VisuMZ[_0x2eef22(0x1a5)][_0x2eef22(0x673)](_0x28294b);},VisuMZ[_0x478a06(0x1a5)]['ShuffleArray']=function(_0x2a43f0){const _0x2ea3dc=_0x478a06;var _0x4efdea,_0x359147,_0x55ce13;for(_0x55ce13=_0x2a43f0['length']-0x1;_0x55ce13>0x0;_0x55ce13--){_0x4efdea=Math[_0x2ea3dc(0xa76)](Math[_0x2ea3dc(0x8a1)]()*(_0x55ce13+0x1)),_0x359147=_0x2a43f0[_0x55ce13],_0x2a43f0[_0x55ce13]=_0x2a43f0[_0x4efdea],_0x2a43f0[_0x4efdea]=_0x359147;}return _0x2a43f0;},VisuMZ[_0x478a06(0x1a5)]['Game_Interpreter_PluginCommand']=Game_Interpreter[_0x478a06(0x9c5)]['command357'],Game_Interpreter[_0x478a06(0x9c5)][_0x478a06(0xa31)]=function(_0x43dd9d){const _0x5f2e29=_0x478a06;return $gameTemp[_0x5f2e29(0x2cb)](this),VisuMZ['BattleCore'][_0x5f2e29(0x93f)]['call'](this,_0x43dd9d);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x97e)]=Game_Interpreter['prototype'][_0x478a06(0x4b3)],Game_Interpreter[_0x478a06(0x9c5)][_0x478a06(0x4b3)]=function(){const _0x4650a6=_0x478a06;if(SceneManager[_0x4650a6(0x785)]())switch(this[_0x4650a6(0xa2e)]){case _0x4650a6(0x4f2):if(Imported[_0x4650a6(0x7b2)]){if($gameScreen[_0x4650a6(0x9d7)]()['angleDuration']>0x0)return!![];this['_waitMode']='';}break;case _0x4650a6(0x2d8):if(BattleManager[_0x4650a6(0x526)]['isAnimationPlaying']())return!![];this[_0x4650a6(0xa2e)]='';break;case'battleBalloon':if(BattleManager['_spriteset'][_0x4650a6(0x830)]())return!![];this[_0x4650a6(0xa2e)]='';break;case _0x4650a6(0x3b2):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x4650a6(0x9d7)]()[_0x4650a6(0x165)]>0x0)return!![];if($gameScreen[_0x4650a6(0x9d7)]()[_0x4650a6(0x317)]>0x0)return!![];this['_waitMode']='';}break;case'battleEffect':if(BattleManager['_spriteset'][_0x4650a6(0x27f)]())return!![];this[_0x4650a6(0xa2e)]='';break;case'battleFloat':if(BattleManager[_0x4650a6(0x526)][_0x4650a6(0x94c)]())return!![];this[_0x4650a6(0xa2e)]='';break;case _0x4650a6(0x240):if(BattleManager[_0x4650a6(0x526)][_0x4650a6(0x6d6)]())return!![];this[_0x4650a6(0xa2e)]='';break;case _0x4650a6(0xa0f):if(BattleManager[_0x4650a6(0xae5)]['isBusy']())return!![];this[_0x4650a6(0xa2e)]='';break;case'battleMove':if(BattleManager[_0x4650a6(0x526)][_0x4650a6(0x264)]())return!![];this[_0x4650a6(0xa2e)]='';break;case'battleOpacity':if(BattleManager[_0x4650a6(0x526)][_0x4650a6(0x24d)]())return!![];this[_0x4650a6(0xa2e)]='';break;case _0x4650a6(0xa68):if(BattleManager[_0x4650a6(0x526)][_0x4650a6(0x665)]())return!![];this[_0x4650a6(0xa2e)]='';break;case _0x4650a6(0x73c):if(BattleManager[_0x4650a6(0x526)]['isAnyoneSkewing']())return!![];this[_0x4650a6(0xa2e)]='';break;case _0x4650a6(0x365):if(Imported[_0x4650a6(0xa37)]){if(BattleManager[_0x4650a6(0x526)][_0x4650a6(0x695)]())return!![];this[_0x4650a6(0xa2e)]='';}break;case _0x4650a6(0x6e0):if(Imported[_0x4650a6(0x7b2)]){if($gameScreen[_0x4650a6(0x9d7)]()['skewDuration']>0x0)return!![];this[_0x4650a6(0xa2e)]='';}break;case _0x4650a6(0x84c):if(BattleManager[_0x4650a6(0x526)][_0x4650a6(0xbeb)]())return!![];this[_0x4650a6(0xa2e)]='';break;case _0x4650a6(0x8f8):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen['battleCameraData']()[_0x4650a6(0x65f)]>0x0)return!![];this['_waitMode']='';}break;case _0x4650a6(0x3a6):if(Imported[_0x4650a6(0x21d)]){if(BattleManager['_spriteset'][_0x4650a6(0x79d)]){if(BattleManager[_0x4650a6(0x526)][_0x4650a6(0x79d)]())return!![];this[_0x4650a6(0xa2e)]='battleInjectAni';}else this[_0x4650a6(0xa2e)]='';break;}break;case _0x4650a6(0xaa4):if(Imported[_0x4650a6(0x21d)]){if(BattleManager[_0x4650a6(0x526)]['isAnyoneInjectAnimating']())return!![];this[_0x4650a6(0xa2e)]='';}break;}return VisuMZ[_0x4650a6(0x1a5)][_0x4650a6(0x97e)]['call'](this);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x133)]=Game_Interpreter['prototype']['command301'],Game_Interpreter['prototype']['command301']=function(_0x37a38d){const _0xe83d6f=_0x478a06;return!$gameParty[_0xe83d6f(0xa8e)]()?this[_0xe83d6f(0x728)](_0x37a38d):VisuMZ['BattleCore'][_0xe83d6f(0x133)][_0xe83d6f(0x21e)](this,_0x37a38d);},Game_Interpreter[_0x478a06(0x9c5)][_0x478a06(0x1ed)]=function(_0x32bd92){const _0x2355ae=_0x478a06;return VisuMZ[_0x2355ae(0x1a5)][_0x2355ae(0x133)]['call'](this,_0x32bd92),BattleManager[_0x2355ae(0x333)](_0x1c6773=>{const _0x1effca=_0x2355ae;this[_0x1effca(0x4e2)][this[_0x1effca(0x70c)]]=_0x1c6773;}),!![];},VisuMZ['BattleCore'][_0x478a06(0x958)]=function(_0x4d01cc){const _0x35c1f0=_0x478a06,_0x2fa2ad=$dataCommonEvents[_0x4d01cc];if(!_0x2fa2ad)return![];if(_0x2fa2ad[_0x35c1f0(0x841)]['length']<=0x1)return![];return!![];},Game_Interpreter[_0x478a06(0x9c5)][_0x478a06(0x728)]=function(_0x1d5dd5){const _0x58603b=_0x478a06,_0x319cf2=VisuMZ[_0x58603b(0x1a5)][_0x58603b(0x468)][_0x58603b(0xae0)],_0x488032=_0x319cf2[_0x58603b(0x9af)],_0x4959b0=$dataCommonEvents[_0x488032];if(_0x4959b0&&VisuMZ[_0x58603b(0x1a5)][_0x58603b(0x958)](_0x488032)){const _0x5e3716=this[_0x58603b(0x53f)]()?this[_0x58603b(0x39d)]:0x0,_0x14b45c=_0x4959b0['list'];this[_0x58603b(0x1f4)](_0x14b45c,_0x5e3716),this['_list']=JsonEx['makeDeepCopy'](this['_list']);const _0x3eb7e3={'code':0xbc3,'indent':this[_0x58603b(0x70c)],'parameters':JsonEx[_0x58603b(0xb51)](_0x1d5dd5)};return this['_list']['splice'](this[_0x58603b(0x6c2)]+0x1,0x0,_0x3eb7e3),!![];}else return VisuMZ[_0x58603b(0x1a5)][_0x58603b(0x133)][_0x58603b(0x21e)](this,_0x1d5dd5);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x5b7)]=BattleManager['onEncounter'],BattleManager[_0x478a06(0xabe)]=function(){const _0x3ff20a=_0x478a06;VisuMZ[_0x3ff20a(0x1a5)]['BattleManager_onEncounter'][_0x3ff20a(0x21e)](this),this[_0x3ff20a(0x14e)]();},BattleManager[_0x478a06(0x14e)]=function(){const _0xdb32d6=_0x478a06,_0x34b6d1=VisuMZ[_0xdb32d6(0x1a5)][_0xdb32d6(0x468)][_0xdb32d6(0xae0)],_0x16515c=_0x34b6d1[_0xdb32d6(0x9af)];_0x16515c&&VisuMZ[_0xdb32d6(0x1a5)][_0xdb32d6(0x958)](_0x16515c)&&(this[_0xdb32d6(0x41a)]=!![],$gameTemp['reserveCommonEvent'](_0x34b6d1['BattleStartEvent']),$gameMap[_0xdb32d6(0x8ab)](),$gameMap['_interpreter'][_0xdb32d6(0x995)]=!![]),_0x34b6d1[_0xdb32d6(0x59e)]>0x0&&(this['_canLose']=!![]);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xbdc)]=Scene_Map[_0x478a06(0x9c5)][_0x478a06(0xa95)],Scene_Map[_0x478a06(0x9c5)][_0x478a06(0xa95)]=function(){const _0x2fe9b3=_0x478a06;if(BattleManager[_0x2fe9b3(0x41a)])return;VisuMZ[_0x2fe9b3(0x1a5)][_0x2fe9b3(0xbdc)][_0x2fe9b3(0x21e)](this);},VisuMZ['BattleCore'][_0x478a06(0x1b4)]=Scene_Map['prototype'][_0x478a06(0x170)],Scene_Map[_0x478a06(0x9c5)][_0x478a06(0x170)]=function(){const _0x454b59=_0x478a06;BattleManager[_0x454b59(0x41a)]?this[_0x454b59(0x82a)]():VisuMZ[_0x454b59(0x1a5)][_0x454b59(0x1b4)][_0x454b59(0x21e)](this);},Scene_Map[_0x478a06(0x9c5)][_0x478a06(0x82a)]=function(){const _0x9729fe=_0x478a06;this[_0x9729fe(0x506)]=!![];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x19e)]=SceneManager['isSceneChanging'],SceneManager[_0x478a06(0x3af)]=function(){const _0x5dc58b=_0x478a06;if(BattleManager[_0x5dc58b(0x41a)])return![];return VisuMZ[_0x5dc58b(0x1a5)]['SceneManager_isSceneChanging'][_0x5dc58b(0x21e)](this);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x4af)]=Game_Interpreter[_0x478a06(0x9c5)]['terminate'],Game_Interpreter['prototype'][_0x478a06(0x774)]=function(){const _0x177744=_0x478a06;VisuMZ[_0x177744(0x1a5)][_0x177744(0x4af)]['call'](this),this[_0x177744(0x995)]&&(this[_0x177744(0x995)]=undefined,SceneManager[_0x177744(0x143)][_0x177744(0x1a6)]());},Scene_Map[_0x478a06(0x9c5)]['battleCoreResumeLaunchBattle']=function(){const _0x76965e=_0x478a06;BattleManager['_battleCoreBattleStartEvent']=undefined,BattleManager[_0x76965e(0x99b)]=!![],this['stop']();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xaa2)]=Scene_Map['prototype'][_0x478a06(0x552)],Scene_Map[_0x478a06(0x9c5)][_0x478a06(0x552)]=function(){const _0x59608b=_0x478a06;VisuMZ[_0x59608b(0x1a5)][_0x59608b(0xaa2)][_0x59608b(0x21e)](this),BattleManager[_0x59608b(0x99b)]&&(this['_active']=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x840)]=Scene_Map['prototype'][_0x478a06(0x552)],Scene_Map[_0x478a06(0x9c5)]['initialize']=function(){const _0xc4818c=_0x478a06;VisuMZ[_0xc4818c(0x1a5)]['Scene_Map_initialize'][_0xc4818c(0x21e)](this),$gameTemp[_0xc4818c(0x742)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xb1e)]=Scene_ItemBase[_0x478a06(0x9c5)]['applyItem'],Scene_ItemBase[_0x478a06(0x9c5)][_0x478a06(0x4ad)]=function(){const _0x1df4d1=_0x478a06;VisuMZ[_0x1df4d1(0x1a5)][_0x1df4d1(0xb1e)][_0x1df4d1(0x21e)](this);if(this[_0x1df4d1(0x8dd)]()['note'][_0x1df4d1(0x85a)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x1df4d1(0x8dd)]()[_0x1df4d1(0x39c)][_0x1df4d1(0x85a)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp['_commonEventQueue']=[]),DataManager[_0x1df4d1(0x666)](this[_0x1df4d1(0x8dd)]())&&($gameTemp['_commonEventQueue']=[]);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x7a7)]=Scene_Options[_0x478a06(0x9c5)][_0x478a06(0x55a)],Scene_Options['prototype'][_0x478a06(0x55a)]=function(){const _0x520939=_0x478a06;let _0x384cf2=VisuMZ[_0x520939(0x1a5)][_0x520939(0x7a7)]['call'](this);const _0x48efa7=VisuMZ[_0x520939(0x1a5)][_0x520939(0x468)];if(_0x48efa7[_0x520939(0xa58)][_0x520939(0x96d)]&&_0x48efa7[_0x520939(0xa58)][_0x520939(0x3e4)])_0x384cf2+=0x2;if(_0x48efa7[_0x520939(0x2ae)][_0x520939(0x96d)]&&_0x48efa7[_0x520939(0x2ae)][_0x520939(0x3e4)])_0x384cf2+=0x1;return _0x384cf2;},VisuMZ[_0x478a06(0x1a5)]['Scene_Battle_initialize']=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x552)],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x552)]=function(){const _0x41924b=_0x478a06;VisuMZ[_0x41924b(0x1a5)][_0x41924b(0x101)][_0x41924b(0x21e)](this),this[_0x41924b(0x592)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xb60)]=Scene_Battle['prototype']['start'],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0xacf)]=function(){const _0x24e808=_0x478a06;SceneManager[_0x24e808(0x27b)]()?(Scene_Message['prototype'][_0x24e808(0xacf)][_0x24e808(0x21e)](this),this[_0x24e808(0x526)]&&this['_spriteset'][_0x24e808(0x865)](),BattleManager[_0x24e808(0xa07)]&&BattleManager['revertTpbCachedActor']()):(VisuMZ['BattleCore'][_0x24e808(0xb60)][_0x24e808(0x21e)](this),$gameTroop[_0x24e808(0x6a9)]());},VisuMZ['BattleCore']['Scene_Battle_stop']=Scene_Battle[_0x478a06(0x9c5)]['stop'],Scene_Battle[_0x478a06(0x9c5)]['stop']=function(){const _0xf5d6cc=_0x478a06;SceneManager[_0xf5d6cc(0xa04)]()?Scene_Message[_0xf5d6cc(0x9c5)][_0xf5d6cc(0xb2a)]['call'](this):VisuMZ[_0xf5d6cc(0x1a5)][_0xf5d6cc(0xb56)][_0xf5d6cc(0x21e)](this);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x76c)]=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x774)],Scene_Battle[_0x478a06(0x9c5)]['terminate']=function(){const _0x4b8f8c=_0x478a06;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message[_0x4b8f8c(0x9c5)][_0x4b8f8c(0x774)][_0x4b8f8c(0x21e)](this):VisuMZ['BattleCore'][_0x4b8f8c(0x76c)][_0x4b8f8c(0x21e)](this),$gameTemp[_0x4b8f8c(0x5f7)](),this[_0x4b8f8c(0x592)]();},Scene_Battle[_0x478a06(0x9c5)]['isRightInputMode']=function(){const _0x4b87a7=_0x478a06;if(ConfigManager[_0x4b87a7(0x115)]&&ConfigManager[_0x4b87a7(0x78f)]!==undefined)return ConfigManager[_0x4b87a7(0x78f)];else{if(this[_0x4b87a7(0x716)]()===_0x4b87a7(0x444))return![];else{return Scene_Message[_0x4b87a7(0x9c5)][_0x4b87a7(0x1e6)]['call'](this);;}}},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x9a3)]=Scene_Battle[_0x478a06(0x9c5)]['createCancelButton'],Scene_Battle['prototype'][_0x478a06(0xbcf)]=function(){const _0x2f91ff=_0x478a06;VisuMZ[_0x2f91ff(0x1a5)][_0x2f91ff(0x9a3)][_0x2f91ff(0x21e)](this),this['battleLayoutStyle']()===_0x2f91ff(0x444)&&this['repositionCancelButtonBorderStyle']();},Scene_Battle[_0x478a06(0x9c5)]['setVisibleUI']=function(_0x15294e){const _0x303c99=_0x478a06;_0x15294e?(this[_0x303c99(0x287)]['x']=(Graphics[_0x303c99(0xaad)]-Graphics['boxWidth'])/0x2,this[_0x303c99(0x287)]['y']=(Graphics[_0x303c99(0x15a)]-Graphics[_0x303c99(0xb21)])/0x2):(this[_0x303c99(0x287)]['x']=Graphics[_0x303c99(0xaad)]*0xa,this[_0x303c99(0x287)]['y']=Graphics[_0x303c99(0x15a)]*0xa);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x1b7)]=Scene_Battle['prototype'][_0x478a06(0xbf5)],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0xbf5)]=function(){const _0x43248c=_0x478a06,_0x5c7fe9=BattleManager['actor']();VisuMZ[_0x43248c(0x1a5)]['Scene_Battle_selectNextCommand'][_0x43248c(0x21e)](this);if(_0x5c7fe9){if(_0x5c7fe9===BattleManager[_0x43248c(0x421)]())return;if(_0x5c7fe9===BattleManager[_0x43248c(0x6f3)])return;if(_0x5c7fe9['battler']())_0x5c7fe9[_0x43248c(0x244)]()[_0x43248c(0x89c)]();}},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x918)]=Scene_Battle[_0x478a06(0x9c5)]['selectPreviousCommand'],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x2b0)]=function(){const _0x286b48=_0x478a06,_0x3cb3a6=BattleManager[_0x286b48(0x421)]();if(_0x3cb3a6&&_0x3cb3a6[_0x286b48(0x244)])_0x3cb3a6['battler']()[_0x286b48(0x89c)]();VisuMZ[_0x286b48(0x1a5)]['Scene_Battle_selectPreviousCommand']['call'](this);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x881)]=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x5c1)],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x5c1)]=function(){const _0xf9af75=_0x478a06;this[_0xf9af75(0x67c)](),VisuMZ[_0xf9af75(0x1a5)][_0xf9af75(0x881)][_0xf9af75(0x21e)](this),this['createAutoBattleWindow']();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x991)]=Scene_Battle[_0x478a06(0x9c5)]['logWindowRect'],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x10c)]=function(){const _0x3cf60c=_0x478a06;if(VisuMZ[_0x3cf60c(0x1a5)][_0x3cf60c(0x468)][_0x3cf60c(0x5c5)][_0x3cf60c(0xd7)])return VisuMZ[_0x3cf60c(0x1a5)][_0x3cf60c(0x468)][_0x3cf60c(0x5c5)][_0x3cf60c(0xd7)][_0x3cf60c(0x21e)](this);return VisuMZ[_0x3cf60c(0x1a5)][_0x3cf60c(0x991)][_0x3cf60c(0x21e)](this);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xb4c)]=Scene_Battle['prototype']['createPartyCommandWindow'],Scene_Battle[_0x478a06(0x9c5)]['createPartyCommandWindow']=function(){const _0x4a8783=_0x478a06;VisuMZ[_0x4a8783(0x1a5)][_0x4a8783(0xb4c)]['call'](this),this[_0x4a8783(0x8ee)]();},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x8ee)]=function(){const _0x287bf6=_0x478a06,_0x189ac8=this[_0x287bf6(0x75e)];_0x189ac8[_0x287bf6(0x358)](_0x287bf6(0x9d0),this[_0x287bf6(0xbac)][_0x287bf6(0x543)](this)),_0x189ac8[_0x287bf6(0x358)](_0x287bf6(0x5c8),this[_0x287bf6(0x95a)][_0x287bf6(0x543)](this));const _0x45d49a=this[_0x287bf6(0x716)]();switch(_0x45d49a){case'xp':case _0x287bf6(0x596):return this[_0x287bf6(0x75e)][_0x287bf6(0x92b)](0x1);break;}},Scene_Battle['prototype'][_0x478a06(0xbac)]=function(){const _0x32ec27=_0x478a06;BattleManager[_0x32ec27(0x3b4)]=!![],$gameParty[_0x32ec27(0x857)](),this[_0x32ec27(0xbf5)](),BattleManager[_0x32ec27(0xb72)]()&&(BattleManager['_inputting']=![]);},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x95a)]=function(){const _0x1ac34c=_0x478a06;this[_0x1ac34c(0x95e)]()?(this[_0x1ac34c(0x253)]=!![],this['_logWindow']['push'](_0x1ac34c(0x6d1),VisuMZ[_0x1ac34c(0x1a5)]['Settings'][_0x1ac34c(0xae9)]['ActiveTpbOptionsMessage'])):this[_0x1ac34c(0xd9)]();},Scene_Battle[_0x478a06(0x9c5)]['isQueueOptionsMenu']=function(){return BattleManager['isActiveTpb']();},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0xd9)]=function(){const _0x457a5c=_0x478a06;this[_0x457a5c(0x253)]=![],this[_0x457a5c(0x526)][_0x457a5c(0x865)](),this[_0x457a5c(0x287)][_0x457a5c(0xbbc)]=![];if(BattleManager[_0x457a5c(0xbb5)]())($dataSystem[_0x457a5c(0x20c)]||$dataSystem['battleback2Name'])&&SceneManager[_0x457a5c(0xb23)]();else($gameMap[_0x457a5c(0x20c)]()||$gameMap[_0x457a5c(0x805)]())&&SceneManager[_0x457a5c(0xb23)]();SceneManager[_0x457a5c(0x6b3)](Scene_Options),BattleManager[_0x457a5c(0xb72)]()&&(BattleManager[_0x457a5c(0xa07)]=BattleManager[_0x457a5c(0x421)]());},VisuMZ[_0x478a06(0x1a5)]['Scene_Battle_updateBattleProcess']=Scene_Battle[_0x478a06(0x9c5)]['updateBattleProcess'],Scene_Battle[_0x478a06(0x9c5)]['updateBattleProcess']=function(){const _0x4b32a8=_0x478a06;VisuMZ[_0x4b32a8(0x1a5)][_0x4b32a8(0x13f)][_0x4b32a8(0x21e)](this);if(this[_0x4b32a8(0x253)]&&!BattleManager[_0x4b32a8(0x6f3)])this[_0x4b32a8(0xd9)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xa0d)]=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x865)],Scene_Battle['prototype'][_0x478a06(0x865)]=function(){const _0x17f15a=_0x478a06;VisuMZ[_0x17f15a(0x1a5)][_0x17f15a(0xa0d)][_0x17f15a(0x21e)](this),this[_0x17f15a(0x285)]();},Scene_Battle['prototype'][_0x478a06(0x69f)]=function(){const _0x6fee4b=_0x478a06,_0x2f0da3=this[_0x6fee4b(0xb73)]();this[_0x6fee4b(0x3bc)]=new Window_AutoBattleCancel(_0x2f0da3),this[_0x6fee4b(0x3bc)][_0x6fee4b(0x4be)](),this[_0x6fee4b(0xb9b)](this[_0x6fee4b(0x3bc)]);},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0xb73)]=function(){const _0x129e35=_0x478a06;return VisuMZ['BattleCore'][_0x129e35(0x468)][_0x129e35(0xa58)][_0x129e35(0x800)][_0x129e35(0x21e)](this);},Scene_Battle['prototype'][_0x478a06(0x592)]=function(){const _0x359b93=_0x478a06;this[_0x359b93(0x1d8)]=[];},Scene_Battle['prototype']['updateOnceParallelInterpreters']=function(){const _0x5992d5=_0x478a06;if(!this[_0x5992d5(0x1d8)])return;for(const _0x11d135 of this[_0x5992d5(0x1d8)]){_0x11d135&&_0x11d135['update']();}},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x9eb)]=function(_0x149c99){const _0x211845=_0x478a06,_0x2ac5e1=$dataCommonEvents[_0x149c99];if(!_0x2ac5e1)return;const _0x2fb3c1=new Game_BattleOnceParallelInterpreter();this[_0x211845(0xafb)](_0x2fb3c1),_0x2fb3c1[_0x211845(0x8c9)](_0x149c99);},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0xafb)]=function(_0x53ae2b){const _0x150b94=_0x478a06;this[_0x150b94(0x1d8)]=this['_onceParallelInterpreters']||[],this[_0x150b94(0x1d8)][_0x150b94(0x6b3)](_0x53ae2b);},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x48d)]=function(_0x4ea5ab){const _0xd4ca3d=_0x478a06;this['_onceParallelInterpreters']=this[_0xd4ca3d(0x1d8)]||[],this[_0xd4ca3d(0x1d8)][_0xd4ca3d(0x553)](_0x4ea5ab);},Game_Troop['prototype'][_0x478a06(0x6a9)]=function(){const _0x530846=_0x478a06;for(const _0x5450e3 of this[_0x530846(0x1e4)]()[_0x530846(0x57c)]){if(!this[_0x530846(0x416)](_0x5450e3))continue;SceneManager['_scene'][_0x530846(0x838)](_0x5450e3);}},Game_Troop['prototype']['doesPageHaveOnceParallelStart']=function(_0x3897f2){const _0x552cc7=_0x478a06;if(!_0x3897f2)return;for(const _0x5d84a7 of _0x3897f2[_0x552cc7(0x841)]){if([0x6c,0x198][_0x552cc7(0x982)](_0x5d84a7['code'])){const _0x58f7be=_0x5d84a7[_0x552cc7(0xac4)][0x0];if(_0x58f7be['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x838)]=function(_0x25f4da){const _0x61fcae=_0x478a06;if(!_0x25f4da)return;const _0xb95ac9=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0xb95ac9),_0xb95ac9[_0x61fcae(0xb65)](_0x25f4da);};function _0x56f6(_0x36b95e,_0x164d71){const _0x412f7d=_0x412f();return _0x56f6=function(_0x56f6c3,_0x52f4a2){_0x56f6c3=_0x56f6c3-0xbf;let _0x5d11df=_0x412f7d[_0x56f6c3];return _0x5d11df;},_0x56f6(_0x36b95e,_0x164d71);}function Game_BattleOnceParallelInterpreter(){const _0x1044c8=_0x478a06;this[_0x1044c8(0x552)](...arguments);}function _0x412f(){const _0x2dbed9=['_battleField','AlphaFilter','_growDuration','commandStyle','ActSeq_Zoom_Reset','COBWEB','isSideButtonLayout','cancelTargetSelectionVisibility','IconStypeNorm','isBattlerGrounded','startJump','isAffectedByBreakShield','onEncounter','toUpperCase','setHalfActionsPTB','ActSeq_Mechanics_SwapWeapon','coreEngineRepositionEnemies','Increases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','parameters','friendsUnit','_partyWindow','executeMpDamage','processDrawEnemyBattler','debuffValueFmt','_homeY','SvBattlerSolo-%1-%2','ShowReflectWait','battlerShadowScaleY','smooth','start','CTB','Destination','_commonEventIDs','attackAnimationIdSlot','animationWait','setMoveEasingType','FvAniCenterScreen','IconSet','loadBattleback2','TurnsFmt','textAlign','equipSlots','shouldDisperseDamage','_enemy','Sprite_Actor_initMembers','targetObjects','Mechanics','ActSeq_Motion_MotionType','ShakeFlinchPower','StateID','windowPadding','_logWindow','ActionAnimation','join','createActorCommandWindow','PartyCmd','focus','_dragonbonesSpriteContainer','Parse_Notetags_Action','PopupOffsetY','_totalHits','ActionSequence','previousActor','commandName','process_VisuMZ_BattleCore_Failsafes','Scene_Battle_createActorCommandWindowIBS','_inputting','isBattleSys','ActSeq_Movement_HomeMoveToTarget','WaitForEffect','autoBattleAtStart','_hideAllIcons','process_VisuMZ_BattleCore_jsFunctions','addOnceParallelInterpreter','mainSpriteScaleY','drawActorStateData','_actorWindow','refreshMotion','updateFrame','Amp','_targetFloatHeight','_weather','StepDistanceY','drawItemActorFace','setFrame','preparePartyRefresh','addBuff','nextActor','boxWidth','critical','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','COMBAT\x20LOG','Window_BattleLog_performSubstitute','message4','AS\x20USER','ActSeq_Movement_WaitForFloat','AutoBattleCancel','svActorHorzCells','setupRgbSplitImpactFilter','ACTOR_OFFSET_X','isUndecided','Param','parseForcedGameTroopSettingsBattleCore','pointX','createDistortionSprite','AGI','Window_BattleStatus_initialize','isAlwaysHidden','Scene_ItemBase_applyItem','drawItemStatus','startEnemySelection','boxHeight','_homeX','snapForBackground','textWidth','isChanting','updatePositionBattleCore','createMultiTargetWindows','pageButtonX','getAspectData','stop','_freezeMotionData','PerformAction','AS\x20TARGET','special','createString','shouldPopupDamage','PortraitScale','updateStatusWindowPosition','FullActions','ActSeq_BattleLog_WaitForBattleLog','updateAttachedSprites','_returnWindow','CriticalDuration','_baseY','ActSeq_Grid_AddTriggerToNode','updateSkew','_growX','ActSeq_Mechanics_ActiveChainInputDisable','visualHpGauge','addBattleGridMoveCommand','normal','Game_Map_encounterList','alive\x20enemies\x20not\x20target','ActSeq_Horror_GlitchRemove','createKeyJS','processHandling','flipVisualCutinVert','nameColor','battleCommands','evalDamageFormula','%1RegenerateJS','drain','process_VisuMZ_BattleCore_PreBattleCommonEvent','Scene_Battle_createPartyCommandWindow','HelpAutoBattle','performJump','AutoAddState','iterateBattler','makeDeepCopy','updateBattlebackBitmap1','anchorX','encounterList','ScaleY','Scene_Battle_stop','statusText','comboWindowOffsetY','makeTargetsBattleCoreJS','Game_Map_battleback1Name','getSpecificBattlerKeyTarget','visibilityState','actorCommandEscape','counterAttack','front\x20base','Scene_Battle_start','Exploiter','notFocusValid','Scene_Battle_onEnemyOk','removeBuff','setTroopPage','%1Apply%2JS','damageCounterWindowRect','PostStartBattleJS','createContents','lifeStealRate','initBattlePortrait','makeDamageValue','wholeActionSet','VisuMZ_4_CombatLog','helpAreaBottom','_commonEventKey','removeImmortal','isTpb','autoBattleWindowRect','PreApplyJS','processRefresh','inBattleStatusWindowRect','ReflectPlayback','autoRemovalTiming','BattleManager_endBattle','Skills','itemRect','_lastRegenFrameCount','trim','PostRegenerateJS','CriticalHitMultiplier','StateOverlayOffsetX','auto','jsAccuracyAsTarget','Sprite_Battler_isMoving','Scene_Battle_skillWindowRect','drawDarkRect','getStypeIdWithName','BattleManager_startInput','MessageWait','pageButtons','_cache','isEscapeCommandEnabled','addChildAt','getDualWieldTimes','ActSeq_ChangeAngle','Scene_Battle_isTimeActiveIBS','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','\x5cI[%2]\x5cC[16]%1\x5cC[0]','base','updateHelp','changeTextColor','weaponTypes','hitType','performActionStart','7862570BuhMjr','updateCancelButton','dimColor2','addChild','removeBattleBalloon','SETTINGS','createHelpWindowBattleCore','getCommonEventIdWithName','registerDefeatedEnemy','_back2Sprite','Game_Map_setupBattleback','_reflectionTarget','ActSeqImpact','inputting','HITTYPE_MAGICAL','IconStypeMagic','Window_BattleLog_performActionEnd','_dimmerSprite','contains','CalcActionSpeedJS','commandAutoBattle','WaitForEntrance','clearElementChanges','createTargetsJS','flashColor','isActiveTpb','createMultiTargetWindow','custom','%1\x20%2','isBattleTest','_updateDuration','normalText','process_VisuMZ_BattleCore_CreateRegExp','removeChildFromUiContainer','ComboWindow','attackStates','visible','isSkill','<CENTER>%1','_tpbNeedsPartyCommand','ConvertCount','sortDamageSprites','StyleON','HEART','loadPicture','ActSeq_Horror_GlitchCreate','makeTargets','drawItemImageXPStyle','gainCurrentActionsFTB','findTargetSprite','Window_BattleLog_performCollapse','Balloon','_endingBattle','textBaseline','initElementStatusCore','createCancelButton','_borderPortraitTargetX','enemyId','moveBattlerDistance','testApply','Window_BattleLog_performDamage','toLowerCase','isPartyCommandWindowDisabled','Window_BattleEnemy_show','basicGaugesY','_pagedownButton','MOTIONS','moveToStartPositionBattleCore','Scene_Map_updateCallMenu','VisuMZ_2_BattleSystemCTB','damageRate','isTickBased','_requestRefresh','isOverworld','battleStatusWindowAnimationContainer','itemHeight','Window_BattleLog_popupDamage','_battler','GUARD','Game_Actor_setup','Override','isSpriteVisible','Scene_Battle_startActorCommandSelection','isAnyoneSpinning','isTurnBased','addActor','TpbGaugeOffsetY','WtypeId','guardMpLifeSteal','forceAction','waitForAnimation','missed','emulateActionEffect','selectNextCommand','ACTOR_OFFSET_Y','JumpToLabel','alive\x20friends\x20not\x20user','PopupPosition','displayType','makeBattleCommand','ShowCounterWait','_shadowScaleY','makeSuccess','applyFreezeMotionFrames','angle','requestMotionRefresh','extendTroopMembers','message1','isAutoBattleCommandAdded','TRAIT_PARAM','balloonId','ARRAYSTRUCT','_inBattleStatusWindow','Game_BattlerBase_canGuard','isHidden','showPortraits','makeStateHelpText','forActor','_currentActor','regionId','BattleLogRectJS','ArRedRate','callOptions','addAutoBattleCommands','HitRate','getAttackMotion','isTpbMainPhase','isCommandEnabled','BattlebackScale','ARRAYNUM','param','command119','wait','Game_BattlerBase_allIconsIBS','initMembersBattleCore','Window_BattleActor_show','frontviewSpriteY','turnsFmt','setGuard','Sprite_Battler_startMove','getBattlePortraitOffsetX','displayTpDamage','return\x200','startTurn','lineHeight','Sprite_Battler_damageOffsetY','removeActor','SkewY','clearResult','addBattlerStates','isOpen','textAlignment','visualCutinPortraitFilename','_createColorFilter','MANUAL','_updateFilterArea','▲%1','-%1\x20MP','VisuMZ_2_HorrorEffects','processPostBattleCommonEvents','isForAliveFriend','isSpriteVS8dir','Scene_Battle_initialize','noise','_statusType','bottom','ParseItemNotetags','LIGHT-BULB','ShowHpDmg','playOkSound','gainBravePoints','select','CreateActionSequenceTargets','logWindowRect','isSTB','totalHealFmt','isPTB','DigitGrouping','forceMotion','switchToWeaponType','BaseTroopIDs','all\x20targets','uiMenuStyle','Parse_Notetags_Targets','updateShadowScale','_currentAngle','refreshActorPortrait','inputtingAction','itemHit','stateHelpFmt','center','SkewX','startInput','ActSeq_Mechanics_StateTurnsChangeBy','BattleManager_setup','ActSeq_Impact_ShockwaveEachTargets','Sprite_Enemy_updateStateSprite','spinBattler','createLowerLayer','isItem','weatherType','ActSeq_Mechanics_ArmorPenetration','PreDamageJS','addGuardCommand','Scene_Battle_onEnemyCancel','ActSeq_Mechanics_EnemyEscape','portraitType','aspect','padding','_enemySprites','Window_BattleLog_performReflection','canUseItemCommand','Game_Interpreter_command301','ActSeq_BattleLog_Clear','ActSeq_Element_NullElements','onAllActionsEnd','100%','PostEndActionJS','isVisualHpGaugeDisplayed','ArPenFlat','VisuMZ_1_MessageCore','PreEndTurnJS','autoSelect','graphicType','Scene_Battle_updateBattleProcess','resetFontSettings','adjustPosition_ScaleDown','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','_scene','slice','Actor','_injectAnimationSprite','ActSeq_BattleLog_UI','startSpin','Game_Battler_onTurnEnd','addCombatLogCommand','adjustPosition_ScaleToFit','_updateColorFilter','PreApplyAsUserJS','onEncounterBattleCore','Game_Action_testApply','parallaxScrollY','getSkillIdWithName','DamageStyleList','svBattlerData','DefaultSoftCap','ActSeq_Mechanics_Multipliers','Window_Options_addGeneralOptions','Window_BattleLog_performActionStart','isBypassDamageCap','startGrow','height','current\x20target','Window_BattleEnemy_hide','Game_Battler_clearDamagePopup','damageText','result','ActSeq_Mechanics_RemoveBuffDebuff','Game_Party_addActor','_homeEasing','PrioritySortActive','_floatDuration','cameraDuration','startMotion','onEscapeSuccess','_visibleDuration','EnableSoftCap','WaitForOpacity','removeAnimationFromContainer','mpColor','CriticalHitRate','hitIndex','ActSeq_Mechanics_PtbFullHalfAction','launchBattle','drawGauge','ActSeq_Movement_MoveToJsPoint','createChildSprite','StatusWindowSkinHide','spell','ParseAllNotetags','format','priority','BattleManager_processVictory','setColorTone','Targets2','itemCri','retrieveBattleBalloon','Game_Action_isForOpponent','onEscapeFailure','setHorrorEffectSettings','DamageStyles','Window_BattleLog_popBaseLine','Formula','applyTargetFilters','Pre','isSubjectValidForAnyoneSelect','paramBuffRate','SKILLS','PopupDuration','Frame','cancelActorInput','BattleSystemCTB','drawSingleSkillCost','#ffffff','Sprite_Damage_createChildSprite','WaitComplete','displayedParams','setSubject','faceRect','PostApplyJS','Sprite_Battler_updateMain','getBattlerFromKey','drawStates','drawActorLevel','_battlePortrait','ActSeq_Grid_AddPassiveStatesToNode','openBattleActorWindow','Game_Map_battleback2Name','ActSeq_Movement_WaitForSpin','SceneManager_isSceneChanging','motionIdle','ActSeq_Motion_ClearFreezeFrame','VisuMZ_0_CoreEngine','ActSeq_Animation_ActionAnimation','animationId','log','BattleCore','battleCoreResumeLaunchBattle','changePaintOpacity','_battlerContainer','_targetGrowX','requestRefresh','CustomFontFace','isCTB','onSkewEnd','VisuMZ_2_BattleSystemPTB','Window_BattleLog_displayMiss','startDamagePopup','powerDownColor','drawActorStateTurns','ActSeq_Mechanics_Collapse','Scene_Map_launchBattle','_itemWindow','updateBorderSprite','Scene_Battle_selectNextCommand','attackMotions','applySoftDamageCap','attackSkillId','_growY','displayMiss','WaitForJump','reserveCommonEvent','ActSeq_Impact_ColorBreak','freezeMotion','pagedown','clearBattleCoreData','PostStartTurnJS','Scene_Battle_createAllWindows_ComboWindow','attack','loop','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','setBattleAngle','setBattler','FlashColor','HelpStatus','pageOffsetX','process_VisuMZ_BattleCore_DamageStyles','_bypass_applyBattleCoreHitRateJS','_appeared','VariableDmg','createDigits','Sprite_Actor_updateBitmap','hpRate','_lineHeight','CriticalColor','StartTurnMsg','initBattleCore','_onceParallelInterpreters','lifeStealTrait','Window_ActorCommand_setup','hardDamageCap','_deathStateApplied','makeBuffName','\x5cHEXCOLOR<%1>','prepare','drawActorIcons','_visualHpGauge_JustDied','isForOpponentBattleCore','parallaxScrollX','troop','_angleWholeDuration','isRightInputMode','Targets','OffsetY','hidden','parallaxHueEnemyModifier','MUSIC-NOTE','debuffHelpFmt','command3011','gaugeLineHeight','commandNameWindowCenter','_battlerKeyCache','updateTargetValue','loadOtherActorImages','_text','setupChild','isAlive','skill','PostEndTurnJS','gainCurrentActionsETB','Opacity','restore','Shadow','VisuMZ_4_IconBalloons','isGuard','open','criticalHitFlat','updateStart','EscapeFailureJS','removedStateObjects','FaceDirection','PrioritySortActors','_forActor','delay','_skewEasing','BreakShields','CmdIconFight','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','createMainSprite','battleback1Name','AttachStateOffsetX','Actions','getItemDamageAmountTextBattleCore','nextActiveWeaponSlot','loadFaceImages','drawItemImageListStyle','icons','_targetDamage','processTouch','SwitchMissEvade','frameVisible','isGuardLifeSteal','_backAttachmentSprite','applyBattleCoreCriticalHitRateJS','gaugeBackColor','Sprite_Enemy_initVisibility','VisuMZ_3_ActSeqImpact','call','\x5cC[%1]','alterChange','performSTBExploiter','Game_BattlerBase_eraseState','Window_BattleLog_performAction','checkExtendTroopCompatibility','targetBattlerContainerOpacity','fillRect','onOpacityEnd','Scale','Scene_Battle_createHelpWindow','faceWidth','battleMove','destroy','JS\x20%1END\x20ACTION','XPSpriteYLocation','_forcedBattlers','getBattlerKeyTargetReplacement','placeGauge','positionOffsetX','setBattleZoom','setupShockwaveImpactFilter','commandEscape','performShakeFlinch','horzCells','225339yVcGTI','updateFloat','ParseWeaponNotetags','statusWindowRectDefaultStyle','alive\x20enemies','skew','ActSeq_Impact_Negative','casting','battleJump','text\x20target','_angleRevertOnFinish','performMiss','battler','ActSeq_Target_NextTarget','isClicked','numTargets','refreshCursor','selectAll','Window_BattleLog_displayActionResults','Scene_Battle_createActorCommandWindow','isMeleeSingleTargetAction','isAnyoneChangingOpacity','processCancel','isGrowing','\x5cC[4](Passive)','requestAnimation','_forceAction','_callSceneOptions','getMenuImage','checkCacheKey','startAction','usePremadeActionSequence','_damageContainer','updateHpGaugePosition','_drawTextBody','2541368JoEoMW','noSimilarSTypes','setupBlueRedInvertImpactFilter','itemWindowRect','innerWidth','setActiveWeaponSet','drawLineText','ActionStart','setFullActionsPTB','isAnyoneMoving','cancelMpLifeSteal','ActSeq_Grid_RemovePassiveStatesFromNode','setHelpWindowItem','BattleManager_selectNextCommand','growBattler','getAttackWeaponAnimationId','_skillWindow','isActionSelectionValid','valueColor','Strength','_damages','Scene_Battle_needsInputWindowChangeIBS','_bypassCanCounterCheck','_attackAnimationId','ActSeq_Mechanics_CustomDmgFormula','BattleSystemSTB','MUSIC','drawActorGraphic','isETB','chantStyle','isAlwaysVisible','Scene_Battle_windowAreaHeight','isPreviousSceneBattleTransitionable','%1▼','MP_Rate','Window_BattleStatus_drawItemImage','isEffecting','BattleManager_processDefeat','Parse_Notetags_HelpDescription','Sprite_Actor_setActorHome','isSkipPartyCommandWindow','loadEnemy','updateOnceParallelInterpreters','WaitCount2','_windowLayer','_homeWholeDuration','parallaxHue','cancel','Game_Troop_setup','ActSeq_Animation_WaitForAnimation','STR','increaseTotal','addExtendedTroopMembers','isNameTemporarilyVisible','_regionBattleback1','11685933PspDWs','cutinEnter','equips','drawEnemyBattler','hasSvBattler','partyCommandWindowRectDefaultStyle','svActor','arRedFlat','evalDamageFormulaBattleCore','DistanceAdjust','AnchorY','ActSeq_Animation_BalloonIcon','lifeSteaItem','ActSeq_Impact_Oversaturate','ATTACK','_targetY','_phase','Text','setHue','VarianceFormulaJS','alterType','createWeather','onBattleStart','startOpacity','gaugeRate','alterActionCostPTB','makeBuffHelpText','Scene_Battle_startPartyCommandSelection','HpGauge','FollowTurn','selectPreviousCommand','canUse','selectAllEnemies','itemPadding','compareEnemySprite','displayReflection','%1StartBattleJS','createStateIconSprite','EXCLAMATION','contents','Rate','BattleGridSystem','HP_Rate','setupWeaponAnimation','moveBattlerHomeDistance','skewBattler','JS\x20%1APPLY\x20%2','Reveal','placeStateIcon','guardSkillId','debuffColor','resetResultSwitches','motionType','damagePopupPosition','drawItemStyleIcon','Game_Battler_makeSpeed','drawItemImage','setLastPluginCommandInterpreter','Game_Action_isForOne','makeStateName','#%1','bitmapHeight','updateMain','HomePosJS','CalcEscapeRatioJS','autoMeleeMultiTargetActionSet','_effectDuration','stepForward','setWaitMode','_defeatedEnemies','battleAnimation','_cacheTextWidth','targetActionSet','HpGaugeOffsetX','clearBattleRefreshRequest','glitch','isImmortal','updateOpacity','DefaultHardCap','FocusX','battleUIOffsetY','RegExp','VisuMZ_2_BattleSystemBTB','NameAlwaysHidden','allowRandomSpeed','makeTargetSprites','ActSeq_Mechanics_AnalyzeWeakness','StatusWindow_RectJS','Window_BattleLog_update','declareGlobalVariables','\x5cI[%1]\x5cHEXCOLOR<%3>%2','windowskin','_opacityWholeDuration','initMembers','Sprite_Battler_initMembers','_growWholeDuration','enemy','getEnemyIdWithName','deselect','isBreakStunned','SHOW_BUTTON','VariableHeal','inHomePosition','repeatTargets','setupBattleCore','opponentsUnit','addGeneralOptions','VisualCutinEffect','drawActorSimpleStatus','Game_Action_setSubject','canGuard','DefaultDamageStyle','_baseLineStack','_angleEasing','ActSeq_Mechanics_FtbAction','Window_BattleActor_processTouch','_showWeapon','ActionCount','icon','ScaleDown','Game_Action_applyGlobal','redraw','mpDamageFmt','dead','AntiTintUiElements','maxWidth','Game_Battler_onBattleStart','setVisibleUI','ConvertActionSequenceTarget','makeCommandList','_angleDuration','isForFriendBattleCore','executeHpDamage','cameraOffsetDuration','_frontAttachmentSprite','_makeFontNameText','drawTextEx','softDamageCapRate','battleEffect','getInputButtonString','_battlerName','processForcedAction','ActSeq_Movement_Jump','Sprite_Battleback_adjustPosition','setupMotionBlurImpactFilter','gradientFillRect','Game_Action_itemHit','CmdIconItem','isActing','addShowHpGaugeCommand','addAutoBattleCommand','_lastEnemy','updateMotionCount','okButtonText','ShowSubstituteWait','skillWindowRect','getStateDisplay','updatePadding','Mirror','guardLifeSteal','battleVoices','setEventCallback','_additionalSprites','isAtbCastingState','ExtDisplayedParams','updateAngleCalculations','WaitForZoom','ANTI_TINT_UI','applyData','NameAsTarget','Height','chant','iconWidth','EnemyOffsetY','Game_Action_executeMpDamage','ActSeq_Mechanics_StbExploit','isForDeadFriend','performActionEndMembers','endBattle','ARRAYJSON','hasStaticSvBattler','_cursorArea','swing','checkTpbInputClose','EnemyOffsetX','AutoMeleeAoE','displayCritical','selectSymbol','_lastAction','process_VisuMZ_BattleCore_Action_Notetags','damageContainer','sort','extraHeight','commandRemember','canGuardBattleCore','textColor','Sprite_Enemy_setHue','processBattleCoreJS','setHandler','attachSpritesToDistortionSprite','setValue','USER-DEFINED\x203','registerCommand','Scene_Battle_updateStatusWindowPosition','Angle','Enable','turn','bitmapWidth','FlashDuration','save','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','battleProjectiles','Window_BattleLog_displayMpDamage','ClearBattleLog','jsAccuracyAsUser','buff','ParseActorNotetags','isStateResist','NameAlwaysVisible','BattleManager_processAbort','isConfused','Scene_Battle_itemWindowRect','BattleDefeatJS','globalAlpha','itemLineRect','ShowPortraits','itemEffectAddNormalState','performCounter','Window_BattleEnemy_initialize','buffHelpFmt','_updateTargetValue','addSingleSkillCommands','CmdStyle','drawDebuffs','applyAngleChange','battlerSmoothImage','Window_BattleLog_displayFailure','helpWindowRectBorderStyle','BTestBypass','commandStyleCheck','obj','mhp','createCommandVisibleJS','autoBattleStart','updateGrow','Game_Actor_equips','MotionSpeed','updateCancel','SyncBuffExpire','battleCommandName','startSkew','ActSeq_BattleVoice_PlayCommonLine','Game_Interpreter_command283','displayChangedBuffs','RevertAngle','ActSeq_Movement_WaitForJump','_baseX','adjustFlippedBattlefield','_handlers','invokeMagicReflection','ScaleX','ActSeq_Grid_TeleportToNode','all\x20enemies','_battlerHue','_target','STATUS','note','_eventId','svBattlerAnchorX','waitForNewLine','Game_BattlerBase_canAttack','statusWindowRectXPStyle','duration','applyDamageCaps','-%1','requestFauxAnimation','battleInjectPrep','\x5cC[6](Actions\x20%2%1\x5cC[6])\x5cC[0]','onJumpEnd','isForOne','Sprite_Actor_updateShadow','cancelLifeSteal','DamageFlat','battleCommandIcon','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','isSceneChanging','ActSeq_Set_WholeActionSet','jsAccuracy','battleCamera','createAttachedSprites','_autoBattle','Wave','_shakeFlinchDuration','negativeHpLifeSteal','stateMotionIndex','isBorderPortraitSpriteVisible','CreateCutinSettings','Item-%1-%2','_autoBattleWindow','walk','addAttackCommand','BindCommonEventKeysForGroup','sortEnemies','ActSeq_Skew_Reset','applyForcedGameTroopSettingsBattleCore','deactivate','gainHp','_weaponSprite','BattleManager_startAction','apply','commandNameWindowDrawBackground','_actionInputIndex','startInBattleStatus','some','XPActorDefaultHeight','ActSeq_Mechanics_EtbAction','itemEffectAddAttackState','Game_BattlerBase_die','scrollTo','jumpBattler','getHardDamageCap','BattleManager_updatePhase','%1EndBattleJS','MotionAni','addDamageSprite','drawActorName','battleEnd','front\x20center','ActSeq_Mechanics_HpMpTp','isBattleCoreTargetScope','setupFont','SkipPartyCmd','startInjectAnimation','allBattleMembers','addBattlerAspect','updateKeyboardKeys','Game_Battler_onBattleEnd','MaxMP','AdjustRect','PopupShiftY','ComboWindow_DrawJS','turnCount','temporaryVisibile','deadMembers','Game_Action_clear','isForFriend','createMiss','close','requestMotion','NameLegacy','waitForOpacity','Targets1','_blendColor','process_VisuMZ_BattleCore_BaseTroops','onDisabledPartyCommandSelection','setupIconTextPopup','updateStateSprite','%1Event','ActSeq_Set_SetupAction','_hpGaugeSprite','ActSeq_Movement_HomeMoveToJsPoint','meetsSelectFrontviewActorConditions','createActorCommandWindowBattleCore','actions','HelpFight','_colorFilter','_activeWeaponSlot','EscapeSuccess','Game_Battler_performDamage','MaxLines','ActSeq_Movement_Scale','moveToStartPosition','isAnyoneSkewing','_surprise','FlinchDuration','CalcEscapeRaiseJS','getReturnWindow','dying','requestBattleBalloon','updateLastTarget','DisablePartyCmd','setup','bitmap','clamp','_emptyBitmap','isCurrentItemEnabled','_enemies','cutinExit','doesPageHaveOnceParallelStart','flashDuration','rowSpacing','loadBitmap','_battleCoreBattleStartEvent','createPageButtons','action','closeBattleActorWindow','stypeId','reduce','die','actor','endAnimation','VisuMZ_2_BattleSystemOTB','Game_Battler_performEvasion','weaponImageId','VisuMZ_2_PartySystem','_skewX','ActSeq_Cutin_WaitForExit','_iconIndex','isPlaytest','description','Game_Action_updateLastTarget','abs','PosOffsetY','Scene_Battle_helpWindowRect','hue','buffAdd','ActSeq_Impact_MotionBlurTarget','updateNameTempVisibility','updateJump','updateVisibility','applyVariance','addChildToBack','pha','updateShakeFlinch','updateEventMain','performSubstitute','Scene_Boot_onDatabaseLoaded','position','removeState','statusDescription','updateStyleOpacity','createHelpWindow','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','LIGHT','border','WaitForAnimation','processTurn','Post','setBattleCameraTargets','performRecovery','+%1\x20MP','ActSeq_DB_DragonbonesTimeScale','updatePhase','MultiTarget','updateFlip','createHpGaugeSprite','buffColor','fontFace','parent','ShowAddedBuff','ARRAYFUNC','getColor','Window_BattleLog_performMiss','createDamageContainer','StatusWindowSelectableBackHide','removeChild','isFlipped','isTimeActive','displayMpDamage','isTriggered','drawItemActorSvBattler','placeActorName','setSkill','substitute','windowAreaHeight','messageSpeed','Sprite_Enemy_updateCollapse','gainTp','updateShadow','removeStatesAuto','Settings','WaitForFloat','frontview_ui','setupMotion','createBorderStylePortraitSprite','measureTextWidth','ActSeq_Inject_WaitForInjectAni','isBusy','makeTurnsText','ActSeq_Animation_GuardAnimation','Game_Battler_performMiss','skillTypes','Game_Action_makeDamageValueDisperse','isCommonEventReserved','MpGaugeOffsetY','createShadowSprite','ActSeq_Mechanics_StateTurnsChangeTo','StartTurnShow','meetsUsableItemConditions','create','type','CommandWidth','DamageDisplay','text','actorCommandWindowRect','ActSeq_Inject_AnimationStart','refreshRequest','JS\x20%1START\x20TURN','createBattleUIOffsetY','drawActorFace','overworldBattleback2Name','HitFlat','anchor','ActSeq_Mechanics_RemoveState','ActSeq_Mechanics_VariablePopup','Weapon-%1-%2','StatusWindow_BgType','removeOnceParallelInterpreter','Window_BattleLog_displayEvasion','EasingType','Window_ActorCommand_initialize','selectAllActors','setStateTurns','attackAnimationId2','_lastActor','deathStateId','length','displayEvasion','actorCommandCancelTPB','clearMotion','_enemyID','charging','setBlendColor','helpWindowRect','PortraitScaleBorderStyle','portraitFlipHorz','isActiveTpbReady','_escapeRatio','hasAspectData','addNormalStatus','actionEffect','_stateSprite','updateBorderStyle','getItemDamageAmountTextOriginal','Scene_Battle_updateCancelButton','ActSeq_Movement_FaceTarget','actorId','updateBossCollapse','Sprite_Actor_moveToStartPosition','applyItem','addTextToCombatLog','Game_Interpreter_terminate','commandSymbol','Window_BattleLog_performMagicEvasion','CastCertain','updateWaitMode','_homeDuration','SLEEP','alterBreakShield','iconIndex','shadow','XPActorCommandLines','_targetOpacity','NameFontSize','drawTextTopAligned','Elements','hide','TextAlign','addSingleSkillCommand','createRateJS','putActiveBattlerOnTop','_opacityEasing','_hue','drawSkillCost','_armorPenetration','split','ForceRandom','mainSpriteHeight','_skillIDs','active','_animation','Variable','_targetSkewX','VisuMZ_2_BattleSystemSTB','applyBattleCoreHitRateJS','undecided','onDatabaseLoaded','filter','svActorVertCells','_floatEasing','clearActiveWeaponSlot','ShowFacesListStyle','ActSeq_BattleLog_AddText','ActSeq_Grid_MoveTargetsInDirection','move','isDeathStateAffected','ActSeq_Cutin_WaitForEntrance','Shadow2','_padding','Linear','maxItems','_linkedSprite','_branch','BG_TYPE','cancelButtonText','BattleEndEvent','ShowPopup','findSymbolExt','debuffNameFmt','clearRect','drawTurnsRemaining','\x5cI[%1]\x5cC[%3]%2','debuffAdd','becomeSTBExploited','\x5cC[0]','performEvasion','ActSeq_Motion_WaitMotionFrame','excludeListing','battleAngle','isForOneBattleCore','PreEndBattleJS','ceil','SvBattlerMass-%1-%2','setText','normalHelp','Scene_QuickLoad','autoBattleUseSkills','isMoving','rec','_multipliers','subject','setItem','ShowEnemyGauge','overworldBattleback1Name','_makeCursorAlpha','performMoveToTargets','wtypeId','hitsDmgFmt','_active','eraseState','%1StartTurnJS','ActSeq_Movement_MoveToPoint','_targetHomeX','addedBuffs','criticalDmgRate','processAbort','FlinchDistanceY','ActSeq_Grid_ClearPassiveStatesFromNode','_motionCount','blockWidth','CheckVisibleSkillNotetags','isCancelLifeSteal','_list','statesWindowRect','ElementStatusCore','unshift','_battleLayoutStyle','occasion','currentMaxValue','_actorCommandWindow','onActorCancel','itemTextAlign','softDamageCap','_jumpHeight','_floatHeight','createBattleBalloon','actionSplicePoint','gainFullActionsPTB','revealNewWeaknesses','disarmLifeSteal','_spriteset','swapEnemyIDs','actorCommandAutoBattle','prepareCustomActionSequence','makeTargetSelectionMoreVisible','_nameTempVisibleDuration','ActSeq_Grid_AnimationIDAtNode','createBattleField','checkShowHideSkillNotetags','getSkillTypes','addWindow','jsCritRateAsUser','criticalHitRate','StatusWindowAttachmentBackOffsetY','DistanceY','isAtbChargingState','GRID\x20MOVE','processOk','abnormal','Actor-%1-%2','isCustomActionSequence','isBigCharacter','fight','ActSeq_Weapon_ClearActiveWeapon','getNextSubjectFromPool','isOnCurrentMap','isForAll','\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','Direction','bind','isSkillItemWindowsMiddle','makeSpeed','createEnemyNames','updateEffectsContainer','needsSelectionBattleCore','createEffectActionSet','setHome','turnOrderChangeOTB','backColor','value1','setBattlerMotionTrailData','needsInputWindowChange','ActSeq_Grid_AddTriggerToNodeJS','_jumpWholeDuration','initialize','remove','ActSeq_Cutin_EndVisualCutinEffectAll','BravePoints','setupBattleCoreData','PreStartActionJS','isDisarmLifeSteal','ActSeq_Mechanics_EmulateAttackEffect','maxCommands','ActSeq_BattleLog_DisplayAction','getDefeatedEnemies','setLetter','statusTextAutoBattleStyle','ActSeq_Mechanics_TextPopup','all\x20actors','_flipScaleX','Buffs','ActSeq_Movement_Spin','scope','_enemyMultiTargetWindow','ActSeq_Mechanics_DamagePopup','FvAniCenterAll','makeActionOrders','OffsetAdjust','attackAnimationId1','NameAttachStateIcon','ActSeq_Camera_Clamp','isAttack','CheckActSeqProjectileVersion','EscapeSuccessJS','createInBattleStatusWindow','onBattleEndBattleCore','ANGER','PostDamage%1JS','MeleeDistance','_mainSprite','setActionState','visualCutinPortraitHue','BattleManager_isTpbMainPhase','performTpbActiveCheckSwitch','ArPenRate','isOpponent','pages','addAnimationSpriteToContainer','clearFreezeMotion','victory','ShowMissEvasion','onBattleEnd','Game_BattlerBase_refresh','startTpbTurn','setupBattlebackBattleCore','isPartyTpbInputtable','setActiveWeaponSlot','svAnchorX','MAXMP','StatusWindowAttachmentFrontOffsetX','addNewState','updateBattleProcess','value2','right','LIGHTBULB','addBattlerBuffsDebuffs','prev\x20target','extraPositionY','clearOnceParallelInterpreters','ActSeq_Movement_MoveToTarget','isCustomBattleScope','_forcedHomeY','portrait','optDisplayTp','PreDamageAsTargetJS','alive\x20actors\x20not\x20user','extraPositionX','_effectType','playCursor','enemyNames','DefeatEvent','Window_BattleLog_performRecovery','hasBeenDefeatedBefore','Game_Battler_regenerateAll','changeWeather','VoiceLine','changeCtbChargeTime','parallaxScrollXinvertEnemy','invokeCounterAttack','Game_Action_setSkill','weapons','changeBattlerOpacity','setupTextPopup','_forcedHomeX','parseLocalizedText','Sprite_Actor_updateFrame','trueRandomTarget','frameDelay','enemyShowParametersAlways','includeState','VisuMZ_2_BattleSystemETB','Name','Enemy-%1-%2','Game_Action_setAttack','ActSeq_Element_ForceElements','BattleManager_onEncounter','PreApply%1JS','SkillID','_wtypeIDs','startHomeMove','statusWindowRect','_battleCoreAddedElements','itemTargetCandidates','makeTargetsBattleCore','resizeWindowXPStyle','createAllWindows','\x5cI[%1]%2','addCustomCommands','updateRefresh','BattleLog','index','Scene_Battle_commandEscape','options','onRegeneratePlayStateAnimation','colSpacing','ActSeq_Grid_AnimationTypeAtNode','_inBattleStatusMode','command339','_skewWholeDuration','singleSkill','isStateAffected','StartTurnWait','centerFrontViewSprite','_growEasing','regenerateAll','traits','Sprite_Weapon_loadBitmap','addedDebuffs','ShowAddedState','surprise','...','StatusWindowAttachmentFront','createJS','changeBattlebacks','NO\x20ACTOR\x20FOUND!','mainSpriteScaleX','Filename','WaitForCamera','ActSeq_Movement_HomeMoveBy','setCustomDamageFormula','canSingleOrMultipleSelect','motionSpeed','weatherPower','recoverAll','TpGaugeOffsetX','getBattlerKeyTargets','_namesCount','drawIcon','TP_Flat','fadeShiftX','ActSeq_Motion_PerformAction','TextColor','2343386lMqjLy','ShowActorGauge','currentExt','VisuMZ_3_WeaknessDisplay','isBattleMember','\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','isHiddenSkill','clearBattleBalloons','enemyMpGaugeRate','skillItemWindowRectMiddle','_stateIconSprite','Game_Action_itemEffectAddAttackState','ActSeq_Impact_TimeScale','makeHpDamageText','Game_Action_setItem','ITEM','setImmortal','battleSys','isForAnyone','battleDisplayText','TP_Rate','isAnimationShownOnBattlePortrait','updateDuration','needsActorInputCancel','MpGaugeOffsetX','setBattlePortrait','-----','JS\x20ESCAPE\x20FAILURE','ActSeq_Movement_MoveBy','actionBattleCoreJS','updateActors','States','svAnchorY','Window_BattleLog_performCounter','_commandNameWindow','actionsFmt','drawItemStatusXPStyle','ActSeq_Animation_ChangeBattlePortrait_JS','BattleManager_endAction_ComboWindow','_buttonKey','setBattlerFacePoint','ActSeq_Camera_FocusTarget','isTeamBased','AutoBattleBgType','Game_Action_makeTargets','Sprite_Battler_setHome','moveBattlerHomeToPoint','iconHeight','_forcedBattleLayout','QoL','Game_Temp_initialize','Index','checkSceneBattleTransitionable','commandNameWindowDrawText','_buttonText','setHelpWindow','PopupShiftX','collapseType','ActSeq_Animation_BalloonIconSpecific','JS\x20%1END\x20BATTLE','displayBattleCoreTransitionErrorMsg','targetsForOpponents','makeData','itemEffectGainTp','setupBattleCoreAspects','_buffTurns','_uiContainer','Debuffs','_floatWholeDuration','fontSize','symbol','updateSelectionEffect','checkBattleEnd','SvMotionIdleSolo-%1-%2','enemyStatus','battlerHue','drawItemActorSprite','playSystemSound','isAnimationPlaying','Scene_Party','addMeleeReturnActionSet','damagePopupOffsetX','CommandAddAutoBattle','expRate','repositionEnemiesByResolution','members','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','performWeaponAnimation','targetObject','ATK','BattleLayout','enemyTpGaugeRate','Game_System_initialize','Sprite_Enemy_update','dead\x20actors','applyHardDamageCap','ExtraSettings','ActSeq_Motion_FreezeMotionFrame','addCommand','isMagicSkill','USER-DEFINED\x204','AnimationID','AddHpGaugeOption','face','QUESTION','damagePopupOffsetY','battlerSprites','updateBattleBalloons','drawBattlerData','addImmortal','ShowCurrentState','zoomDuration','unchanged','performAction','_flinched','MAXHP','_createDamageContainer','isAnyoneGrowing','checkAutoCustomActionSequenceNotetagEffect','getWtypeIdWithName','isRepeated','JS\x20%1START\x20BATTLE','hpHealingFmt','onFloatEnd','value','enabled','ConfigManager_makeData','ShowReflect','onTurnEnd','children','arPenRate','ShuffleArray','_jumpMaxHeight','_customDamageFormula','battlerName','normalColor','_cancelButton','randomInt','setReturnWindow','_playTestFastMode','createEnemyNameContainer','JS\x20BATTLE\x20DEFEAT','ActSeq_Mechanics_EmulateSkillCost','jsScaleToFit','displaySubstitute','alive\x20battlers','PreDamage%1JS','updateShadowPosition','ChargeRate','isBattlerTargeted','_action','clearBattleCoreAspects','performAttack','ApplyImmortal','ActSeq_Mechanics_PtbAlterCost','createInnerSprite','command236','contentsOpacity','hitRate','process_VisuMZ_BattleCore_Notetags','setCursorRect','ActSeq_Element_AddElements','_states','NUM','PreDamageAsUserJS','isAnyProjectilePresent','_frame','ZZZ','resize','ActSeq_Mechanics_DeathBreak','isAutoBattle','_pattern','ActSeq_Animation_ItemAnimation','CombatLogIcon','pattern','createAutoBattleWindow','CopyCombatLog','WaitForMovement','svBattlerAnchorY','createEnemies','_lines','hpAffected','startFloat','setStateTooltipBattler','setBattleCameraPoint','onBattleStartOnceParallels','ActionCenteredName','skillItemWindowRectBorderStyle','battleUIOffsetX','ActSeq_Set_FinishAction','addSkillTypeCommand','WaitForSpin','jump','shift','_ptbActionCost','push','damage','processEnemyModeTouchBattleCore','freezeTime','PreStartTurnJS','drawParamData','string','isDuringNonLoopingMotion','CastMagical','ActSeq_Mechanics_ActionEffect','isOptionsCommandAdded','ActSeq_Mechanics_CtbSpeed','Game_Battler_performActionStart','displayFailure','resetCounter','_index','_enemyIDs','jsScaleDown','showHelpWindow','visualCutinPortraitIndex','isTpbCharged','Window_BattleLog_displayTpDamage','ForceExploiter','applyBattleCoreJS','needsSelection','rate','SmoothImage','Sprite_Enemy_createStateIconSprite','displayCurrentState','opacity','addText','updateBattlebackBitmap2','criticalDmgFlat','createTroopNote','pop','isAnyoneJumping','isOptionsCommandEnabled','executeDamage','paintOpacity','%1▲','Scene_Battle_createAllWindowsIBS','_enemySprite','battleMembers','playEnemyAttack','Game_Troop_expTotal','battleSkew','ActSeq_Mechanics_PtbConvert','itemLifeStealRate','performDamage','Window_PartyCommand_initialize','enemyHpGaugeRate','stateColor','_createClientArea','_motion','damageFlat','ENEMY_OFFSET_Y','ActionItemMsg','Spriteset_Battle_update','WaitForScale','onHomeMoveEnd','enemyShowLevel','ActSeq_Movement_WaitForScale','818068PjGBFZ','_regionBattleback2','_subject','WaitForProjectile','_lastHpDamage','gainMp','AllowCollapse','TargetLocation','_createCursorArea','Game_BattlerBase_isStateResist','SvWeaponSolo-%1-%2','ActSeq_Angle_Reset','Game_Action_executeDamage','alive\x20opponents\x20not\x20target','updateStaticSvBattlerFrames','canInput','placeTimeGauge','updateAction','applyImmortal','Letter','JS\x20ESCAPE\x20SUCCESS','top','SvMotionIdleMass-%1-%2','\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','alive\x20actors\x20not\x20target','comboWindowOffsetX','_targetX','_indent','AUTO\x20BATTLE','Scene_Battle_commandFight','_actorMultiTargetWindow','collapse','PARTY','adjustPosition_1for1','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','IconIndex','VisuMZ_3_BoostAction','battleLayoutStyle','NameOffsetY','_fauxAnimationSprites','VisuMZ_3_StateTooltips','CoreEngine','skills','isFightCommandEnabled','MotionIdle','isDisplayEmergedEnemies','JSON','MDF','forceWeaponAnimation','filterArea','updateScale','createActionSequenceProjectile','\x5cC[5](Turns\x20%2%1\x5cC[5])\x5cC[0]','NameOffsetX','setBattlerFlip','command301_PreBattleEvent','lastBattleSkill','updateBitmap','onEnemyOk','ShowAddedDebuff','states','StatusWindowSkinFilename','updateShadowBattleCore','onBattleStartBattleCore','setBattleImpactTimeScale','PostDamageJS','selectedBattlers','%1StartActionJS','CommandAddOptions','showAnimation','_performDamageMotion','mainSpriteWidth','6zBpJGs','_skewY','allowCollapse','battleSpriteSkew','_updateCursorArea','alive\x20friends','TextFmt','atbInterrupt','reverse','clearForcedGameTroopSettingsBattleCore','getBattlePortrait','dead\x20friends','BgType','isBattleFlipped','allIcons','canEscape','makeActionList','concat','_speed','battleCoreTpbMainPhase','DEF','BattleManager_onEscapeFailure','maxBattleMembers','Game_BattlerBase_initMembers','COMBATLOG','minimumStayDuration','displayChangedStates','AttachStateOffsetY','getNextDamagePopup','PreStartBattleJS','effects','process_VisuMZ_BattleCore_CommonEventKeys','FlinchDistanceX','ShowPortraitsBorderStyle','mainFontSize','canAddSkillCommand','_tempEquipCheck','_partyCommandWindow','gaugeX','onStaticEnemyBitmapLoad','ActSeq_Animation_SkillAnimation','resetNameTempVisibility','clearDamagePopup','finishActorInput','ParseArmorNotetags','redrawForGaugeRate','currentAction','turns','show','BattleManager_invokeCounterAttack','_displayBattleCoreTransitionErrorMsg','Scene_Battle_terminate','LUK','_character','27DFPCaf','createCommandNameWindow','Game_Action_isForDeadFriend','adjustWeaponSpriteOffset','Game_Action_executeHpDamage','terminate','WaitForNewLine','ActionEnd','ConfigManager_applyData','Sprite_Battler_damageOffsetX','anchorY','map','ActSeq_Projectile_Icon','isForOpponent','blt','Game_Enemy_transform','Window_Options_statusText','_shadowScaleX','Point','pauseInjectAnimation','SkillsStatesCore','version','isSceneBattle','stopInjectAnimation','isSideView','fadeShiftY','contentsBack','left','_createEffectsContainer','_flashDuration','flipVisualCutinHorz','StatusGraphic','uiInputPosition','ShowTpDmg','ActSeq_Impact_ZoomBlurTargetCenter','ActSeq_Animation_ShowAnimation','endAction','portraitFlipVert','VisuMZ_2_DragonbonesUnion','_targets','_borderPortraitSprite','float','textSizeEx','adjustPosition_ScaleUp','VisuMZ_2_AggroControlSystem','alive\x20battlers\x20not\x20user','isAnyoneInjectAniPrepping','SwitchCritical','createAnimationSprite','hitText','min','startBattle','_battleBalloonQueue','BattleAI','displayItemMessage','VisuMZ_1_SkillsStatesCore','Scene_Options_maxCommands','PostApplyAsUserJS','stepFlinch','%1-%2','battleBalloon','hasSkill','processExtendTroopMembers','iconText','FvAniEachTarget','Victory','startActorCommandSelection','VisuMZ_3_ActSeqCamera','damageOffsetY','updatePosition','Game_Action_isForAll','buffRemove','EmergeText','HITTYPE_CERTAIN','SkillItemBorderCols','dimColor1','aliveMembers','parse','battlerKey','_weaponImageId','BattleManager_cancelActorInput','isFastForward','smoothness','statesMaxWidth','emerge','Window_BattleLog_displayCurrentState','setActorHome','addState','isForAnyoneFocusFriends','SlotID','CriticalDmgRate','pageOffsetY','sideview_ui','guard','timeScale','ActSeq_Weapon_SetActiveWeapon','DestinationJS','ActSeq_Mechanics_OnceParallel','autoBattleStyle','BindCommonEventKeysForObj','performActionEnd','offsetY','MP_Flat','_targetBattlerKey','expTotal','ShowWeapon','isForRandomBattleCore','_offsetX','lukEffectRate','_targetGrowY','applyEasing','VisuMZ_2_BattleSystemFTB','getBattlePortraitFilename','repeats','addEscapeCommand','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','ShowFailure','isWaiting','StateIconOffsetX','Scene_Battle_createEnemyWindow','passiveText','ActSeq_Mechanics_AddState','isArray','Game_Action_itemTargetCandidates','_targetSkewY','startWeaponAnimation','ShowRemovedBuff','ShowMpDmg','Scene_Battle_onActorCancel','Scene_Battle_startActorSelection','ShowCosts','partyCommandWindowRectXPStyle','addFightCommand','traitObjects','CheckVisibleSwitchNotetags','evade','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','_shadowSprite','performReflection','Damage','getDragonbones','<CUSTOM\x20ACTION\x20SEQUENCE>','setupDamagePopup','selectNextActor','ActSeq_Mechanics_BoostPointsStoreData','AutoBattleRect','round','_cursorSprite','mainSprite','hitFlat','battleback2Name','getDamageStyle','_allTargets','_item','sliceMax','onAngleEnd','_svBattlerSprite','performMagicEvasion','CastAnimation','CriticalHitFlat','retreat','All\x20Allies','MAT','canBattlerMove','dead\x20enemies','ActSeq_Inject_AnimationPauseResume','createActors','displayActionResults','drawItem','_targetHits','playCancel','waitForMovement','createAnimationContainer','MotionType','Window_BattleLog_performEvasion','addWeaponSwapCommand','Interrupt','AnchorX','alignBattleCoreDamageSprite','AutoBattleOK','4250814jUckFZ','initVisibility','updateSpin','_enemyNameContainer','USER-DEFINED\x205','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','Width','battleCorePreBattleCommonEvent','destroyDamageSprite','loadCharacter','opacityStart','animationNextDelay','_effectsContainer','isAnyBattleBalloonPlaying','_updateClientArea','ActSeq_Zoom_Scale','jsOneForOne','exit','enemyHiddenParameter','BattleManager_startTurn','hpDamage','playOnceParallelTroopPage','totalDmgFmt','Sprite_AnimationMV_updatePosition','PostDamageAsUserJS','setSTBExploited','WEAPON\x20SWAP','AttackAnimation','addOptionsCommand','Scene_Map_initialize','list','AspectColor','Game_Action_apply','emulateAction','drawComboText','_motionSpeed','isActor','startPartyCommandSelection','updateCounter','displayReflectionPlayBack','checkShowHideBattleNotetags','battleSpin','changeInputWindow','drawActorClass','STB','applyArmorModifiers','ActSeq_Movement_FaceDirection','UNTITLED','scale','updateStateIconSprite','ActSeq_Camera_Reset','Sprite_Gauge_smoothness','makeActions','_distortionSprite','_targetAngle','match','paramName','refresh','setupZoomBlurImpactFilter','touchUI','lastFilename','TPB','charged','freezeFrame','ARRAYEVAL','ActSeq_Weapon_NextActiveWeapon','update','VisuMZ_3_ActiveChainSkills','Window_BattleLog_pushBaseLine','updateCommandNameWindow','DisplayAction','Window_BattleActor_hide','FUNC','Game_Battler_clearMotion','_totalValue','isCancelled','setEnemyWindowMode','missile','isNegativeLifeSteal','updateEffectContainers','statusHelpDesc','_tpbState','isDebuffAffected','Spriteset_Battle_createBattleField','ActSeq_Movement_WaitForMovement','getBattlePortraitOffsetY','EndBattlePopups','linkSprite','_jumpDuration','_statesWindow','clear','popupDamage','isSpinning','performCastAnimation','Scene_Battle_createAllWindows','setBattlerBattleCore','Game_Action_evalDamageFormula','none','View\x20battle\x20member\x20status.','svBattlerShadowVisible','AspectNameFmt','PRE-','ParseStateNotetags','offsetX','DualWield','EVAL','_isBattlerFlipped','loadWindowskin','StateIconOffsetY','_animationCount','ComboWindow_RectJS','isStatusAffected','createDamageCounterWindow','addBattleCoreAutoBattleStyleCommand','drawText','max','HalfActions','processEscape','_skewDuration','_targetOffsetY','VisuMZ_3_FrontviewBattleUI','stepBack','isBattleRefreshRequested','MaxHP','canAttackBattleCore','jsScaleUp','random','_shake','svbattler','ActSeq_Animation_ChangeBattlePortrait','AspectIcon','isAutoBattleCommandEnabled','BattleManager_makeActionOrders','SideviewSelect','STYPES','Radius','updateInterpreter','CurrentTurn','TimeScale','canMove','ActSeq_Inject_AnimationEnd','_executeHpDamage','ActSeq_Horror_Clear','SvWeaponMass-%1-%2','_battleBalloonSprites','mmp','createBattleFieldContainer','WaitCount','smoothSelect','createEnemySprite','slices','onGrowEnd','shouldHideBattleEndPopups','isInputting','setupDesaturateImpactFilter','user','gainStoredBoostPoints','autoSelectPriority','formula','battlerShadowScaleX','customDamageFormula','battleFloat','code','isSkewing','adjustPosition','portraitFilename','setCommonEvent','ALL_ENEMIES','_animationSprites','faceHeight','drawActorBuffTurns','isFloating','onEnemyCancel','ActSeq_Movement_WaitForSkew','PreRegenerateJS','sleep','createDamageSprite','clearActiveWeaponSet','ColorManager_mpColor','ActSeq_Mechanics_Immortal','setSvBattlerSprite','setBalloonPose','_duration','ActSeq_Mechanics_EmulateItemEffect','endIcon','preemptive','item','Game_Action_executeHpDamage_ComboWindow','ActSeq_Impact_BlueRedInvert','_stypeIDs','battleOpacity','LifeStealRegExp','isEnemy','Sprite_Battler_setBattler','ParseSkillNotetags','default','Window_ItemList_maxCols','loadSystem','startShakeFlinch','isForNotUser','ALL\x20SKILLS','AsUser','evaded','createPartyCommandWindowBattleCore','resetBreakShield','_borderPortraitDuration','silentHomeMove','StepDuration','setupActionSet','BattleManager_inputtingAction','VoiceLineType','actor%1-portrait','process_VisuMZ_BattleCore_PluginParams','battleZoom','SceneManager_push','arRedRate','updateCustomActionSequence','isSelected','forceEscapeSprite','ActSeq_BattleLog_PopBaseLine','name','FaceAway','activate','Turns','VisuMZ_3_BattleAI','_targetIndex','Sprite_Actor_update','BattleManager_initMembers','ReflectAnimation','Game_Battler_forceAction','createStateSprite','Sprite_Battler_updatePosition','removeBuffsAuto','updateBattlerContainer','BattleManager_onEscapeSuccess','fittingHeight','clearWeaponAnimation','magicReflection','ParseClassNotetags','origin','currentValue','isOTB','VisuMZ_4_BreakShields','applyGlobal','_actor','Scene_Battle_selectPreviousCommand','clearAllVisualCutins','Scene_Battle_partyCommandWindowRect','processActorCommandCancelTPB','attackTimesAdd','showEnemyAttackAnimation','ConvertParams','_helpWindow','isOpenAndActive','_damagePopupArray','movement','currentSymbol','Game_Action_isForAliveFriend','bgType','processVictory','createPartyCommandWindow','_actorSprites','BattleManager_checkSubstitute','Sprite_Actor_createStateSprite','setBackgroundType','pageButtonY','popBaseLine','ActSeq_Motion_RefreshMotion','selectLast','constructor','isIncludedInEnemyWindow','dragonbonesData','ActSeq_Mechanics_AtbGauge','_colorType','VariableID','_totalDamage','addChildToUiContainer','ENEMY_OFFSET_X','maxTp','ChantStyle','processBorderActor','performMoveToPoint','MIN_SAFE_INTEGER','PointJS','Game_Interpreter_PluginCommand','_immortal','_stateTurns','commandFight','Game_BattlerBase_meetsUsableItemConditions','_back1Sprite','1:1','attackStatesRate','ext','state','endVisualCutin','CreateCommonEventKeys','StatusWindowAttachmentBack','isAnyoneFloating','applyGlobalCommonEventNotetags','_tempBattler','not\x20focus','isForAliveFriendBattleCore','maxCols','enemyShowParametersIfDefeated','updateBattlebackBitmap','useItem','minimumHits','compareBattlerSprites','actorCommandSingleSkill','CheckMapBattleEventValid','performAttackSlot','commandOptions','ActSeq_Target_CurrentIndex','Users','_opacityDuration','isQueueOptionsMenu','PostEndBattleJS','indexOf','numberFontFace','AsTarget','ActSeq_Mechanics_BtbGain','WIDTH','Class-%1-%2','isTpbReady','_statusWindow','isFrameVisible','ScaleToFit','okTargetSelectionVisibility','ActSeq_Grid_RemoveTriggerFromNode','magicSkills','AddOption','revertTpbCachedActor','ActSeq_Mechanics_WaitForEffect','ActSeq_Mechanics_AddBuffDebuff','drawItemStyleIconText','GetParamIcon','updateLink','updateHomeMove','_enemyWindowMode','updateCollapse','ActSeq_Horror_NoiseCreate','targetDistortionSpritePosition','isJumping','jsCritRateAsTarget','setAttack','command283','setClickHandler','Game_Interpreter_updateWaitMode','forceSelect','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','displayAddedStates','includes','innerHeight','isCharging','BattleVictoryJS','Sprite_Animation_targetSpritePosition','setupCriticalEffect','_executedValue','getItemDamageAmountLabelOriginal','alive\x20opponents','drawItemImagePortraitStyle','isLearnedSkill','PreEndActionJS','displayRemovedStates','%1EndTurnJS','ActSeq_Set_TargetActionSet','Scene_Battle_logWindowRect','frameCount','isForAnyoneFocusOpponents','applyCritical','_preBattleCommonEvent','ActSeq_Grid_PullToTargetNode','BackColor','ActSeq_Movement_Skew','_waitCount','_damageCounterWindow','_battleCoreBattleResumeAfter','disarmHpLifeSteal','InBattleStatus','ActSeq_BattleLog_Refresh','StepDistanceX','status','calcWindowHeight','WaitForAngle','Scene_Battle_createCancelButton','performFlinch','ActSeq_Movement_FacePoint','_methods','thrust','POST-','CmdIconEscape','pushBaseLine','Game_Action_isForRandom','abort','updatePageButtonVisibility','originalName','BattleStartEvent','isCancelTriggered','worldTransform','Spriteset_Battle_updateActors','GetActionSequenceSpecialTarget','performLifeSteal','floatBattler','Enemy','_shakeFlinchPower','processAnimationRequests','ShowRemovedState','Game_Temp_requestAnimation','EscapeFail','powerUpColor','StateOverlayOffsetY','VisuMZ_3_VisualCutinEffect','removeHorrorEffect','isDead','createInnerPortrait','pointY','partyCommandWindowRect','ActSeq_Grid_PushFromTargetNode','prototype','getBattleMembers','Game_Action_needsSelection','isAppeared','onMoveEnd','setBattleSkew','dataId','_aspectData','canAttack','autoSelectLastSelected','head','autoBattle','addLoadListener','isNonSubmenuCancel','callNextMethod','svShadow','animationShouldMirror','buffIconIndex','battleCameraData','numRepeats','battleStatusSprite','onActorOk','multiTargetWindowRect','displayBuffs','_motionType','ActSeq_Target_RandTarget','PostDamageAsTargetJS','ActSeq_Grid_ActionAnimationAtNode','toString','currentDisplayedValue','updateAttachmentSprites','paySkillCost','ActSeq_Movement_HomeMoveToPoint','Duration','createStatesWindow','escape','targetSpritePosition','negativeLifeSteal','playOnceParallelInterpreter','BattleManager_endAction','ActSeq_Projectile_Picture','DTB','_enemyWindow','alive\x20battlers\x20not\x20target','VisuMZ_3_SideviewBattleUI','refreshStatusWindow','ActionEndUpdate','_animationContainer','loadSvEnemy','svBattlerName','BattleManager_abort','updateUiContainerPosition','callUpdateHelp','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','TpbGaugeOffsetX','ActionSkillMsg2','characterName','resizeWindowBorderStyle','regenerateAllBattleCore','displayAffectedStatus','pause','Game_Enemy_setup','WaitForSkew','isNextSceneBattleTransitionable','Defeat','getTraitSetKeys','_tpbSceneChangeCacheActor','_selectionEffectCount','HelpOptions','clearTargetBattlerKey','statusWindowRectBorderStyle','WindowWidth','Scene_Battle_update','alive\x20enemies\x20not\x20user','battlelog','requestBalloon','addStatusCommand','_actionBattlers','Game_Battler_startTpbTurn','isBorderStylePortraitShown','Game_Action_setGuard','CmdIconAutoBattle','ActSeq_Movement_Float','updateWeather','isDamagePopupRequested','CmdTextAlign','createBattleUIOffsetX','mpDamage','makeActionListAutoAttack','getItemDamageAmountLabelBattleCore','ANNOYED','performActionMotions','checkSubstitute','extraPositionScaledY','isCertainHit','ItemID','isBuffAffected','alive\x20actors','%1\x20Aspect','selectNextCommandTpb','animation','drawItemBackground','ForceDeath','Game_Action_isForFriend','getHalfActionsPTB','_waitMode','State-%1-%2','SkillItemStandardCols','command357','createAttachmentSprites','startMove','Scene_Battle_startEnemySelection','drawingAreaWidth','isShownOnBattlePortrait','VisuMZ_3_ActSeqProjectiles','TpbActiveChangeEnabled','Window_SkillList_maxCols','processRandomizedData','negativeMpLifeSteal','StatusWindow_DrawJS','bossCollapse','target','BattleManager_checkBattleEnd','Parse_Notetags_TraitObjects','Game_Action_numRepeats','partyCommandWindowRectBorderStyle','displayAction','endInBattleStatus','playBattleVoice','clearGlobalVariables','damageOffsetX','removedBuffs','useDigitGrouping','updateShadowVisibility','nameY','setTargetBattlerKey','animationBaseDelay','createEnemyWindow','Game_Action_itemEffectAddNormalState','OffsetX','buffNameFmt','AniDuration','moveBattlerToPoint','transform','???','ActSeq_Movement_FaceJsPoint','removeCurrentAction','AutoBattle','randomTargets','StatusWindowAttachmentBackOffsetX','drawEnemyName','_lastPluginCommandInterpreter','DistanceX','callOkHandler','processDefeat','clearNameTempVisibility','_offsetY','NewPopupBottom','loadBattleback1','alterPriority','LOVE','_actions','getNextSubject','battleGrow','finalizeScale','Immortal','pageButtonPosition','spriteId','ActorCmd','isDying','increaseHits','disperseDamage','isMagical','lineRect','ShowHide','performCollapse','Scene_Battle_onActorOk','floor','Exploited','Spriteset_Battle_createLowerLayer','AllowRandomSpeed','VisuMZ_1_ElementStatusCore','getParamBuffAndStateRate','setupBattleback','FrontViewSelect','drawItemStatusListStyle','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','isDTB','loadSvActor','_svBattlerData','normalIcon','Sprite_Actor_setBattler','_pageupButton','displayHpDamage','isItemCommandEnabled','currentClass','startIcon','drawBackgroundRect','Window_BattleLog_displayCritical','Window_BattleLog_refresh','opacitySpeed','inBattle','customFontFace','ActSeq_Mechanics_OtbOrder','Game_BattlerBase_addNewState','_tempActor','ActSeq_Grid_TraverseToNode','alterCost','updateCallMenu','HpGaugeOffsetY','buffValueFmt','isDrain','getLastPluginCommandInterpreter','getConfigValue','addItemCommand','_flashColor','findIndex','waitCount','MUSIC\x20NOTE','_targetHomeY','_targetOffsetX','Scene_Map_initializeAfter','replace','battleInjectAni','isPhysical','VisuMZ_2_WeaponSwapSystem','updateForceAction','pageup','updateStateSpriteBattleCore','ActSeq_Projectile_Animation','autoMeleeSingleTargetActionSet','lastCommandSymbol','width','FilenameJS','VisuMZ_2_BattleGridSystem','CriticalDmgFlat','AllActorsText'];_0x412f=function(){return _0x2dbed9;};return _0x412f();}Game_BattleOnceParallelInterpreter['prototype']=Object[_0x478a06(0x47b)](Game_Interpreter[_0x478a06(0x9c5)]),Game_BattleOnceParallelInterpreter[_0x478a06(0x9c5)][_0x478a06(0x930)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x478a06(0x9c5)][_0x478a06(0x8c9)]=function(_0x2ce7c9){const _0x562dd3=_0x478a06,_0x32855a=$dataCommonEvents[_0x2ce7c9];_0x32855a?this[_0x562dd3(0x40f)](_0x32855a[_0x562dd3(0x841)],0x0):this['terminate']();},Game_BattleOnceParallelInterpreter[_0x478a06(0x9c5)][_0x478a06(0x774)]=function(){const _0x22691b=_0x478a06;if(!SceneManager[_0x22691b(0x785)]())return;SceneManager[_0x22691b(0x143)][_0x22691b(0x48d)](this),Game_Interpreter[_0x22691b(0x9c5)]['terminate']['call'](this);},Game_BattleOnceParallelInterpreter[_0x478a06(0x9c5)]['setTroopPage']=function(_0x3b39a0){const _0x2c1fbe=_0x478a06;_0x3b39a0?this[_0x2c1fbe(0x40f)](_0x3b39a0['list'],0x0):this[_0x2c1fbe(0x774)]();},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0xbd6)]=function(){const _0x43e68f=_0x478a06;return VisuMZ[_0x43e68f(0x1a5)]['Settings']['PartyCmd'][_0x43e68f(0x40e)];},VisuMZ['BattleCore']['Scene_Battle_startPartyCommandSelection']=Scene_Battle['prototype'][_0x478a06(0x848)],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x848)]=function(){const _0x599ae3=_0x478a06;this[_0x599ae3(0xbd6)]()?this[_0x599ae3(0x3f4)]():VisuMZ[_0x599ae3(0x1a5)][_0x599ae3(0x2ad)]['call'](this);},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x3f4)]=function(){const _0x5d2b07=_0x478a06;if(BattleManager['isDTB']())this[_0x5d2b07(0xbf5)]();else BattleManager[_0x5d2b07(0xb72)]()&&VisuMZ[_0x5d2b07(0x1a5)][_0x5d2b07(0x2ad)][_0x5d2b07(0x21e)](this);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x70e)]=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x942)],Scene_Battle[_0x478a06(0x9c5)]['commandFight']=function(){const _0x4df924=_0x478a06;BattleManager[_0x4df924(0xb72)]()?(this['tpbCommandFight'](),this['startActorCommandSelection']()):VisuMZ['BattleCore']['Scene_Battle_commandFight'][_0x4df924(0x21e)](this);},Scene_Battle[_0x478a06(0x9c5)]['tpbCommandFight']=function(){const _0x27a85e=_0x478a06;if(!VisuMZ[_0x27a85e(0x1a5)][_0x27a85e(0xa38)])return;if(Imported[_0x27a85e(0xbdd)]&&BattleManager[_0x27a85e(0x1ac)]())return;const _0x4bbd60=$gameParty[_0x27a85e(0x7bb)]()[_0x27a85e(0x4d3)](_0x36704=>_0x36704['isTpbCharged']()&&_0x36704['canInput']());BattleManager[_0x27a85e(0xd5)]=_0x4bbd60[0x0]||null,BattleManager[_0x27a85e(0xd5)]&&BattleManager['_currentActor']['setActionState'](_0x27a85e(0xba5));},VisuMZ['BattleCore'][_0x478a06(0x5c7)]=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x235)],Scene_Battle[_0x478a06(0x9c5)]['commandEscape']=function(){const _0x2d21b1=_0x478a06;VisuMZ['BattleCore']['Scene_Battle_commandEscape'][_0x2d21b1(0x21e)](this);if(!BattleManager['isTpb']())BattleManager[_0x2d21b1(0xd5)]=null;},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x24b)]=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0xae8)],Scene_Battle[_0x478a06(0x9c5)]['createActorCommandWindow']=function(){const _0x3f848a=_0x478a06;VisuMZ[_0x3f848a(0x1a5)][_0x3f848a(0x24b)][_0x3f848a(0x21e)](this),this['createActorCommandWindowBattleCore']();},Scene_Battle['prototype'][_0x478a06(0x3fc)]=function(){const _0x320569=_0x478a06,_0x5e5036=this[_0x320569(0x51b)];_0x5e5036[_0x320569(0x358)]('escape',this[_0x320569(0xb5d)]['bind'](this)),_0x5e5036[_0x320569(0x358)](_0x320569(0x9d0),this[_0x320569(0x528)]['bind'](this)),_0x5e5036[_0x320569(0x358)](_0x320569(0x5cf),this[_0x320569(0x957)]['bind'](this)),BattleManager[_0x320569(0xb72)]()&&(this[_0x320569(0xbd6)]()?delete _0x5e5036[_0x320569(0x394)][_0x320569(0x28a)]:_0x5e5036[_0x320569(0x358)](_0x320569(0x28a),this['actorCommandCancelTPB'][_0x320569(0x543)](this)));},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0xb5d)]=function(){const _0x4fd1d0=_0x478a06;this[_0x4fd1d0(0x235)]();},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x528)]=function(){const _0x259f4c=_0x478a06;BattleManager['actor']()['makeAutoBattleActions'](),BattleManager['finishActorInput'](),BattleManager[_0x259f4c(0x7fe)](),this['changeInputWindow']();},Scene_Battle[_0x478a06(0x9c5)]['actorCommandSingleSkill']=function(){const _0x46f597=_0x478a06,_0x32ea5c=BattleManager[_0x46f597(0x11a)](),_0x24df35=this[_0x46f597(0x51b)]['currentExt']();_0x32ea5c[_0x46f597(0x460)](_0x24df35),BattleManager[_0x46f597(0x421)]()['setLastBattleSkill']($dataSkills[_0x24df35]),this['onSelectAction']();},Scene_Battle[_0x478a06(0x9c5)]['actorCommandCancelTPB']=function(){const _0x48f571=_0x478a06;this['tpbActorSwitchConditionsMet']()?this['performTpbActiveCheckSwitch']():this[_0x48f571(0x91b)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xa38)]=![],Scene_Battle[_0x478a06(0x9c5)]['tpbActorSwitchConditionsMet']=function(){const _0x476a4d=_0x478a06;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x476a4d(0x1ac)]())return![];else{if(!VisuMZ[_0x476a4d(0x1a5)]['TpbActiveChangeEnabled'])return![];const _0x55851e=$gameParty[_0x476a4d(0x7bb)]()[_0x476a4d(0x4d3)](_0x2bf086=>_0x2bf086[_0x476a4d(0x6c7)]()&&_0x2bf086[_0x476a4d(0x700)]());return _0x55851e[_0x476a4d(0x496)]>0x0&&BattleManager[_0x476a4d(0x421)]()!==_0x55851e[_0x55851e[_0x476a4d(0x496)]-0x1];}},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x579)]=function(){const _0x13244e=_0x478a06,_0x289929=BattleManager['actor'](),_0x281f31=_0x289929[_0x13244e(0x244)]();if(_0x281f31)_0x281f31[_0x13244e(0x89c)]();const _0x42b813=$gameParty[_0x13244e(0x7bb)]()['filter'](_0x5d8dc0=>_0x5d8dc0[_0x13244e(0x6c7)]()&&_0x5d8dc0[_0x13244e(0x700)]()),_0x334d83=_0x42b813[_0x13244e(0x960)](_0x289929),_0x12ef28=_0x42b813[_0x334d83+0x1];BattleManager[_0x13244e(0xd5)]=_0x12ef28||null;if(_0x12ef28)_0x12ef28[_0x13244e(0x576)](_0x13244e(0xba5));_0x289929[_0x13244e(0x576)](_0x13244e(0x4d1)),this[_0x13244e(0x84d)]();},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x91b)]=function(){const _0x48ebd4=_0x478a06;this[_0x48ebd4(0x75e)][_0x48ebd4(0x40f)](),this[_0x48ebd4(0x51b)][_0x48ebd4(0x3ed)]();if(!VisuMZ[_0x48ebd4(0x1a5)][_0x48ebd4(0xa38)])return;if(Imported[_0x48ebd4(0xbdd)]&&BattleManager[_0x48ebd4(0x1ac)]())return;if(BattleManager[_0x48ebd4(0xd5)]){BattleManager['_currentActor'][_0x48ebd4(0x576)](_0x48ebd4(0x4d1));const _0x564c3f=BattleManager[_0x48ebd4(0xd5)][_0x48ebd4(0x244)]();if(_0x564c3f)_0x564c3f[_0x48ebd4(0x89c)]();}BattleManager[_0x48ebd4(0xd5)]=null;},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x229)]=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x441)],Scene_Battle['prototype']['createHelpWindow']=function(){const _0x1b879b=_0x478a06;VisuMZ['BattleCore'][_0x1b879b(0x229)][_0x1b879b(0x21e)](this),this[_0x1b879b(0xb9e)]();},Scene_Battle['prototype'][_0x478a06(0xb9e)]=function(){const _0x5d8303=_0x478a06;this[_0x5d8303(0x51b)][_0x5d8303(0x627)](this[_0x5d8303(0x91f)]),this[_0x5d8303(0x75e)]['setHelpWindow'](this[_0x5d8303(0x91f)]);},Scene_Battle['prototype'][_0x478a06(0x67c)]=function(){const _0x2c68c0=_0x478a06;if(!VisuMZ[_0x2c68c0(0x1a5)][_0x2c68c0(0x468)][_0x2c68c0(0x9b6)]['NameLegacy'])return;this['_enemyNameContainer']=new Sprite(),this[_0x2c68c0(0x826)]['x']=this[_0x2c68c0(0x287)]['x'],this['_enemyNameContainer']['y']=this[_0x2c68c0(0x287)]['y'];const _0x13c490=this[_0x2c68c0(0x671)][_0x2c68c0(0x960)](this[_0x2c68c0(0x287)]);this[_0x2c68c0(0xb8c)](this[_0x2c68c0(0x826)],_0x13c490);for(let _0x1988b3=0x0;_0x1988b3<0x8;_0x1988b3++){const _0x55f904=new Window_EnemyName(_0x1988b3);this[_0x2c68c0(0x826)]['addChild'](_0x55f904);}},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x7e6)]=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0xa4e)],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0xa4e)]=function(){const _0x1b7109=_0x478a06;VisuMZ[_0x1b7109(0x1a5)][_0x1b7109(0x7e6)]['call'](this),this['createMultiTargetWindows']();},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0xb27)]=function(){const _0x5e3305=_0x478a06;this[_0x5e3305(0xbb2)](!![]),this[_0x5e3305(0xbb2)](![]);},Scene_Battle['prototype']['multiTargetWindowRect']=function(_0x34bd20){const _0xd23b13=_0x478a06,_0x3a89ee=Window_BattleMultiTarget[_0xd23b13(0x964)],_0x318a66=this[_0xd23b13(0x9a1)](0x1,!![]);let _0x523c40=_0x34bd20?Graphics[_0xd23b13(0xb0a)]-_0x3a89ee:0x0;_0x523c40+=_0x34bd20?Window_BattleMultiTarget[_0xd23b13(0xb15)]:Window_BattleMultiTarget['ENEMY_OFFSET_X'];const _0x2e8342=[_0xd23b13(0x46a)][_0xd23b13(0x982)](this[_0xd23b13(0x716)]())?0x0:this[_0xd23b13(0x967)][_0xd23b13(0x15a)];let _0x202191=Graphics['boxHeight']-_0x2e8342-_0x318a66;return _0x202191+=_0x34bd20?Window_BattleMultiTarget[_0xd23b13(0xbf6)]:Window_BattleMultiTarget[_0xd23b13(0x6ea)],new Rectangle(_0x523c40,_0x202191,_0x3a89ee,_0x318a66);},Scene_Battle[_0x478a06(0x9c5)]['createMultiTargetWindow']=function(_0x39eef8){const _0x5b4d91=_0x478a06,_0x1d3260=this[_0x5b4d91(0x9db)](_0x39eef8),_0x3c9f05=new Window_BattleMultiTarget(_0x1d3260,_0x39eef8);this[_0x5b4d91(0x530)](_0x3c9f05),_0x39eef8?this[_0x5b4d91(0x70f)]=_0x3c9f05:this[_0x5b4d91(0x565)]=_0x3c9f05;},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x270)]=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x54f)],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x54f)]=function(){const _0x54c1e5=_0x478a06;if(this[_0x54c1e5(0x5cc)])return![];return VisuMZ['BattleCore'][_0x54c1e5(0x270)][_0x54c1e5(0x21e)](this);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x4a8)]=Scene_Battle[_0x478a06(0x9c5)]['updateCancelButton'],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0xb99)]=function(){const _0x2dc866=_0x478a06;if(this['_cancelButton']&&this[_0x2dc866(0x5cc)]){this['_cancelButton'][_0x2dc866(0xbbc)]=!![];return;}VisuMZ['BattleCore']['Scene_Battle_updateCancelButton'][_0x2dc866(0x21e)](this);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xb8f)]=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x45b)],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x45b)]=function(){const _0x5b9604=_0x478a06;if(this[_0x5b9604(0x5cc)])return![];return VisuMZ[_0x5b9604(0x1a5)]['Scene_Battle_isTimeActiveIBS'][_0x5b9604(0x21e)](this);},VisuMZ['BattleCore'][_0x478a06(0x6db)]=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x5c1)],Scene_Battle['prototype'][_0x478a06(0x5c1)]=function(){const _0xe54c5b=_0x478a06;VisuMZ['BattleCore'][_0xe54c5b(0x6db)][_0xe54c5b(0x21e)](this),this['createInBattleStatusWindow']();},VisuMZ[_0x478a06(0x1a5)]['Scene_Battle_createPartyCommandWindowIBS']=Scene_Battle['prototype'][_0x478a06(0x927)],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x927)]=function(){const _0xeb6aaa=_0x478a06;VisuMZ[_0xeb6aaa(0x1a5)]['Scene_Battle_createPartyCommandWindowIBS']['call'](this);const _0x4745a6=this[_0xeb6aaa(0x75e)];_0x4745a6[_0xeb6aaa(0x358)](_0xeb6aaa(0x9a0),this['startInBattleStatus']['bind'](this,_0x4745a6));},VisuMZ['BattleCore'][_0x478a06(0xaf3)]=Scene_Battle['prototype']['createActorCommandWindow'],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0xae8)]=function(){const _0x26ad34=_0x478a06;VisuMZ[_0x26ad34(0x1a5)]['Scene_Battle_createActorCommandWindowIBS'][_0x26ad34(0x21e)](this);const _0x4a0eb0=this[_0x26ad34(0x51b)];_0x4a0eb0[_0x26ad34(0x358)](_0x26ad34(0x9a0),this[_0x26ad34(0x3ca)][_0x26ad34(0x543)](this,_0x4a0eb0));},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x570)]=function(){const _0xfc8eb2=_0x478a06,_0x28e057=this['inBattleStatusWindowRect'](),_0x3880c6=new Window_InBattleStatus(_0x28e057);this['addWindow'](_0x3880c6),_0x3880c6[_0xfc8eb2(0x4be)](),_0x3880c6[_0xfc8eb2(0x3ed)](),this[_0xfc8eb2(0xcf)]=_0x3880c6;},Scene_Battle['prototype'][_0x478a06(0xb76)]=function(){const _0x4de5ef=_0x478a06;if(VisuMZ['BattleCore']['Settings'][_0x4de5ef(0x99d)]['StatusWindow_RectJS'])return VisuMZ[_0x4de5ef(0x1a5)]['Settings'][_0x4de5ef(0x99d)][_0x4de5ef(0x2e9)][_0x4de5ef(0x21e)](this);const _0x7a0324=Graphics[_0x4de5ef(0xb0a)]>0x3e8?0x78:0x0,_0x580706=this[_0x4de5ef(0x91f)]['y']+this[_0x4de5ef(0x91f)][_0x4de5ef(0x15a)],_0x30a80e=Graphics[_0x4de5ef(0xb0a)]-_0x7a0324*0x2,_0x2a5e4e=Graphics['boxHeight']-_0x580706-this[_0x4de5ef(0x462)]();return new Rectangle(_0x7a0324,_0x580706,_0x30a80e,_0x2a5e4e);},Scene_Battle[_0x478a06(0x9c5)]['startInBattleStatus']=function(_0xefdb21){const _0x34eb38=_0x478a06;this[_0x34eb38(0x530)](this['_inBattleStatusWindow']),this[_0x34eb38(0x5cc)]=!![],this[_0x34eb38(0x91f)]['show']();const _0x538131=['xp',_0x34eb38(0x596),_0x34eb38(0x444),'sideview_ui',_0x34eb38(0x46a)];let _0x4b6119=_0x538131[_0x34eb38(0x982)](this['battleLayoutStyle']());_0x4b6119&&(_0xefdb21[_0x34eb38(0x4be)](),_0xefdb21[_0x34eb38(0x3ed)]()),this[_0x34eb38(0xcf)][_0x34eb38(0x1c9)](BattleManager['actor']()||$gameParty[_0x34eb38(0x6dd)]()[0x0]),this[_0x34eb38(0xcf)][_0x34eb38(0x67a)](_0xefdb21),this[_0x34eb38(0xcf)][_0x34eb38(0x769)](),this['_inBattleStatusWindow'][_0x34eb38(0x1fe)]();},Scene_Battle['prototype'][_0x478a06(0xa44)]=function(){const _0x4a0be0=_0x478a06;this[_0x4a0be0(0x5cc)]=![],this[_0x4a0be0(0x91f)][_0x4a0be0(0x4be)]();const _0x5b8460=this[_0x4a0be0(0xcf)][_0x4a0be0(0x40a)]();_0x5b8460[_0x4a0be0(0x769)](),_0x5b8460['open'](),_0x5b8460[_0x4a0be0(0x901)](),this[_0x4a0be0(0xcf)][_0x4a0be0(0x4be)](),this[_0x4a0be0(0xcf)]['close']();},Scene_Battle[_0x478a06(0x9c5)]['battleLayoutStyle']=function(){const _0xa4479f=_0x478a06;if($gameTemp[_0xa4479f(0x620)]!==undefined)return $gameTemp[_0xa4479f(0x620)];if(this['_battleLayoutStyle'])return this[_0xa4479f(0x518)];return this[_0xa4479f(0x518)]=VisuMZ[_0xa4479f(0x1a5)]['Settings'][_0xa4479f(0x64a)]['Style'][_0xa4479f(0xbd5)]()[_0xa4479f(0xb7d)](),this[_0xa4479f(0x518)]===_0xa4479f(0x7cb)&&!Imported[_0xa4479f(0x9f1)]&&(this[_0xa4479f(0x518)]=_0xa4479f(0x8e6)),this[_0xa4479f(0x518)]===_0xa4479f(0x46a)&&!Imported[_0xa4479f(0x89b)]&&(this[_0xa4479f(0x518)]='default'),this[_0xa4479f(0x518)];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x27a)]=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x462)],Scene_Battle[_0x478a06(0x9c5)]['windowAreaHeight']=function(){const _0x73871b=_0x478a06,_0x20a84f=this['battleLayoutStyle']();switch(_0x20a84f){case'list':return this['calcWindowHeight'](Math[_0x73871b(0x896)](0x1,$gameParty[_0x73871b(0x74f)]()),!![]);break;case'border':return this[_0x73871b(0x9a1)](0x4,!![]);break;default:return VisuMZ[_0x73871b(0x1a5)][_0x73871b(0x27a)][_0x73871b(0x21e)](this);break;}},VisuMZ[_0x478a06(0x1a5)]['Scene_Battle_helpWindowRect']=Scene_Battle['prototype'][_0x478a06(0x49d)],Scene_Battle[_0x478a06(0x9c5)]['helpWindowRect']=function(){const _0x56f729=_0x478a06,_0x3973f5=this[_0x56f729(0x716)]();switch(_0x3973f5){case'border':return this[_0x56f729(0x37f)]();break;case _0x56f729(0x8e6):case _0x56f729(0x841):case'xp':case'portrait':default:return VisuMZ[_0x56f729(0x1a5)][_0x56f729(0x42f)][_0x56f729(0x21e)](this);break;}},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x5bc)]=function(){const _0x323ff7=_0x478a06,_0x4fc5c0=this['battleLayoutStyle']();switch(_0x4fc5c0){case'xp':case _0x323ff7(0x596):return this[_0x323ff7(0x3a1)]();break;case _0x323ff7(0x444):return this['statusWindowRectBorderStyle']();break;case _0x323ff7(0x8e6):case'list':default:return this[_0x323ff7(0x23b)]();break;}},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x91a)]=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x9c3)],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x9c3)]=function(){const _0x320b54=_0x478a06,_0xb1501b=this[_0x320b54(0x716)]();switch(_0xb1501b){case'xp':case _0x320b54(0x596):return this[_0x320b54(0x7f2)]();break;case _0x320b54(0x444):return this['partyCommandWindowRectBorderStyle']();case _0x320b54(0x8e6):case _0x320b54(0x841):default:return this[_0x320b54(0x297)]();break;}},Scene_Battle[_0x478a06(0x9c5)]['partyCommandWindowRectDefaultStyle']=function(){const _0x700dca=_0x478a06,_0x241639=VisuMZ[_0x700dca(0x1a5)][_0x700dca(0x468)][_0x700dca(0x64a)],_0x3f4788=_0x241639[_0x700dca(0x47d)]||0xc0,_0x30e3b7=this[_0x700dca(0x462)](),_0x6c3166=this['isRightInputMode']()?Graphics[_0x700dca(0xb0a)]-_0x3f4788:0x0,_0x46743e=Graphics[_0x700dca(0xb21)]-_0x30e3b7;return new Rectangle(_0x6c3166,_0x46743e,_0x3f4788,_0x30e3b7);},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x480)]=function(){const _0x11386f=_0x478a06;return this[_0x11386f(0x9c3)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x35d)]=Scene_Battle['prototype'][_0x478a06(0xb32)],Scene_Battle['prototype'][_0x478a06(0xb32)]=function(){const _0x2a6e3a=_0x478a06;if(this[_0x2a6e3a(0x5cc)])return;const _0x1e92fb=this[_0x2a6e3a(0x716)]();switch(_0x1e92fb){case'xp':case'portrait':case _0x2a6e3a(0x444):break;case _0x2a6e3a(0x8e6):case _0x2a6e3a(0x841):default:VisuMZ['BattleCore'][_0x2a6e3a(0x35d)][_0x2a6e3a(0x21e)](this);break;}},Scene_Battle[_0x478a06(0x9c5)]['statusWindowRectDefaultStyle']=function(){const _0x4b63c9=_0x478a06,_0x4596ce=VisuMZ['BattleCore']['Settings'][_0x4b63c9(0x64a)],_0x55a9ba=Window_BattleStatus['prototype'][_0x4b63c9(0x352)](),_0x7149d=Graphics[_0x4b63c9(0xb0a)]-(_0x4596ce[_0x4b63c9(0x47d)]||0xc0),_0x235d90=this['windowAreaHeight']()+_0x55a9ba,_0x45513f=this[_0x4b63c9(0x1e6)]()?0x0:Graphics[_0x4b63c9(0xb0a)]-_0x7149d,_0x1bf6a7=Graphics[_0x4b63c9(0xb21)]-_0x235d90+_0x55a9ba;return new Rectangle(_0x45513f,_0x1bf6a7,_0x7149d,_0x235d90);},Scene_Battle[_0x478a06(0x9c5)]['statusWindowRectXPStyle']=function(){const _0x2465fe=_0x478a06,_0x136ee8=Window_BattleStatus[_0x2465fe(0x9c5)]['extraHeight'](),_0x133d88=Graphics[_0x2465fe(0xb0a)],_0x44488d=this['windowAreaHeight']()+_0x136ee8,_0x2f8e31=0x0,_0x273bb4=Graphics[_0x2465fe(0xb21)]-_0x44488d+_0x136ee8;return new Rectangle(_0x2f8e31,_0x273bb4,_0x133d88,_0x44488d);},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x7f2)]=function(){const _0x9c3762=_0x478a06,_0x2c654c=Graphics[_0x9c3762(0xb0a)]/0x2,_0x102b47=this[_0x9c3762(0x9a1)](VisuMZ[_0x9c3762(0x1a5)]['Settings'][_0x9c3762(0x64a)][_0x9c3762(0x4b9)],!![]),_0x2575fb=Math[_0x9c3762(0x801)]((Graphics[_0x9c3762(0xb0a)]-_0x2c654c)/0x2),_0x107c7e=Graphics[_0x9c3762(0xb21)]-_0x102b47-this['statusWindowRectXPStyle']()[_0x9c3762(0x15a)];return new Rectangle(_0x2575fb,_0x107c7e,_0x2c654c,_0x102b47);},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x37f)]=function(){const _0x2e5a36=_0x478a06,_0x3caed4=Graphics['width'],_0x3f1052=Math[_0x2e5a36(0x801)]((Graphics[_0x2e5a36(0xb0a)]-_0x3caed4)/0x2),_0x2e3244=this['helpAreaHeight'](),_0x28b391=(Graphics[_0x2e5a36(0x15a)]-Graphics[_0x2e5a36(0xb21)])/-0x2;return new Rectangle(_0x3f1052,_0x28b391,_0x3caed4,_0x2e3244);},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0xa0b)]=function(){const _0x5a8f6=_0x478a06,_0x39712f=Graphics[_0x5a8f6(0xaad)],_0x294b39=Math[_0x5a8f6(0x801)]((Graphics['boxWidth']-_0x39712f)/0x2),_0x3e43f4=this[_0x5a8f6(0x9a1)](0x4,!![]),_0xca5fe8=Graphics[_0x5a8f6(0xb21)]-_0x3e43f4+(Graphics[_0x5a8f6(0x15a)]-Graphics[_0x5a8f6(0xb21)])/0x2;return new Rectangle(_0x294b39,_0xca5fe8,_0x39712f,_0x3e43f4);},Scene_Battle['prototype'][_0x478a06(0xa42)]=function(){const _0x3623c4=_0x478a06,_0x4430c5=Math[_0x3623c4(0xa76)](Graphics[_0x3623c4(0xaad)]/0x3),_0x5d6fce=this['isRightInputMode']()?(Graphics[_0x3623c4(0xaad)]+Graphics[_0x3623c4(0xb0a)])/0x2-_0x4430c5:(Graphics[_0x3623c4(0xaad)]-Graphics[_0x3623c4(0xb0a)])/-0x2,_0x4cab21=this[_0x3623c4(0x37f)](),_0x28d552=_0x4cab21['y']+_0x4cab21[_0x3623c4(0x15a)],_0x198db9=this['statusWindowRectBorderStyle'](),_0x49ab4b=_0x198db9['y']-_0x28d552;return new Rectangle(_0x5d6fce,_0x28d552,_0x4430c5,_0x49ab4b);},Scene_Battle[_0x478a06(0x9c5)]['skillItemWindowRectBorderStyle']=function(){const _0x56c1f3=_0x478a06,_0xbd63d9=Math['ceil'](Graphics['width']/0x3),_0x28024f=Math[_0x56c1f3(0x801)]((Graphics[_0x56c1f3(0xb0a)]-_0xbd63d9)/0x2),_0x369a05=this[_0x56c1f3(0xa42)](),_0x59da2d=_0x369a05['y'],_0x16fd0d=_0x369a05['height'];return new Rectangle(_0x28024f,_0x59da2d,_0xbd63d9,_0x16fd0d);},Scene_Battle[_0x478a06(0x9c5)]['repositionCancelButtonBorderStyle']=function(){const _0x973316=_0x478a06;this['_cancelButton']['y']=this['_helpWindow']['y']+this[_0x973316(0x91f)][_0x973316(0x15a)],this[_0x973316(0x1e6)]()?this['battleLayoutStyle']()===_0x973316(0x444)?this['_cancelButton']['x']=0x8:this[_0x973316(0x678)]['x']=-this[_0x973316(0x678)][_0x973316(0xaad)]-0x4:this[_0x973316(0x678)]['x']=Graphics['width']-(Graphics[_0x973316(0xaad)]-Graphics[_0x973316(0xb0a)])/0x2-this[_0x973316(0x678)]['width']-0x4;},VisuMZ['BattleCore'][_0x478a06(0xb84)]=Scene_Battle['prototype'][_0x478a06(0x32d)],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x32d)]=function(){const _0x5cc6f0=_0x478a06;if(this[_0x5cc6f0(0x716)]()==='border')return this[_0x5cc6f0(0x6ab)]();else return this[_0x5cc6f0(0x544)]()?this[_0x5cc6f0(0x5f9)]():VisuMZ[_0x5cc6f0(0x1a5)][_0x5cc6f0(0xb84)]['call'](this);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x36f)]=Scene_Battle['prototype'][_0x478a06(0x25e)],Scene_Battle['prototype']['itemWindowRect']=function(){const _0x1b8069=_0x478a06;if(this[_0x1b8069(0x716)]()==='border')return this[_0x1b8069(0x6ab)]();else return this[_0x1b8069(0x544)]()?this[_0x1b8069(0x5f9)]():VisuMZ[_0x1b8069(0x1a5)][_0x1b8069(0x36f)]['call'](this);},Scene_Battle['prototype'][_0x478a06(0x544)]=function(){const _0x514afa=_0x478a06;return VisuMZ[_0x514afa(0x1a5)][_0x514afa(0x468)][_0x514afa(0x64a)]['SkillItemMiddleLayout'];},Scene_Battle['prototype']['skillItemWindowRectMiddle']=function(){const _0x4ed4b=_0x478a06,_0x3b8650=Sprite_Button[_0x4ed4b(0x9c5)][_0x4ed4b(0x511)]()*0x2+0x4;let _0x58d535=Graphics[_0x4ed4b(0xb0a)]-_0x3b8650;Imported[_0x4ed4b(0x1a1)]&&SceneManager[_0x4ed4b(0xab8)]()&&(_0x58d535+=_0x3b8650);const _0x453e95=this[_0x4ed4b(0xb6f)](),_0x28f334=Graphics['boxHeight']-_0x453e95-this[_0x4ed4b(0x5bc)]()[_0x4ed4b(0x15a)]+Window_BattleStatus['prototype'][_0x4ed4b(0x352)](),_0x3c1302=0x0;return new Rectangle(_0x3c1302,_0x453e95,_0x58d535,_0x28f334);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x7f0)]=Scene_Battle[_0x478a06(0x9c5)]['startActorSelection'],Scene_Battle['prototype']['startActorSelection']=function(){const _0x2aed86=_0x478a06;VisuMZ[_0x2aed86(0x1a5)][_0x2aed86(0x7f0)]['call'](this),this[_0x2aed86(0x52a)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xa34)]=Scene_Battle['prototype'][_0x478a06(0xb20)],Scene_Battle[_0x478a06(0x9c5)]['startEnemySelection']=function(){const _0xa51b5b=_0x478a06;VisuMZ[_0xa51b5b(0x1a5)][_0xa51b5b(0xa34)][_0xa51b5b(0x21e)](this),this[_0xa51b5b(0x9ef)][_0xa51b5b(0x13d)](),this['makeTargetSelectionMoreVisible']();},Scene_Battle['prototype']['makeTargetSelectionMoreVisible']=function(){const _0x4afbcd=_0x478a06,_0x3040e0=this['battleLayoutStyle']();['xp',_0x4afbcd(0x596),'border'][_0x4afbcd(0x982)](_0x3040e0)&&this['_actorCommandWindow'][_0x4afbcd(0x3ed)](),(_0x3040e0===_0x4afbcd(0x444)||this['isSkillItemWindowsMiddle']())&&(this['_skillWindow']['close'](),this[_0x4afbcd(0x1b5)]['close']());},VisuMZ[_0x478a06(0x1a5)]['Scene_Battle_onActorOk']=Scene_Battle['prototype'][_0x478a06(0x9da)],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x9da)]=function(){const _0x56ef15=_0x478a06;VisuMZ[_0x56ef15(0x1a5)][_0x56ef15(0xa75)]['call'](this),this[_0x56ef15(0x96a)]();},Scene_Battle['prototype']['isNonSubmenuCancel']=function(){const _0x29b672=_0x478a06;return[_0x29b672(0x1c5),_0x29b672(0x7cc),'singleSkill'][_0x29b672(0x982)](this[_0x29b672(0x51b)][_0x29b672(0x923)]());},VisuMZ[_0x478a06(0x1a5)]['Scene_Battle_onActorCancel']=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x51c)],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x51c)]=function(){const _0x5be0df=_0x478a06;this[_0x5be0df(0x9d2)]()?(this[_0x5be0df(0x967)][_0x5be0df(0x769)](),this[_0x5be0df(0xafe)][_0x5be0df(0x4be)](),this[_0x5be0df(0x51b)][_0x5be0df(0x901)]()):VisuMZ[_0x5be0df(0x1a5)][_0x5be0df(0x7ef)][_0x5be0df(0x21e)](this),this[_0x5be0df(0xab9)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xb63)]=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x72b)],Scene_Battle['prototype'][_0x478a06(0x72b)]=function(){const _0x10e769=_0x478a06;if(!this[_0x10e769(0x9ef)][_0x10e769(0x2f2)]()){this[_0x10e769(0x9ef)][_0x10e769(0x901)]();return;}const _0x311a37=BattleManager[_0x10e769(0x11a)]();_0x311a37[_0x10e769(0xa4c)](this[_0x10e769(0x9ef)]['enemy']()),this[_0x10e769(0x9ef)]['closeBattleActorWindow'](),VisuMZ[_0x10e769(0x1a5)]['Scene_Battle_onEnemyOk'][_0x10e769(0x21e)](this),this[_0x10e769(0x96a)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x12b)]=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x8cf)],Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x8cf)]=function(){const _0x401980=_0x478a06;this[_0x401980(0x9d2)]()?(this[_0x401980(0x967)][_0x401980(0x769)](),this[_0x401980(0x9ef)][_0x401980(0x4be)](),this['_actorCommandWindow']['activate']()):VisuMZ[_0x401980(0x1a5)][_0x401980(0x12b)][_0x401980(0x21e)](this),this[_0x401980(0xab9)](),this[_0x401980(0x9ef)][_0x401980(0x41d)]();},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x96a)]=function(){const _0x803d9a=_0x478a06,_0x406d8c=this[_0x803d9a(0x716)]();(_0x406d8c===_0x803d9a(0x444)||this[_0x803d9a(0x544)]())&&(this[_0x803d9a(0x26b)][_0x803d9a(0x1fe)](),this[_0x803d9a(0x26b)][_0x803d9a(0x4cb)]&&this['_skillWindow']['show'](),this[_0x803d9a(0x1b5)][_0x803d9a(0x1fe)](),this[_0x803d9a(0x1b5)][_0x803d9a(0x4cb)]&&this[_0x803d9a(0x1b5)]['show']());},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0xab9)]=function(){const _0x587ce9=_0x478a06,_0x166a6e=this[_0x587ce9(0x716)]();['xp','portrait',_0x587ce9(0x444)][_0x587ce9(0x982)](_0x166a6e)&&this[_0x587ce9(0x51b)][_0x587ce9(0x1fe)](),this['okTargetSelectionVisibility']();},Sprite_Battler[_0x478a06(0x846)]=VisuMZ['BattleCore'][_0x478a06(0x468)][_0x478a06(0x145)][_0x478a06(0x388)],VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x2f0)]=Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x2ef)],Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x2ef)]=function(){const _0x318005=_0x478a06;VisuMZ[_0x318005(0x1a5)][_0x318005(0x2f0)]['call'](this),this[_0x318005(0xe5)]();if(this[_0x318005(0x930)]===Sprite_Enemy)this[_0x318005(0x477)]();this['createDistortionSprite']();},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0xe5)]=function(){const _0x409233=_0x478a06;this[_0x409233(0x392)]=0x0,this[_0x409233(0xb38)]=0x0,this[_0x409233(0x520)]=0x0,this[_0x409233(0xb02)]=0x0,this[_0x409233(0x164)]=0x0,this[_0x409233(0x634)]=0x0,this[_0x409233(0x4d5)]=_0x409233(0x4df),this[_0x409233(0x51f)]=0x0,this[_0x409233(0x674)]=0x0,this[_0x409233(0x87b)]=0x0,this['_jumpWholeDuration']=0x0,this[_0x409233(0x4ba)]=0xff,this['_opacityDuration']=0x0,this[_0x409233(0x2ee)]=0x0,this[_0x409233(0x4c3)]='Linear',this['_currentAngle']=0x0,this[_0x409233(0x859)]=0x0,this[_0x409233(0x314)]=0x0,this[_0x409233(0x1e5)]=0x0,this[_0x409233(0x303)]=_0x409233(0x4df),this[_0x409233(0x242)]=!![],this[_0x409233(0x427)]=0x0,this[_0x409233(0x73a)]=0x0,this[_0x409233(0x4ce)]=0x0,this[_0x409233(0x7eb)]=0x0,this[_0x409233(0x899)]=0x0,this['_skewWholeDuration']=0x0,this['_skewEasing']='Linear',this[_0x409233(0xb3b)]=0x1,this[_0x409233(0x1bb)]=0x1,this['_targetGrowX']=0x1,this[_0x409233(0x7dc)]=0x1,this[_0x409233(0xab4)]=0x0,this['_growWholeDuration']=0x0,this[_0x409233(0x5d3)]=_0x409233(0x4df),this[_0x409233(0x561)]=0x1,this[_0x409233(0x50a)]=0x0,this['_targetHomeY']=0x0,this['_homeDuration']=0x0,this['_homeWholeDuration']=0x0,this[_0x409233(0x162)]='Linear',this[_0x409233(0x3b6)]=0x0,this[_0x409233(0x9b7)]=0x0;},Sprite_Battler['prototype'][_0x478a06(0x477)]=function(){const _0x2cab8e=_0x478a06;this[_0x2cab8e(0x7f8)]=new Sprite(),this[_0x2cab8e(0x7f8)][_0x2cab8e(0x410)]=ImageManager[_0x2cab8e(0x8e8)](_0x2cab8e(0x4dd)),this[_0x2cab8e(0x7f8)][_0x2cab8e(0x410)][_0x2cab8e(0xace)]=VisuMZ[_0x2cab8e(0x1a5)][_0x2cab8e(0x468)][_0x2cab8e(0x145)][_0x2cab8e(0x6cd)],this['_shadowSprite'][_0x2cab8e(0x488)]['x']=0.5,this['_shadowSprite'][_0x2cab8e(0x488)]['y']=0.5,this['_shadowSprite']['y']=-0x2,this['_shadowSprite'][_0x2cab8e(0xbbc)]=![],this[_0x2cab8e(0xb9b)](this['_shadowSprite']);},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0xb1a)]=function(){const _0x522636=_0x478a06;this[_0x522636(0x858)]=new Sprite(),this[_0x522636(0x858)][_0x522636(0x488)]['x']=0.5,this['_distortionSprite'][_0x522636(0x488)]['y']=0.5,this[_0x522636(0xb9b)](this[_0x522636(0x858)]);},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x14c)]=function(){const _0x5de806=_0x478a06;if(this[_0x5de806(0x7fb)]&&this[_0x5de806(0x7fb)]()){Sprite[_0x5de806(0x9c5)][_0x5de806(0x14c)][_0x5de806(0x21e)](this);return;}const _0x4f910c=this['_distortionSprite'];if(!_0x4f910c)return;!_0x4f910c[_0x5de806(0x3ff)]&&_0x4f910c[_0x5de806(0xf8)](),_0x4f910c[_0x5de806(0x3ff)][_0x5de806(0x2a4)](this[_0x5de806(0x4c4)]),_0x4f910c[_0x5de806(0x3ff)][_0x5de806(0x49c)](this[_0x5de806(0x3f2)]),_0x4f910c[_0x5de806(0x3ff)][_0x5de806(0x17a)](this['_colorTone']);},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x359)]=function(){const _0x3cbd51=_0x478a06;if(!this[_0x3cbd51(0x858)])return;if(this['_shadowSprite']){const _0x41debc=this['getChildIndex'](this[_0x3cbd51(0x858)]);this[_0x3cbd51(0xb8c)](this[_0x3cbd51(0x7f8)],_0x41debc),this[_0x3cbd51(0xa4a)]();}this[_0x3cbd51(0x80b)]&&this[_0x3cbd51(0x858)]['addChild'](this[_0x3cbd51(0x80b)]),this[_0x3cbd51(0x3c5)]&&this[_0x3cbd51(0x858)][_0x3cbd51(0xb9b)](this['_weaponSprite']),this[_0x3cbd51(0x575)]&&this[_0x3cbd51(0x858)]['addChild'](this[_0x3cbd51(0x575)]),this['_injectAnimationSprite']&&this['_distortionSprite'][_0x3cbd51(0xb9b)](this[_0x3cbd51(0x146)]),this[_0x3cbd51(0xaeb)]&&this[_0x3cbd51(0x858)][_0x3cbd51(0xb9b)](this[_0x3cbd51(0xaeb)]);},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0xa4a)]=function(){const _0x5e4e3a=_0x478a06;if(!this[_0x5e4e3a(0x7f8)])return;if(this[_0x5e4e3a(0xbe5)]&&this[_0x5e4e3a(0xbe5)]['svBattlerShadowVisible']()){const _0x135a41=this['_shadowSprite'][_0x5e4e3a(0x410)];this[_0x5e4e3a(0x7f8)]['setFrame'](0x0,0x0,_0x135a41[_0x5e4e3a(0xaad)],_0x135a41[_0x5e4e3a(0x15a)]);}else this[_0x5e4e3a(0x7f8)][_0x5e4e3a(0xb06)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x350)]=function(){const _0xa3f41f=_0x478a06;return SceneManager[_0xa3f41f(0x785)]()?SceneManager[_0xa3f41f(0x143)][_0xa3f41f(0x526)][_0xa3f41f(0x258)]:this['parent'];},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x5aa)]=function(_0x1f5fa7,_0x2ffd99){const _0x2befdf=_0x478a06;if(!this[_0x2befdf(0xbe5)][_0x2befdf(0xbe9)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x2884db=VisuMZ['BattleCore'][_0x2befdf(0x468)]['Damage'],_0x2bc9fe=new Sprite_Damage();_0x2bc9fe[_0x2befdf(0x8d9)]=_0x2884db[_0x2befdf(0x189)],this['sortDamageSprites'](_0x2bc9fe),_0x2bc9fe['setupTextPopup'](_0x1f5fa7,_0x2ffd99),this[_0x2befdf(0x3d6)](_0x2bc9fe);},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x3f5)]=function(_0x162c47,_0x1d46d1,_0x2ca8ef){const _0x1317d0=_0x478a06;if(!this['_battler']['isSpriteVisible']())return;if(BattleManager[_0x1317d0(0x8bb)]())return;const _0x15a8dd=VisuMZ[_0x1317d0(0x1a5)]['Settings'][_0x1317d0(0x7fa)],_0x11e77f=new Sprite_Damage();_0x11e77f[_0x1317d0(0x8d9)]=_0x15a8dd[_0x1317d0(0x189)],this[_0x1317d0(0xbc1)](_0x11e77f),_0x11e77f[_0x1317d0(0x3f5)](_0x162c47,_0x1d46d1,_0x2ca8ef),this[_0x1317d0(0x3d6)](_0x11e77f);},Sprite_Battler[_0x478a06(0x9c5)]['setupDamagePopup']=function(){const _0x53f618=_0x478a06;if(!this[_0x53f618(0xbe5)][_0x53f618(0xa19)]())return;while(this[_0x53f618(0xbe5)][_0x53f618(0xa19)]()){this[_0x53f618(0xbe5)]['isSpriteVisible']()&&this[_0x53f618(0x8d3)]();}this[_0x53f618(0xbe5)]['clearDamagePopup'](),this['_battler'][_0x53f618(0xf3)]();},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x8d3)]=function(){const _0x1e02dd=_0x478a06;if(BattleManager[_0x1e02dd(0x8bb)]())return;const _0x51f441=VisuMZ[_0x1e02dd(0x1a5)][_0x1e02dd(0x468)][_0x1e02dd(0x7fa)],_0x1632ff=new Sprite_Damage();_0x1632ff[_0x1e02dd(0x8d9)]=_0x51f441[_0x1e02dd(0x189)],this['sortDamageSprites'](_0x1632ff),_0x1632ff[_0x1e02dd(0x40f)](this[_0x1e02dd(0xbe5)]),_0x1632ff[_0x1e02dd(0x2fa)](this[_0x1e02dd(0xbe5)]),this[_0x1e02dd(0x3d6)](_0x1632ff);},Sprite_Battler[_0x478a06(0x9c5)]['addDamageSprite']=function(_0x9c31a9){const _0x556be6=_0x478a06;this[_0x556be6(0x26f)]['push'](_0x9c31a9);if(this[_0x556be6(0xa36)]()){const _0x37f391=SceneManager[_0x556be6(0x143)][_0x556be6(0x967)];if(_0x37f391)_0x37f391[_0x556be6(0x3d6)](_0x9c31a9,this['_battler']);}else{this['damageContainer']()['addChild'](_0x9c31a9);if(SceneManager['isBattleFlipped']())_0x9c31a9['scale']['x']=-0x1;}},Sprite_Battler['prototype'][_0x478a06(0xa36)]=function(){const _0x4f9b2e=_0x478a06;return!$gameSystem[_0x4f9b2e(0x787)]()&&this[_0x4f9b2e(0xbe5)]&&this['_battler'][_0x4f9b2e(0x847)]();return!$gameSystem[_0x4f9b2e(0x787)]()&&this[_0x4f9b2e(0xbe5)]&&this[_0x4f9b2e(0xbe5)][_0x4f9b2e(0x847)]()&&Window_BattleStatus[_0x4f9b2e(0x9c5)][_0x4f9b2e(0x716)]()==='portrait';},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0xbc1)]=function(_0x569c24){const _0x5b8e1b=_0x478a06;this[_0x5b8e1b(0x821)](_0x569c24,!![]);const _0x388f54=VisuMZ['BattleCore'][_0x5b8e1b(0x468)][_0x5b8e1b(0x7fa)],_0x5b8fbe=SceneManager[_0x5b8e1b(0x746)]()?-0x1:0x1;if(_0x388f54[_0x5b8e1b(0xa62)])for(const _0x69eff2 of this[_0x5b8e1b(0x26f)]){_0x69eff2['x']+=_0x388f54[_0x5b8e1b(0x628)]*_0x5b8fbe,_0x69eff2['y']+=_0x388f54[_0x5b8e1b(0x3e5)];}else{const _0x299a70=this[_0x5b8e1b(0x26f)][this[_0x5b8e1b(0x26f)]['length']-0x1];_0x299a70&&(_0x569c24['x']=_0x299a70['x']+_0x388f54[_0x5b8e1b(0x628)]*_0x5b8fbe,_0x569c24['y']=_0x299a70['y']+_0x388f54[_0x5b8e1b(0x3e5)]);}},Sprite_Battler[_0x478a06(0x9c5)]['alignBattleCoreDamageSprite']=function(_0x2d56d9,_0x213a47){const _0x5ccaa6=_0x478a06,_0x6fec57=SceneManager[_0x5ccaa6(0x746)]()?-0x1:0x1;let _0x35c3e1=this['_baseX'];_0x35c3e1+=this['extraPositionX']();let _0x45b861=this[_0x5ccaa6(0xb38)];const _0x571bf7=this['_distortionSprite'][_0x5ccaa6(0x853)]['y'];_0x45b861+=this['extraPositionY']();const _0x1b9772=SceneManager[_0x5ccaa6(0x143)][_0x5ccaa6(0x967)];if(_0x1b9772&&this[_0x5ccaa6(0x452)]===_0x1b9772){_0x35c3e1+=_0x1b9772['x']-this[_0x5ccaa6(0xa47)]();const _0x35ac8c=_0x1b9772['lineHeight']()*0x3/0x4;_0x45b861=_0x1b9772['y']+_0x35ac8c,_0x45b861=Math[_0x5ccaa6(0x7a1)](_0x45b861,_0x1b9772['y']+this['y']-this['height']+_0x35ac8c);}_0x2d56d9['x']=Math[_0x5ccaa6(0x801)](_0x35c3e1+this[_0x5ccaa6(0xa47)]()*_0x6fec57),_0x2d56d9['y']=Math['round'](_0x45b861+this[_0x5ccaa6(0x7b3)]());},VisuMZ['BattleCore']['Sprite_Battler_damageOffsetX']=Sprite_Battler[_0x478a06(0x9c5)]['damageOffsetX'],Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0xa47)]=function(){const _0x590768=_0x478a06;let _0x1e0f7d=VisuMZ[_0x590768(0x1a5)][_0x590768(0x778)][_0x590768(0x21e)](this),_0x583ae0=VisuMZ['BattleCore'][_0x590768(0x468)][_0x590768(0x7fa)]['PopupOffsetX']||0x0;return _0x583ae0+=this['_battler']['damagePopupOffsetX'](),Math[_0x590768(0x801)](_0x1e0f7d+_0x583ae0);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xf0)]=Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x7b3)],Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x7b3)]=function(){const _0x299119=_0x478a06;let _0x7fff2a=VisuMZ[_0x299119(0x1a5)][_0x299119(0xf0)][_0x299119(0x21e)](this);switch(this[_0x299119(0xbe5)][_0x299119(0x2c7)]()){case'head':_0x7fff2a-=this[_0x299119(0x15a)]*this[_0x299119(0x853)]['y'];break;case _0x299119(0x11d):_0x7fff2a-=this[_0x299119(0x15a)]*this[_0x299119(0x853)]['y']*0.5;break;}let _0x51d92a=VisuMZ[_0x299119(0x1a5)][_0x299119(0x468)][_0x299119(0x7fa)][_0x299119(0xaed)]||0x0;return _0x51d92a+=this[_0x299119(0xbe5)][_0x299119(0x659)](),Math['round'](_0x7fff2a+_0x51d92a);},Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0xa47)]=function(){const _0x224fc3=_0x478a06;return Sprite_Battler[_0x224fc3(0x9c5)][_0x224fc3(0xa47)]['call'](this);},Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x7b3)]=function(){const _0x18aec4=_0x478a06;return Sprite_Battler[_0x18aec4(0x9c5)][_0x18aec4(0x7b3)][_0x18aec4(0x21e)](this);},Sprite_Battler['prototype'][_0x478a06(0x82b)]=function(_0x5bf969){const _0x17f6be=_0x478a06;this['isShownOnBattlePortrait']()?SceneManager[_0x17f6be(0x143)][_0x17f6be(0x967)]['removeDamageSprite'](_0x5bf969):(this[_0x17f6be(0x350)]()[_0x17f6be(0x459)](_0x5bf969),this[_0x17f6be(0x26f)][_0x17f6be(0x553)](_0x5bf969),_0x5bf969['destroy']());},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x61d)]=Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x54a)],Sprite_Battler['prototype'][_0x478a06(0x54a)]=function(_0x4a740d,_0x50aef2){const _0x5bc742=_0x478a06,_0x4287e5=VisuMZ[_0x5bc742(0x1a5)][_0x5bc742(0x468)];if(this['constructor']===Sprite_Actor)_0x4a740d+=_0x4287e5['Actor'][_0x5bc742(0xa50)]||0x0,_0x50aef2+=_0x4287e5['Actor']['OffsetY']||0x0;else this[_0x5bc742(0x930)]===Sprite_Enemy&&(_0x4a740d+=_0x4287e5['Enemy'][_0x5bc742(0xa50)]||0x0,_0x50aef2+=_0x4287e5[_0x5bc742(0x9b6)][_0x5bc742(0x1e8)]||0x0);this['_battler']&&(_0x4a740d=this[_0x5bc742(0xbe5)][_0x5bc742(0x5ab)]??_0x4a740d,_0x50aef2=this[_0x5bc742(0xbe5)][_0x5bc742(0x595)]??_0x50aef2),VisuMZ['BattleCore']['Sprite_Battler_setHome'][_0x5bc742(0x21e)](this,_0x4a740d,_0x50aef2),this[_0x5bc742(0x50a)]=this[_0x5bc742(0xb22)],this[_0x5bc742(0xaa0)]=this[_0x5bc742(0xaca)],this[_0x5bc742(0x4b4)]=0x0,this['_homeWholeDuration']=0x0,this['_homeEasing']=_0x5bc742(0x4df);},VisuMZ[_0x478a06(0x1a5)]['Sprite_Battler_update']=Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x865)],Sprite_Battler[_0x478a06(0x9c5)]['update']=function(){const _0x40d92d=_0x478a06;VisuMZ[_0x40d92d(0x1a5)]['Sprite_Battler_update'][_0x40d92d(0x21e)](this),!this[_0x40d92d(0xbe5)]&&this[_0x40d92d(0x3f9)]&&(this[_0x40d92d(0x3f9)][_0x40d92d(0xbbc)]=![]);},VisuMZ[_0x478a06(0x1a5)]['Sprite_Battler_updateMain']=Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x2d0)],Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x2d0)]=function(){const _0x337473=_0x478a06;this[_0x337473(0x723)](),this[_0x337473(0xb3a)](),this[_0x337473(0x825)](),this[_0x337473(0x44e)](),VisuMZ[_0x337473(0x1a5)][_0x337473(0x195)][_0x337473(0x21e)](this),this[_0x337473(0x259)](),this[_0x337473(0x439)]();if(this[_0x337473(0x930)]===Sprite_Enemy)this[_0x337473(0x466)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x90a)]=Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x7b4)],Sprite_Battler[_0x478a06(0x9c5)]['updatePosition']=function(){const _0x189122=_0x478a06;this[_0x189122(0x974)](),VisuMZ[_0x189122(0x1a5)]['Sprite_Battler_updatePosition'][_0x189122(0x21e)](this),this[_0x189122(0xb26)](),this[_0x189122(0x2df)]();},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x637)]=function(){const _0x3c044d=_0x478a06,_0x5c72f7=this[_0x3c044d(0x803)]();if(this[_0x3c044d(0xbe5)][_0x3c044d(0x8fc)]())this['_selectionEffectCount']++,Graphics[_0x3c044d(0x992)]%0x1e<0xf?_0x5c72f7['setBlendColor']([0xff,0xff,0xff,0x40]):_0x5c72f7['setBlendColor']([0x0,0x0,0x0,0x0]);else this[_0x3c044d(0xa08)]>0x0&&(this['_selectionEffectCount']=0x0,_0x5c72f7[_0x3c044d(0x49c)]([0x0,0x0,0x0,0x0]));},Sprite_Battler['prototype'][_0x478a06(0x8f1)]=function(_0x1198b2,_0x35732e){const _0x54203d=_0x478a06,_0x24ea40=VisuMZ[_0x54203d(0x1a5)][_0x54203d(0x468)];if(this[_0x54203d(0x930)]===Sprite_Actor)_0x1198b2+=_0x24ea40[_0x54203d(0x145)][_0x54203d(0xa50)]||0x0,_0x35732e+=_0x24ea40['Actor']['OffsetY']||0x0;else this[_0x54203d(0x930)]===Sprite_Enemy&&(_0x1198b2+=_0x24ea40['Enemy'][_0x54203d(0xa50)]||0x0,_0x35732e+=_0x24ea40['Enemy'][_0x54203d(0x1e8)]||0x0);const _0x1f8482=_0x1198b2-this[_0x54203d(0xb22)],_0x461db6=_0x35732e-this[_0x54203d(0xaca)];this[_0x54203d(0xb22)]=_0x1198b2,this['_homeY']=_0x35732e,this[_0x54203d(0x7da)]-=_0x1f8482,this[_0x54203d(0xa61)]-=_0x461db6,this[_0x54203d(0xaa1)]-=_0x1f8482,this[_0x54203d(0x89a)]-=_0x461db6,this[_0x54203d(0x7b4)]();},Sprite_Battler[_0x478a06(0x9c5)]['startHomeMove']=function(_0x249a08,_0x37d14a,_0x25c1af,_0x51c475){const _0x4e697b=_0x478a06,_0x5ef0b8=VisuMZ['BattleCore'][_0x4e697b(0x468)];if(this[_0x4e697b(0x930)]===Sprite_Actor)_0x249a08+=_0x5ef0b8[_0x4e697b(0x145)][_0x4e697b(0xa50)]||0x0,_0x37d14a+=_0x5ef0b8[_0x4e697b(0x145)]['OffsetY']||0x0;else this[_0x4e697b(0x930)]===Sprite_Enemy&&(_0x249a08+=_0x5ef0b8[_0x4e697b(0x9b6)][_0x4e697b(0xa50)]||0x0,_0x37d14a+=_0x5ef0b8['Enemy'][_0x4e697b(0x1e8)]||0x0);(this[_0x4e697b(0x50a)]!==_0x249a08||this[_0x4e697b(0xaa0)]!==_0x37d14a)&&(this['_targetHomeX']=_0x249a08,this['_targetHomeY']=_0x37d14a,this[_0x4e697b(0x4b4)]=_0x25c1af,this[_0x4e697b(0x288)]=_0x25c1af,this[_0x4e697b(0x162)]=_0x51c475,_0x25c1af<=0x0&&this['onHomeMoveEnd']());},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x974)]=function(){const _0x88c861=_0x478a06;if(this[_0x88c861(0x4b4)]<=0x0)return;const _0x10182=this[_0x88c861(0x4b4)],_0x5f6ab9=this['_homeWholeDuration'],_0x46e7b8=this[_0x88c861(0x162)];Imported[_0x88c861(0x1a1)]?(this[_0x88c861(0xb22)]=this[_0x88c861(0x7dd)](this['_homeX'],this[_0x88c861(0x50a)],_0x10182,_0x5f6ab9,_0x46e7b8),this[_0x88c861(0xaca)]=this['applyEasing'](this[_0x88c861(0xaca)],this[_0x88c861(0xaa0)],_0x10182,_0x5f6ab9,_0x46e7b8)):(this[_0x88c861(0xb22)]=(this['_homeX']*(_0x10182-0x1)+this[_0x88c861(0x50a)])/_0x10182,this[_0x88c861(0xaca)]=(this[_0x88c861(0xaca)]*(_0x10182-0x1)+this[_0x88c861(0xaa0)])/_0x10182);this[_0x88c861(0x4b4)]--;if(this[_0x88c861(0x4b4)]<=0x0)this[_0x88c861(0x6ee)]();},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x6ee)]=function(){const _0x2432fd=_0x478a06;this[_0x2432fd(0xb22)]=this[_0x2432fd(0x50a)],this[_0x2432fd(0xaca)]=this[_0x2432fd(0xaa0)];},Sprite_Battler[_0x478a06(0x9c5)]['updatePositionBattleCore']=function(){const _0x25a395=_0x478a06;this[_0x25a395(0x392)]=this['x'],this[_0x25a395(0xb38)]=this['y'],this['updateFloat'](),this[_0x25a395(0x434)](),this['x']+=this[_0x25a395(0x59a)](),this['y']+=this[_0x25a395(0x591)](),this['y']+=this['extraPositionScaledY'](),this['x']=Math[_0x25a395(0xa76)](this['x']),this['y']=Math[_0x25a395(0xa76)](this['y']);},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x59a)]=function(){let _0x4c7687=0x0;return _0x4c7687;},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x591)]=function(){const _0x5c3359=_0x478a06;let _0x35fba0=0x0;return this['_battler']&&!this[_0x5c3359(0xbe5)][_0x5c3359(0xabb)]()&&(_0x35fba0-=this['_floatHeight'],_0x35fba0-=this['_jumpHeight']),_0x35fba0;},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0xa22)]=function(){const _0x2cf7f4=_0x478a06;let _0x5a7530=0x0;if(this['_distortionSprite']&&this[_0x2cf7f4(0x930)]!==Sprite_SvEnemy){const _0x3b82b3=this[_0x2cf7f4(0x858)]['scale']['y'];_0x5a7530-=(_0x3b82b3-0x1)*this['height'];}return _0x5a7530;},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x44e)]=function(){const _0x843414=_0x478a06,_0x18082c=this[_0x843414(0xbe5)]&&this[_0x843414(0xbe5)]['isBattlerFlipped']();this['_flipScaleX']=(_0x18082c?-0x1:0x1)*Math[_0x843414(0x42d)](this[_0x843414(0x853)]['x']);},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x6a6)]=function(_0x3a5a74,_0x1836e4,_0x7f7bb8){const _0x3da61d=_0x478a06;if(!this[_0x3da61d(0x8ae)]())return;if(this['_targetFloatHeight']===_0x3a5a74)return;this['_targetFloatHeight']=_0x3a5a74,this[_0x3da61d(0x164)]=_0x1836e4,this[_0x3da61d(0x634)]=_0x1836e4,this[_0x3da61d(0x4d5)]=_0x7f7bb8||_0x3da61d(0x4df);if(_0x1836e4<=0x0)this['_floatHeight']=_0x3a5a74;},Sprite_Battler['prototype'][_0x478a06(0x239)]=function(){const _0x31406f=_0x478a06;if(this[_0x31406f(0x164)]<=0x0)return;const _0x3e926c=this[_0x31406f(0x164)],_0x1554a7=this[_0x31406f(0x634)],_0x353925=this[_0x31406f(0x4d5)];Imported[_0x31406f(0x1a1)]?this[_0x31406f(0x520)]=this[_0x31406f(0x7dd)](this['_floatHeight'],this[_0x31406f(0xb02)],_0x3e926c,_0x1554a7,_0x353925):this[_0x31406f(0x520)]=(this['_floatHeight']*(_0x3e926c-0x1)+this['_targetFloatHeight'])/_0x3e926c;this[_0x31406f(0x164)]--;if(this[_0x31406f(0x164)]<=0x0)this[_0x31406f(0x66b)]();},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x66b)]=function(){const _0x225aa8=_0x478a06;this[_0x225aa8(0x520)]=this[_0x225aa8(0xb02)];},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x8ce)]=function(){const _0xd11ce0=_0x478a06;return this[_0xd11ce0(0x164)]>0x0;},Sprite_Battler[_0x478a06(0x9c5)]['startJump']=function(_0x299358,_0x1bb066){const _0x3bef05=_0x478a06;if(!this['canMove']())return;if(_0x1bb066<=0x0)return;this[_0x3bef05(0x674)]=_0x299358,this['_jumpDuration']=_0x1bb066,this[_0x3bef05(0x551)]=_0x1bb066;},Sprite_Battler['prototype'][_0x478a06(0x434)]=function(){const _0x53073c=_0x478a06;if(this[_0x53073c(0x87b)]<=0x0)return;const _0x44bdf6=this[_0x53073c(0x551)]-this['_jumpDuration'],_0xfaf94c=this[_0x53073c(0x551)]/0x2,_0x544b1a=this['_jumpMaxHeight'],_0x5aa379=-_0x544b1a/Math['pow'](_0xfaf94c,0x2);this[_0x53073c(0x51f)]=_0x5aa379*Math['pow'](_0x44bdf6-_0xfaf94c,0x2)+_0x544b1a,this[_0x53073c(0x87b)]--;if(this[_0x53073c(0x87b)]<=0x0)return this[_0x53073c(0x3a8)]();},Sprite_Battler['prototype'][_0x478a06(0x3a8)]=function(){const _0x3a509a=_0x478a06;this[_0x3a509a(0x51f)]=0x0;},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x979)]=function(){const _0x36b3ab=_0x478a06;return this[_0x36b3ab(0x87b)]>0x0;},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x2a9)]=function(_0x1cf449,_0x46dc0d,_0x3f5005){const _0x1ab246=_0x478a06;if(this[_0x1ab246(0x4ba)]===_0x1cf449)return;this[_0x1ab246(0x4ba)]=_0x1cf449,this['_opacityDuration']=_0x46dc0d,this[_0x1ab246(0x2ee)]=_0x46dc0d,this[_0x1ab246(0x4c3)]=_0x3f5005||_0x1ab246(0x4df);if(_0x46dc0d<=0x0)this[_0x1ab246(0x6d0)]=_0x1cf449;},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x2df)]=function(){const _0x46c758=_0x478a06;if(this[_0x46c758(0x930)][_0x46c758(0x8ff)]==='Sprite_SvEnemy')return;if(this[_0x46c758(0x95d)]<=0x0)return;const _0x1dcb5e=this['_opacityDuration'],_0x1e2b24=this[_0x46c758(0x2ee)],_0x47079b=this[_0x46c758(0x4c3)];Imported[_0x46c758(0x1a1)]?this['opacity']=this[_0x46c758(0x7dd)](this[_0x46c758(0x6d0)],this[_0x46c758(0x4ba)],_0x1dcb5e,_0x1e2b24,_0x47079b):this[_0x46c758(0x6d0)]=(this[_0x46c758(0x6d0)]*(_0x1dcb5e-0x1)+this[_0x46c758(0x4ba)])/_0x1dcb5e;this[_0x46c758(0x95d)]--;if(this[_0x46c758(0x95d)]<=0x0)this['onOpacityEnd']();},Sprite_Battler['prototype'][_0x478a06(0x227)]=function(){const _0x21fbe3=_0x478a06;this[_0x21fbe3(0x6d0)]=this[_0x21fbe3(0x4ba)];},Sprite_Battler[_0x478a06(0x9c5)]['isChangingOpacity']=function(){const _0x2eb3bd=_0x478a06;return this[_0x2eb3bd(0x95d)]>0x0;},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x466)]=function(){const _0x329bb5=_0x478a06;this['_shadowSprite'][_0x329bb5(0xbbc)]=this[_0x329bb5(0xbe5)][_0x329bb5(0x296)](),this[_0x329bb5(0x683)]();},Sprite_Battler['prototype'][_0x478a06(0x683)]=function(){const _0x129816=_0x478a06;if(!this['_shadowSprite'])return;this[_0x129816(0x7f8)]['y']=this[_0x129816(0xb38)]-this['y']-0x2;},Sprite_Battler[_0x478a06(0x9c5)]['updateShadowScale']=function(){const _0x3f2557=_0x478a06;if(!this[_0x3f2557(0xbe5)])return;this[_0x3f2557(0x780)]=this[_0x3f2557(0xbe5)][_0x3f2557(0x8c2)](),this[_0x3f2557(0xc4)]=this[_0x3f2557(0xbe5)][_0x3f2557(0xacd)]();},Game_BattlerBase[_0x478a06(0x9c5)]['battlerShadowScaleX']=function(){const _0x938029=_0x478a06,_0x13acdf=this[_0x938029(0x847)]()?this[_0x938029(0x421)]():this['enemy']();if(_0x13acdf){const _0x582f1d=_0x13acdf[_0x938029(0x39c)];if(_0x582f1d[_0x938029(0x85a)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x582f1d[_0x938029(0x85a)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase['prototype']['battlerShadowScaleY']=function(){const _0x383d83=_0x478a06,_0x5e9ea7=this[_0x383d83(0x847)]()?this['actor']():this[_0x383d83(0x2f2)]();if(_0x5e9ea7){const _0x32a696=_0x5e9ea7[_0x383d83(0x39c)];if(_0x32a696[_0x383d83(0x85a)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x32a696[_0x383d83(0x85a)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x723)]=function(){const _0x543eee=_0x478a06;if(this[_0x543eee(0x930)]===Sprite_SvEnemy)return;this[_0x543eee(0x386)](),this[_0x543eee(0xa69)]();},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0xa69)]=function(){const _0x4e15f6=_0x478a06,_0x12f3f8=this['_distortionSprite'];_0x12f3f8&&(_0x12f3f8[_0x4e15f6(0x853)]['x']=this[_0x4e15f6(0x5df)](),_0x12f3f8[_0x4e15f6(0x853)]['y']=this[_0x4e15f6(0xafc)]());},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x5df)]=function(){const _0x3c69db=_0x478a06;let _0x2fda0c=0x1;return _0x2fda0c*=this['_flipScaleX'],_0x2fda0c*=this[_0x3c69db(0xb3b)],_0x2fda0c;},Sprite_Battler['prototype'][_0x478a06(0xafc)]=function(){const _0x1405f8=_0x478a06;return 0x1*this[_0x1405f8(0x1bb)];},Sprite_Battler['prototype']['mainSpriteWidth']=function(){const _0x11ccdf=_0x478a06;return this[_0x11ccdf(0xaad)]*this[_0x11ccdf(0x5df)]();},Sprite_Battler['prototype'][_0x478a06(0x4c9)]=function(){const _0x54bd38=_0x478a06;return this[_0x54bd38(0x15a)]*this[_0x54bd38(0xafc)]();},Sprite_Battler['prototype']['startGrow']=function(_0x1b535b,_0x3d6040,_0x49f57f,_0x503f31){const _0x23f48b=_0x478a06;if(!this[_0x23f48b(0x8ae)]())return;if(!this['_distortionSprite'])return;if(this['_targetGrowX']===_0x1b535b&&this[_0x23f48b(0x7dc)]===_0x3d6040)return;this[_0x23f48b(0x1a9)]=_0x1b535b,this[_0x23f48b(0x7dc)]=_0x3d6040,this['_growDuration']=_0x49f57f,this[_0x23f48b(0x2f1)]=_0x49f57f,this['_growEasing']=_0x503f31||_0x23f48b(0x4df),_0x49f57f<=0x0&&(this['_growX']=this[_0x23f48b(0x1a9)],this[_0x23f48b(0x1bb)]=this[_0x23f48b(0x7dc)]);},Sprite_Battler[_0x478a06(0x9c5)]['updateGrow']=function(){const _0x353789=_0x478a06;if(this[_0x353789(0xab4)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x1140dc=this['_growDuration'],_0x20f107=this[_0x353789(0x2f1)],_0x59946e=this['_growEasing'];Imported['VisuMZ_0_CoreEngine']?(this[_0x353789(0xb3b)]=this[_0x353789(0x7dd)](this[_0x353789(0xb3b)],this['_targetGrowX'],_0x1140dc,_0x20f107,_0x59946e),this[_0x353789(0x1bb)]=this[_0x353789(0x7dd)](this['_growY'],this[_0x353789(0x7dc)],_0x1140dc,_0x20f107,_0x59946e)):(this['_growX']=(this['_growX']*(_0x1140dc-0x1)+this[_0x353789(0x1a9)])/_0x1140dc,this[_0x353789(0x1bb)]=(this[_0x353789(0x1bb)]*(_0x1140dc-0x1)+this[_0x353789(0x7dc)])/_0x1140dc);this[_0x353789(0xab4)]--;if(this[_0x353789(0xab4)]<=0x0)this[_0x353789(0x8ba)]();},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x8ba)]=function(){const _0x14baaa=_0x478a06;this[_0x14baaa(0xb3b)]=this[_0x14baaa(0x1a9)],this['_growY']=this[_0x14baaa(0x7dc)];},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x24f)]=function(){const _0x2351ae=_0x478a06;return this[_0x2351ae(0xab4)]>0x0;},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x38c)]=function(_0x40577a,_0x4dd2d4,_0x545ac1,_0x3c1ee7){const _0x97f2cb=_0x478a06;if(!this['canMove']())return;if(!this[_0x97f2cb(0x858)])return;if(this[_0x97f2cb(0x4ce)]===_0x40577a&&this[_0x97f2cb(0x7eb)]===_0x4dd2d4)return;this[_0x97f2cb(0x4ce)]=_0x40577a,this['_targetSkewY']=_0x4dd2d4,this['_skewDuration']=_0x545ac1,this['_skewWholeDuration']=_0x545ac1,this[_0x97f2cb(0x207)]=_0x3c1ee7||_0x97f2cb(0x4df),_0x545ac1<=0x0&&(this[_0x97f2cb(0x858)][_0x97f2cb(0x23d)]['x']=this[_0x97f2cb(0x4ce)],this[_0x97f2cb(0x858)][_0x97f2cb(0x23d)]['y']=this[_0x97f2cb(0x7eb)]);},Sprite_Battler['prototype']['updateSkew']=function(){const _0x37f43b=_0x478a06;if(this[_0x37f43b(0x899)]<=0x0)return;if(!this[_0x37f43b(0x858)])return;const _0x59f851=this[_0x37f43b(0x899)],_0xecda4=this[_0x37f43b(0x5ce)],_0x24f117=this[_0x37f43b(0x207)],_0x268732=this[_0x37f43b(0x858)];Imported[_0x37f43b(0x1a1)]?(_0x268732[_0x37f43b(0x23d)]['x']=this[_0x37f43b(0x7dd)](_0x268732[_0x37f43b(0x23d)]['x'],this[_0x37f43b(0x4ce)],_0x59f851,_0xecda4,_0x24f117),_0x268732[_0x37f43b(0x23d)]['y']=this[_0x37f43b(0x7dd)](_0x268732[_0x37f43b(0x23d)]['y'],this[_0x37f43b(0x7eb)],_0x59f851,_0xecda4,_0x24f117)):(_0x268732['skew']['x']=(_0x268732['skew']['x']*(_0x59f851-0x1)+this[_0x37f43b(0x4ce)])/_0x59f851,_0x268732[_0x37f43b(0x23d)]['y']=(_0x268732[_0x37f43b(0x23d)]['y']*(_0x59f851-0x1)+this[_0x37f43b(0x7eb)])/_0x59f851);this[_0x37f43b(0x899)]--;if(this['_skewDuration']<=0x0)this[_0x37f43b(0x1ad)]();},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x1ad)]=function(){const _0x598bcf=_0x478a06;this[_0x598bcf(0x858)][_0x598bcf(0x23d)]['x']=this['_targetSkewX'],this['_distortionSprite'][_0x598bcf(0x23d)]['y']=this[_0x598bcf(0x7eb)];},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x8c6)]=function(){return this['_skewDuration']>0x0;},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x148)]=function(_0x26cc6f,_0x4108bd,_0x1024c5,_0x1138a7){const _0x4d9ead=_0x478a06;if(!this[_0x4d9ead(0x8ae)]())return;if(!this[_0x4d9ead(0x858)])return;if(this[_0x4d9ead(0x859)]===_0x26cc6f)return;this[_0x4d9ead(0x859)]=_0x26cc6f,this[_0x4d9ead(0x314)]=_0x4108bd,this[_0x4d9ead(0x1e5)]=_0x4108bd,this[_0x4d9ead(0x303)]=_0x1024c5||'Linear',this['_angleRevertOnFinish']=_0x1138a7,this['_angleRevertOnFinish']===undefined&&(this[_0x4d9ead(0x242)]=!![]),_0x4108bd<=0x0&&(this['_currentAngle']=_0x26cc6f,this[_0x4d9ead(0x242)]&&(this[_0x4d9ead(0x859)]=0x0,this[_0x4d9ead(0x118)]=0x0));},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x825)]=function(){const _0x36e0e7=_0x478a06;this[_0x36e0e7(0x337)](),this[_0x36e0e7(0x37c)]();},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x337)]=function(){const _0x416bc0=_0x478a06;if(this['_angleDuration']<=0x0)return;const _0x593f5c=this[_0x416bc0(0x314)],_0x4ae1bf=this[_0x416bc0(0x1e5)],_0x2c9acb=this[_0x416bc0(0x303)];Imported[_0x416bc0(0x1a1)]?this[_0x416bc0(0x118)]=this[_0x416bc0(0x7dd)](this['_currentAngle'],this[_0x416bc0(0x859)],_0x593f5c,_0x4ae1bf,_0x2c9acb):this[_0x416bc0(0x118)]=(this[_0x416bc0(0x118)]*(_0x593f5c-0x1)+this[_0x416bc0(0x859)])/_0x593f5c;this['_angleDuration']--;if(this[_0x416bc0(0x314)]<=0x0)this[_0x416bc0(0x80a)]();},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x80a)]=function(){const _0x2c7513=_0x478a06;this['_currentAngle']=this[_0x2c7513(0x859)],this[_0x2c7513(0x242)]&&(this[_0x2c7513(0x859)]=0x0,this['_currentAngle']=0x0);},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x87f)]=function(){const _0x40c3a5=_0x478a06;return this[_0x40c3a5(0x314)]>0x0;},Sprite_Battler['prototype']['applyAngleChange']=function(){const _0x11a477=_0x478a06;if(!this[_0x11a477(0x858)])return;const _0x567a87=this[_0x11a477(0x118)],_0x470461=this[_0x11a477(0x853)]['x'],_0x5d7522=this[_0x11a477(0xbe5)][_0x11a477(0x847)]()?-0x1:0x1;this[_0x11a477(0x858)][_0x11a477(0xc7)]=_0x567a87*_0x470461*_0x5d7522;const _0x281726=this[_0x11a477(0x858)][_0x11a477(0x853)]['y'];this[_0x11a477(0x858)]['y']=this[_0x11a477(0x15a)]*-0.5*(0x2-_0x281726),this[_0x11a477(0x858)]['y']=Math[_0x11a477(0x4f5)](this[_0x11a477(0x858)]['y']);const _0x491b81=[this[_0x11a477(0x575)],this[_0x11a477(0x80b)],this[_0x11a477(0xaeb)]];for(const _0x3ee6bf of _0x491b81){if(!_0x3ee6bf)continue;_0x3ee6bf['y']=this[_0x11a477(0x15a)]*0.5;}this[_0x11a477(0x7f8)]&&(this[_0x11a477(0x780)]=this[_0x11a477(0x780)]??0x1,this[_0x11a477(0xc4)]=this[_0x11a477(0xc4)]??0x1,this['_shadowSprite'][_0x11a477(0x853)]['x']=this[_0x11a477(0x858)][_0x11a477(0x853)]['x']*this['_shadowScaleX'],this[_0x11a477(0x7f8)][_0x11a477(0x853)]['y']=this[_0x11a477(0x858)]['scale']['y']*this[_0x11a477(0xc4)]);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x92a)]=Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x909)],Sprite_Actor['prototype'][_0x478a06(0x909)]=function(){const _0x3d917d=_0x478a06;VisuMZ[_0x3d917d(0x1a5)][_0x3d917d(0x92a)]['call'](this),VisuMZ['BattleCore'][_0x3d917d(0x468)][_0x3d917d(0x2ae)][_0x3d917d(0x5f1)]&&this[_0x3d917d(0x44f)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x6ce)]=Sprite_Enemy['prototype']['createStateIconSprite'],Sprite_Enemy[_0x478a06(0x9c5)]['createStateIconSprite']=function(){const _0x33c84d=_0x478a06;VisuMZ[_0x33c84d(0x1a5)]['Settings'][_0x33c84d(0x2ae)][_0x33c84d(0x500)]&&this[_0x33c84d(0x44f)](),VisuMZ['BattleCore'][_0x33c84d(0x6ce)][_0x33c84d(0x21e)](this);},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x44f)]=function(){const _0x49b5d3=_0x478a06;if(!ConfigManager['visualHpGauge'])return;if(this[_0x49b5d3(0x930)]===Sprite_SvEnemy)return;const _0x15a0c7=VisuMZ[_0x49b5d3(0x1a5)][_0x49b5d3(0x468)][_0x49b5d3(0x2ae)],_0x5859f7=new Sprite_HpGauge();_0x5859f7['anchor']['x']=_0x15a0c7[_0x49b5d3(0x820)],_0x5859f7[_0x49b5d3(0x488)]['y']=_0x15a0c7['AnchorY'],_0x5859f7[_0x49b5d3(0x853)]['x']=_0x5859f7[_0x49b5d3(0x853)]['y']=_0x15a0c7[_0x49b5d3(0x228)],this[_0x49b5d3(0x3f9)]=_0x5859f7,this[_0x49b5d3(0xb9b)](this[_0x49b5d3(0x3f9)]),Spriteset_Battle[_0x49b5d3(0x339)]&&BattleManager[_0x49b5d3(0x937)](this[_0x49b5d3(0x3f9)]);},VisuMZ['BattleCore'][_0x478a06(0x8e4)]=Sprite_Battler['prototype'][_0x478a06(0x1c9)],Sprite_Battler['prototype'][_0x478a06(0x1c9)]=function(_0x53fb5f){const _0x459efd=_0x478a06,_0x194f5c=this[_0x459efd(0xbe5)];VisuMZ['BattleCore'][_0x459efd(0x8e4)][_0x459efd(0x21e)](this,_0x53fb5f),this['setupHpGaugeSprite'](_0x53fb5f);if(_0x194f5c!==_0x53fb5f)this[_0x459efd(0x117)]();},Sprite_Battler[_0x478a06(0x9c5)]['setupHpGaugeSprite']=function(_0x3aea8a){const _0x4b40bd=_0x478a06;if(!_0x3aea8a)return;if(!this[_0x4b40bd(0x3f9)])return;if(_0x3aea8a[_0x4b40bd(0x847)]()){}else{if(_0x3aea8a[_0x4b40bd(0x8e3)]()){if(this[_0x4b40bd(0x930)]===Sprite_SvEnemy&&!_0x3aea8a['hasSvBattler']())return;}}this[_0x4b40bd(0x3f9)][_0x4b40bd(0x40f)](_0x3aea8a,'hp');},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x346)]=function(){const _0x2bf903=_0x478a06;return this[_0x2bf903(0xbe5)]&&this[_0x2bf903(0xbe5)]['hasStaticSvBattler']();},Sprite_Battler['prototype']['updateStaticSvBattlerFrames']=function(){const _0x5b3166=_0x478a06,_0x1fc32d=this[_0x5b3166(0x575)][_0x5b3166(0x410)];if(!_0x1fc32d)return;const _0x4fb06c=_0x1fc32d['width'];let _0x3d7d76=_0x1fc32d[_0x5b3166(0x15a)];if(this[_0x5b3166(0xbe5)][_0x5b3166(0x9c0)]()){if(this[_0x5b3166(0x696)])_0x3d7d76=Math[_0x5b3166(0x896)](0x0,this['_frame'][_0x5b3166(0x15a)]-0x4);}this[_0x5b3166(0x575)]['setFrame'](0x0,0x0,_0x4fb06c,_0x3d7d76),this[_0x5b3166(0xb06)](0x0,0x0,_0x4fb06c,_0x3d7d76);},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x259)]=function(){const _0x5b8f73=_0x478a06;if(!this[_0x5b8f73(0xbe5)])return;if(!this[_0x5b8f73(0x3f9)])return;const _0x4d50a4=VisuMZ[_0x5b8f73(0x1a5)][_0x5b8f73(0x468)][_0x5b8f73(0x2ae)],_0x431c38=this[_0x5b8f73(0x3f9)];_0x431c38[_0x5b8f73(0xbbc)]=this['isVisualHpGaugeDisplayed']();const _0x5454a3=_0x4d50a4[_0x5b8f73(0xa50)],_0x5a8ce8=_0x4d50a4[_0x5b8f73(0x1e8)];_0x431c38['x']=_0x5454a3,_0x431c38['x']+=this[_0x5b8f73(0xbe5)][_0x5b8f73(0x6ac)](),_0x431c38['y']=-this['height']+_0x5a8ce8,_0x431c38['y']+=this[_0x5b8f73(0xbe5)][_0x5b8f73(0x2e2)](),Spriteset_Battle[_0x5b8f73(0x339)]&&SceneManager['_scene'][_0x5b8f73(0x526)]&&(_0x431c38['x']+=this['x'],_0x431c38['y']+=this['y']);},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x139)]=function(){const _0x2f6355=_0x478a06;if(!this['_battler'])return![];if(this[_0x2f6355(0xbe5)][_0x2f6355(0x847)]())return!![];if(this['_battler']['isHidden']())return![];if(this[_0x2f6355(0x6d0)]<=0x0)return![];const _0xb37fe4=this[_0x2f6355(0xbe5)][_0x2f6355(0x2f2)]()[_0x2f6355(0x39c)];if(_0xb37fe4[_0x2f6355(0x85a)](/<SHOW HP GAUGE>/i))return!![];if(_0xb37fe4[_0x2f6355(0x85a)](/<HIDE HP GAUGE>/i))return![];const _0x27389c=VisuMZ['BattleCore'][_0x2f6355(0x468)]['HpGauge'];if(_0x27389c['RequiresDefeat']){if(_0x27389c[_0x2f6355(0x380)]&&BattleManager[_0x2f6355(0xbb5)]())return!![];if(this[_0x2f6355(0xbe5)][_0x2f6355(0x1e1)])return![];return this[_0x2f6355(0xbe5)]['hasBeenDefeatedBefore']();}return!![];},VisuMZ['BattleCore'][_0x478a06(0xb83)]=Sprite_Battler['prototype'][_0x478a06(0x4fb)],Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x4fb)]=function(){const _0x4b06e4=_0x478a06;if(!this['_battler'])return![];if(this[_0x4b06e4(0x4b4)]>0x0)return!![];return VisuMZ[_0x4b06e4(0x1a5)]['Sprite_Battler_isMoving'][_0x4b06e4(0x21e)](this);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xea)]=Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0xa33)],Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0xa33)]=function(_0x3ae2f8,_0x4941a1,_0x3cd9c2){const _0x799575=_0x478a06;this['canMove']()&&VisuMZ[_0x799575(0x1a5)][_0x799575(0xea)]['call'](this,_0x3ae2f8,_0x4941a1,_0x3cd9c2);},Sprite_Battler['prototype'][_0x478a06(0x8ae)]=function(){const _0x5a4f4b=_0x478a06;if(this[_0x5a4f4b(0xbe5)]&&this[_0x5a4f4b(0xbe5)][_0x5a4f4b(0x9c0)]())return![];if(this[_0x5a4f4b(0xbe5)]&&!this[_0x5a4f4b(0xbe5)][_0x5a4f4b(0x812)]())return![];return $gameSystem[_0x5a4f4b(0x787)]();},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x2d5)]=function(){},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x89c)]=function(){const _0x5eeca3=_0x478a06;this[_0x5eeca3(0xa33)](0x0,0x0,0xc);},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x80f)]=function(){},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x7a9)]=function(){const _0x5443ce=_0x478a06,_0x3facaf=VisuMZ[_0x5443ce(0x1a5)][_0x5443ce(0x468)][_0x5443ce(0x145)],_0x1b183e=this[_0x5443ce(0xbe5)]&&this['_battler']['isActor']()?0x1:-0x1,_0xe15337=this[_0x5443ce(0x392)]-this[_0x5443ce(0xb22)]+_0x1b183e*_0x3facaf[_0x5443ce(0x759)],_0x26297a=this[_0x5443ce(0xb38)]-this[_0x5443ce(0xaca)]+_0x1b183e*_0x3facaf[_0x5443ce(0x50e)],_0x458794=_0x3facaf[_0x5443ce(0x408)];this[_0x5443ce(0xa33)](_0xe15337,_0x26297a,_0x458794);},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x8e9)]=function(_0x4c049d,_0x566392){const _0x4ce48d=_0x478a06,_0x2019f9=VisuMZ[_0x4ce48d(0x1a5)][_0x4ce48d(0x468)][_0x4ce48d(0x145)];this[_0x4ce48d(0x3b6)]=Math[_0x4ce48d(0x4f5)]((_0x2019f9['ShakeFlinchDuration']??0x18)*_0x566392),this['_shakeFlinchPower']=Math[_0x4ce48d(0x896)](this[_0x4ce48d(0x9b7)],_0x4c049d);},Sprite_Battler[_0x478a06(0x9c5)][_0x478a06(0x439)]=function(){const _0x2bec5e=_0x478a06,_0x34b150=VisuMZ[_0x2bec5e(0x1a5)]['Settings'][_0x2bec5e(0x145)];if(!(_0x34b150['ShakeFlinch']??![]))return;if(this[_0x2bec5e(0x3b6)]>0x0){const _0x25f291=this['_shakeFlinchDuration'];this[_0x2bec5e(0x9b7)]=this['_shakeFlinchPower']*(_0x25f291-0x1)/_0x25f291,this[_0x2bec5e(0x3b6)]--,this[_0x2bec5e(0x3b6)]<=0x0&&(this[_0x2bec5e(0x9b7)]=0x0);}this['_shakeFlinchPower']>0x0?(this['_mainSprite']['x']=Math[_0x2bec5e(0x679)](this['_shakeFlinchPower'])*(Math['random']()<0.5?-0x1:0x1),this[_0x2bec5e(0xb38)]!==this['y']&&(this[_0x2bec5e(0x575)]['y']=this[_0x2bec5e(0x15a)]*0.5,this[_0x2bec5e(0x575)]['y']+=Math[_0x2bec5e(0x679)](this[_0x2bec5e(0x9b7)])*(Math[_0x2bec5e(0x8a1)]()<0.5?-0x1:0x1))):(this[_0x2bec5e(0x575)]['x']=0x0,this['_mainSprite']['y']=this[_0x2bec5e(0x15a)]*0.5);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xade)]=Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x2ef)],Sprite_Actor[_0x478a06(0x9c5)]['initMembers']=function(){const _0x246dc2=_0x478a06;VisuMZ[_0x246dc2(0x1a5)]['Sprite_Actor_initMembers'][_0x246dc2(0x21e)](this),this['attachSpritesToDistortionSprite']();},Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x803)]=function(){const _0x32eb0d=_0x478a06;return this['_distortionSprite']||this[_0x32eb0d(0x575)]||this;},VisuMZ[_0x478a06(0x1a5)]['Sprite_Actor_moveToStartPosition']=Sprite_Actor['prototype'][_0x478a06(0x405)],Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x405)]=function(){},Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0xbdb)]=function(_0x5a5a7a){const _0x211335=_0x478a06;if(SceneManager[_0x211335(0x27b)]())return;if(!_0x5a5a7a)return;if(!_0x5a5a7a['canMove']())return;VisuMZ['BattleCore'][_0x211335(0x4ac)]['call'](this);},VisuMZ[_0x478a06(0x1a5)]['Sprite_Actor_setActorHome']=Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x7c5)],Sprite_Actor[_0x478a06(0x9c5)]['setActorHome']=function(_0x4f7452){const _0x37487e=_0x478a06;VisuMZ[_0x37487e(0x1a5)][_0x37487e(0x468)][_0x37487e(0x145)][_0x37487e(0x2d1)]?VisuMZ[_0x37487e(0x1a5)][_0x37487e(0x468)][_0x37487e(0x145)][_0x37487e(0x2d1)][_0x37487e(0x21e)](this,_0x4f7452):VisuMZ[_0x37487e(0x1a5)][_0x37487e(0x282)][_0x37487e(0x21e)](this,_0x4f7452);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xa84)]=Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x1c9)],Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x1c9)]=function(_0x38bc28){const _0x136005=_0x478a06;VisuMZ['BattleCore'][_0x136005(0xa84)]['call'](this,_0x38bc28),this[_0x136005(0x882)](_0x38bc28);},Sprite_Actor['prototype']['setBattlerBattleCore']=function(_0x26fef6){const _0x1b0039=_0x478a06;if(!_0x26fef6)return;if(!this[_0x1b0039(0x575)])return;this[_0x1b0039(0x575)][_0x1b0039(0x488)]['x']=this[_0x1b0039(0x917)]['svBattlerAnchorX'](),this[_0x1b0039(0x575)][_0x1b0039(0x488)]['y']=this[_0x1b0039(0x917)]['svBattlerAnchorY'](),this['updateShadowVisibility']();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x905)]=Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x865)],Sprite_Actor['prototype'][_0x478a06(0x865)]=function(){const _0x2822dd=_0x478a06;VisuMZ[_0x2822dd(0x1a5)][_0x2822dd(0x905)][_0x2822dd(0x21e)](this),this[_0x2822dd(0x917)]&&(this[_0x2822dd(0x3f6)](),this[_0x2822dd(0x440)]());},VisuMZ['BattleCore'][_0x478a06(0x1d2)]=Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x72a)],Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x72a)]=function(){const _0x1266ec=_0x478a06;VisuMZ['BattleCore'][_0x1266ec(0x1d2)][_0x1266ec(0x21e)](this),this['_mainSprite']&&this['_mainSprite'][_0x1266ec(0x410)]&&this[_0x1266ec(0xbe5)]&&(this[_0x1266ec(0x575)]['bitmap']['smooth']!==this[_0x1266ec(0xbe5)][_0x1266ec(0x37d)]()&&(this[_0x1266ec(0x575)][_0x1266ec(0x410)][_0x1266ec(0xace)]=this[_0x1266ec(0xbe5)][_0x1266ec(0x37d)]()));},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x3aa)]=Sprite_Actor['prototype'][_0x478a06(0x466)],Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x466)]=function(){const _0x3409ec=_0x478a06;VisuMZ[_0x3409ec(0x1a5)][_0x3409ec(0x3aa)][_0x3409ec(0x21e)](this),this['updateShadowBattleCore']();},Sprite_Actor['prototype'][_0x478a06(0x72f)]=function(){const _0x15b06b=_0x478a06;if(!this[_0x15b06b(0x575)])return;if(!this[_0x15b06b(0x7f8)])return;this['updateShadowVisibility'](),this[_0x15b06b(0x683)]();},Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x3f6)]=function(){const _0x214b3a=_0x478a06;{this[_0x214b3a(0x4a5)]['scale']['x']=0x1/(this[_0x214b3a(0x853)]['x']||0.001),this[_0x214b3a(0x4a5)]['scale']['y']=0x1/(this[_0x214b3a(0x853)]['y']||0.001);}{this[_0x214b3a(0x4a5)]['x']=0x0,this[_0x214b3a(0x4a5)]['y']=-this[_0x214b3a(0x15a)]-0x20+0x60;const _0x16383=VisuMZ['BattleCore'][_0x214b3a(0x468)][_0x214b3a(0x145)];this[_0x214b3a(0x4a5)]['x']+=_0x16383[_0x214b3a(0xb80)]??0x0,this[_0x214b3a(0x4a5)]['y']+=_0x16383[_0x214b3a(0x9bd)]??0x0;}},Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x440)]=function(){const _0x3c2b87=_0x478a06;if(!$gameSystem[_0x3c2b87(0x787)]()&&this[_0x3c2b87(0x930)]===Sprite_Actor){const _0x1dea84=Scene_Battle[_0x3c2b87(0x9c5)][_0x3c2b87(0x716)]();[_0x3c2b87(0x8e6),_0x3c2b87(0x841),_0x3c2b87(0x596),_0x3c2b87(0x444)][_0x3c2b87(0x982)](_0x1dea84)&&(this[_0x3c2b87(0x6d0)]=0x0);}},Sprite_Actor[_0x478a06(0x9c5)]['refreshMotion']=function(){const _0x5e5425=_0x478a06,_0x4f11df=this[_0x5e5425(0x917)];if(_0x4f11df){if(_0x4f11df[_0x5e5425(0x737)])return;const _0x483300=_0x4f11df[_0x5e5425(0x3b8)]();if(_0x4f11df[_0x5e5425(0x8bc)]()||_0x4f11df[_0x5e5425(0x326)]())this[_0x5e5425(0x166)]('walk');else{if(_0x483300===0x3)this['startMotion'](_0x5e5425(0x30d));else{if(_0x483300===0x2)this['startMotion']('sleep');else{if(this[_0x5e5425(0x8fd)])this[_0x5e5425(0x166)]('escape');else{if(_0x4f11df[_0x5e5425(0x984)]())this[_0x5e5425(0x166)]('wait');else{if(_0x4f11df['isChanting']())this[_0x5e5425(0x166)](_0x5e5425(0x33d));else{if(_0x4f11df[_0x5e5425(0x1fd)]()||_0x4f11df['isGuardWaiting']())this[_0x5e5425(0x166)](_0x5e5425(0x7cc));else{if(_0x483300===0x1)this[_0x5e5425(0x166)](_0x5e5425(0x538));else{if(_0x4f11df[_0x5e5425(0xa6e)]())this[_0x5e5425(0x166)](_0x5e5425(0x40b));else{if(_0x4f11df['isUndecided']())this[_0x5e5425(0x166)](_0x5e5425(0x3bd));else _0x4f11df[_0x5e5425(0x767)]()?this[_0x5e5425(0x166)](_0x5e5425(0xe3)):this[_0x5e5425(0x166)](_0x5e5425(0x3bd));}}}}}}}}}}},Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x80f)]=function(){const _0x218e2e=_0x478a06,_0x2d0fc4=0xa,_0xfa8850=0x12c*_0x2d0fc4,_0x504807=0x1e*_0x2d0fc4;this[_0x218e2e(0xa33)](_0xfa8850,0x0,_0x504807);},Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x9c9)]=function(){const _0x17a4ee=_0x478a06;Sprite_Battler[_0x17a4ee(0x9c5)]['onMoveEnd'][_0x17a4ee(0x21e)](this);},Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x5e5)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Weapon[_0x478a06(0x9c5)][_0x478a06(0xad4)]=function(){const _0x34fc47=_0x478a06;return Sprite_Battler[_0x34fc47(0x846)];},Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x46b)]=function(){},Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x2bd)]=function(){},Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x32a)]=function(){const _0x5e0715=_0x478a06;if(this[_0x5e0715(0x6e8)]&&++this[_0x5e0715(0x510)]>=this[_0x5e0715(0x5e5)]()){if(this[_0x5e0715(0x6e8)][_0x5e0715(0x1c6)])this[_0x5e0715(0x69b)]=(this['_pattern']+0x1)%0x4;else{if(this[_0x5e0715(0x69b)]<0x2)this[_0x5e0715(0x69b)]++;else{const _0x5f41b8=this[_0x5e0715(0x917)];if(_0x5f41b8)_0x5f41b8['_performDamageMotion']=undefined;this[_0x5e0715(0xaff)]();}}this[_0x5e0715(0x510)]=0x0;}},Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x111)]=function(_0x18e637){const _0x17565d=_0x478a06;if(this[_0x17565d(0xbe5)]&&this[_0x17565d(0xbe5)][_0x17565d(0x9c0)]()){this['_motion']=Sprite_Actor['MOTIONS'][_0x17565d(0x30d)];return;}const _0x2cab27=Sprite_Actor[_0x17565d(0xbda)][_0x18e637];this['_motion']=_0x2cab27,this[_0x17565d(0x510)]=0x0,this[_0x17565d(0x69b)]=0x0;},Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x721)]=function(_0x36d589){const _0x8da2e7=_0x478a06;if(this['hasStaticSvBattler']())return;this['adjustWeaponSpriteOffset'](),this[_0x8da2e7(0x3c5)][_0x8da2e7(0x40f)](_0x36d589),this['_actor'][_0x8da2e7(0x90f)]();},Sprite_Actor['prototype'][_0x478a06(0x772)]=function(){const _0x387a62=_0x478a06;let _0x47cce0=-0x10,_0x81d561=this[_0x387a62(0x15a)]*0.5;const _0x4b78c0=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x3c671d=this['_battler']['traitObjects']()[_0x387a62(0x77a)](_0x24d494=>_0x24d494&&_0x24d494[_0x387a62(0x39c)][_0x387a62(0x85a)](_0x4b78c0)?Number(RegExp['$1']):0x0),_0x38a30a=this['_battler'][_0x387a62(0x7f4)]()[_0x387a62(0x77a)](_0x560418=>_0x560418&&_0x560418[_0x387a62(0x39c)]['match'](_0x4b78c0)?Number(RegExp['$2']):0x0);_0x47cce0=_0x3c671d[_0x387a62(0x41f)]((_0x3f32ae,_0x8563cc)=>_0x3f32ae+_0x8563cc,_0x47cce0),_0x81d561=_0x38a30a[_0x387a62(0x41f)]((_0x788fd9,_0x310a8c)=>_0x788fd9+_0x310a8c,_0x81d561),this[_0x387a62(0x3c5)]['x']=_0x47cce0,this[_0x387a62(0x3c5)]['y']=_0x81d561,this[_0x387a62(0x3c5)][_0x387a62(0x865)]();},Sprite_Weapon['prototype']['setup']=function(_0x4a95ed){const _0x2d3897=_0x478a06;this[_0x2d3897(0x7be)]=_0x4a95ed,this[_0x2d3897(0x890)]=-0x1,this['_pattern']=0x0,this[_0x2d3897(0x419)](),this[_0x2d3897(0xb00)]();},Sprite_Actor[_0x478a06(0x9c5)]['updateTargetPosition']=function(){},Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0x2d5)]=function(){const _0x1da150=_0x478a06,_0x5e0978=VisuMZ[_0x1da150(0x1a5)][_0x1da150(0x468)][_0x1da150(0xaef)],_0x4debc4=_0x5e0978['StepDistanceX'],_0x7edbca=_0x5e0978['StepDistanceY'],_0x537894=_0x5e0978[_0x1da150(0x8f2)];this[_0x1da150(0xa33)](-_0x4debc4,-_0x7edbca,_0x537894);},VisuMZ['BattleCore'][_0x478a06(0x5ad)]=Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0xb00)],Sprite_Actor[_0x478a06(0x9c5)][_0x478a06(0xb00)]=function(){const _0x520c70=_0x478a06;this['hasStaticSvBattler']()?this[_0x520c70(0x6ff)]():(this[_0x520c70(0xc6)](),VisuMZ[_0x520c70(0x1a5)][_0x520c70(0x5ad)][_0x520c70(0x21e)](this));},Sprite_Actor[_0x478a06(0x9c5)]['applyFreezeMotionFrames']=function(){const _0x45ec91=_0x478a06;if(this[_0x45ec91(0xbe5)]&&this[_0x45ec91(0xbe5)][_0x45ec91(0xb2b)]){const _0x45bb0f=this[_0x45ec91(0xbe5)][_0x45ec91(0xb2b)];this[_0x45ec91(0x6e8)]=Sprite_Actor[_0x45ec91(0xbda)][_0x45bb0f[_0x45ec91(0x2c6)]],this[_0x45ec91(0x69b)]=_0x45bb0f['pattern'];const _0x43747a=this[_0x45ec91(0x3c5)];_0x43747a[_0x45ec91(0x862)](_0x45bb0f['weaponImageId'],_0x45bb0f[_0x45ec91(0x69e)]),this['adjustWeaponSpriteOffset']();}},Sprite_Weapon[_0x478a06(0x9c5)][_0x478a06(0x862)]=function(_0x3d56d6,_0x59be3a){const _0x478a65=_0x478a06;this[_0x478a65(0x7be)]=_0x3d56d6,this[_0x478a65(0x890)]=-Infinity,this[_0x478a65(0x69b)]=_0x59be3a,this[_0x478a65(0x419)](),this[_0x478a65(0xb00)]();},Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0x2ef)]=function(){const _0x29fb43=_0x478a06;Sprite_Battler[_0x29fb43(0x9c5)][_0x29fb43(0x2ef)][_0x29fb43(0x21e)](this),this['_enemy']=null,this['_appeared']=![],this[_0x29fb43(0x31e)]='',this[_0x29fb43(0x399)]=0x0,this[_0x29fb43(0x59b)]=null,this[_0x29fb43(0x2d4)]=0x0,this[_0x29fb43(0x8a2)]=0x0,this[_0x29fb43(0x20b)](),this[_0x29fb43(0x2b7)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x64d)]=Sprite_Enemy[_0x478a06(0x9c5)]['update'],Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0x865)]=function(){const _0x2b1c20=_0x478a06;VisuMZ[_0x2b1c20(0x1a5)]['Sprite_Enemy_update'][_0x2b1c20(0x21e)](this),this[_0x2b1c20(0xa4a)](),this['updateNameTempVisibility']();},Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0x20b)]=function(){const _0x3579ca=_0x478a06;this[_0x3579ca(0x575)]=new Sprite(),this['_mainSprite'][_0x3579ca(0x488)]['x']=0.5,this[_0x3579ca(0x575)][_0x3579ca(0x488)]['y']=0x1,this['addChild'](this[_0x3579ca(0x575)]),this['attachSpritesToDistortionSprite']();},Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0x803)]=function(){const _0x13d521=_0x478a06;return this[_0x13d521(0x858)]||this[_0x13d521(0x575)]||this;},Sprite_Enemy[_0x478a06(0x9c5)]['loadBitmap']=function(_0x4c2bd8){const _0x216cb8=_0x478a06;this[_0x216cb8(0x410)]=new Bitmap(0x1,0x1);if(this[_0x216cb8(0x296)]()){const _0x47419d=this['_enemy']['svBattlerData']();this['bitmap']=new Bitmap(_0x47419d[_0x216cb8(0xaad)],_0x47419d['height']),this[_0x216cb8(0x575)][_0x216cb8(0x410)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x216cb8(0x787)]()){const _0x222023=ImageManager[_0x216cb8(0x9f5)](_0x4c2bd8);_0x222023[_0x216cb8(0x9d1)](this[_0x216cb8(0x760)][_0x216cb8(0x543)](this,_0x222023));}else{const _0x2f745e=ImageManager[_0x216cb8(0x284)](_0x4c2bd8);_0x2f745e[_0x216cb8(0x9d1)](this[_0x216cb8(0x760)][_0x216cb8(0x543)](this,_0x2f745e));}}},Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0x760)]=function(_0x10dd6c){const _0xe1e276=_0x478a06;this[_0xe1e276(0x575)][_0xe1e276(0x410)]=_0x10dd6c,this[_0xe1e276(0x410)]=new Bitmap(_0x10dd6c[_0xe1e276(0xaad)],_0x10dd6c[_0xe1e276(0x15a)]);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x356)]=Sprite_Enemy[_0x478a06(0x9c5)]['setHue'],Sprite_Enemy['prototype'][_0x478a06(0x2a4)]=function(_0x1a6121){const _0x4892bb=_0x478a06;this[_0x4892bb(0x575)]&&this['_mainSprite']['setHue'](_0x1a6121);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x21c)]=Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0x824)],Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0x824)]=function(){const _0xdf9b3b=_0x478a06;this[_0xdf9b3b(0x73b)]()?VisuMZ[_0xdf9b3b(0x1a5)][_0xdf9b3b(0x21c)][_0xdf9b3b(0x21e)](this):(this[_0xdf9b3b(0x1cf)]=!this[_0xdf9b3b(0xadd)]['isHidden'](),!this['_appeared']&&(this[_0xdf9b3b(0x6d0)]=0x0));},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x464)]=Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0x976)],Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0x976)]=function(){const _0x175281=_0x478a06;if(this[_0x175281(0x73b)]())VisuMZ[_0x175281(0x1a5)][_0x175281(0x464)][_0x175281(0x21e)](this);},Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0xb00)]=function(){const _0x36fc33=_0x478a06;Sprite_Battler[_0x36fc33(0x9c5)]['updateFrame']['call'](this);const _0x277014=this[_0x36fc33(0x803)]()||this;if(!_0x277014)return;!_0x277014[_0x36fc33(0x410)]&&(_0x277014[_0x36fc33(0x410)]=new Bitmap(this[_0x36fc33(0xaad)]||0x1,this[_0x36fc33(0x15a)]||0x1));if(this[_0x36fc33(0x59b)]===_0x36fc33(0xa3d))this[_0x36fc33(0x575)][_0x36fc33(0xb06)](0x0,0x0,this[_0x36fc33(0x575)][_0x36fc33(0xaad)]||0x1,this[_0x36fc33(0x2d4)]);else{let _0x5e5e6f=0x1;if(_0x277014&&_0x277014[_0x36fc33(0x410)])_0x5e5e6f=_0x277014[_0x36fc33(0x410)][_0x36fc33(0xaad)];let _0x1178ae=0x1;if(this['bitmap'])_0x1178ae=this[_0x36fc33(0x410)][_0x36fc33(0x15a)];_0x277014[_0x36fc33(0xb06)](0x0,0x0,_0x5e5e6f,_0x1178ae);}},VisuMZ[_0x478a06(0x1a5)]['Sprite_Enemy_updateBossCollapse']=Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0x4ab)],Sprite_Enemy[_0x478a06(0x9c5)]['updateBossCollapse']=function(){const _0x84dd35=_0x478a06;if(this[_0x84dd35(0x73b)]())VisuMZ[_0x84dd35(0x1a5)]['Sprite_Enemy_updateBossCollapse']['call'](this);},Sprite_Enemy[_0x478a06(0x9c5)]['isMoving']=function(){const _0x35426d=_0x478a06;return Sprite_Battler[_0x35426d(0x9c5)]['isMoving'][_0x35426d(0x21e)](this);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x123)]=Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0x3f6)],Sprite_Enemy['prototype'][_0x478a06(0x3f6)]=function(){const _0x570b69=_0x478a06;VisuMZ[_0x570b69(0x1a5)][_0x570b69(0x123)]['call'](this),this[_0x570b69(0xaa9)]();},Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0xaa9)]=function(){const _0x58d204=_0x478a06,_0x5b42ea=VisuMZ[_0x58d204(0x1a5)][_0x58d204(0x468)][_0x58d204(0x9b6)];if(_0x5b42ea[_0x58d204(0x56b)]&&!_0x5b42ea[_0x58d204(0x3ef)]){this[_0x58d204(0x5fa)][_0x58d204(0x6d0)]=0x0;return;}this[_0x58d204(0x5fa)]['x']=0x0,this[_0x58d204(0x5fa)]['x']+=this[_0x58d204(0xbe5)][_0x58d204(0x6ac)]();let _0x5ac4bf=0x1;if(this['bitmap'])_0x5ac4bf=this[_0x58d204(0x410)][_0x58d204(0x15a)];this[_0x58d204(0x5fa)]['y']=-_0x5ac4bf-this[_0x58d204(0x5fa)]['height']-0x4,this['_stateIconSprite']['y']+=this['_battler'][_0x58d204(0x2e2)](),this['_stateIconSprite']['scale']['x']=0x1/(this['scale']['x']||0.001),this[_0x58d204(0x5fa)]['scale']['y']=0x1/(this[_0x58d204(0x853)]['y']||0.001),this['hasSvBattler']()&&(this[_0x58d204(0x80b)][_0x58d204(0x4a5)][_0x58d204(0x853)]['x']=-0x1/(this[_0x58d204(0x853)]['x']||0.001),this['_svBattlerSprite'][_0x58d204(0x4a5)]['scale']['y']=0x1/(this[_0x58d204(0x853)]['y']||0.001));},Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0x433)]=function(){const _0x4165a7=_0x478a06;this[_0x4165a7(0xbe5)]&&this[_0x4165a7(0xbe5)][_0x4165a7(0x433)]();},VisuMZ[_0x478a06(0x1a5)]['Sprite_Enemy_setBattler']=Sprite_Enemy['prototype'][_0x478a06(0x1c9)],Sprite_Enemy[_0x478a06(0x9c5)]['setBattler']=function(_0x19745e){const _0x3fe95f=_0x478a06;VisuMZ[_0x3fe95f(0x1a5)]['Sprite_Enemy_setBattler'][_0x3fe95f(0x21e)](this,_0x19745e),this[_0x3fe95f(0x8d7)](_0x19745e);},Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0x8d7)]=function(_0x43d140){const _0x3cbad3=_0x478a06;!this[_0x3cbad3(0x80b)]&&(this['_svBattlerSprite']=new Sprite_SvEnemy(_0x43d140),this['attachSpritesToDistortionSprite']()),this[_0x3cbad3(0x80b)]['setBattler'](_0x43d140);},Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0x296)]=function(){const _0x182a84=_0x478a06;return this['_enemy']&&this[_0x182a84(0xadd)][_0x182a84(0x296)]();},Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0x73b)]=function(){const _0x483b48=_0x478a06;return this[_0x483b48(0x296)]()?this[_0x483b48(0xadd)][_0x483b48(0x73b)]():!![];},Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0xaff)]=function(){const _0x4bbbdf=_0x478a06;this['hasSvBattler']()&&this['_svBattlerSprite'][_0x4bbbdf(0xaff)]();},Sprite_Enemy['prototype'][_0x478a06(0x111)]=function(_0x187e1f){const _0x3d2878=_0x478a06;if(this[_0x3d2878(0x296)]())this[_0x3d2878(0x80b)][_0x3d2878(0x111)](_0x187e1f);},Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0x721)]=function(_0x58d56d){const _0x233c44=_0x478a06;if(this[_0x233c44(0x296)]())this['_svBattlerSprite'][_0x233c44(0x721)](_0x58d56d);},Sprite_Enemy[_0x478a06(0x9c5)][_0x478a06(0x2d5)]=function(){const _0xf90718=_0x478a06,_0x383047=VisuMZ[_0xf90718(0x1a5)][_0xf90718(0x468)][_0xf90718(0xaef)],_0x2ed85a=_0x383047[_0xf90718(0x99f)],_0x32449f=_0x383047[_0xf90718(0xb04)],_0x1f8937=_0x383047[_0xf90718(0x8f2)];this[_0xf90718(0xa33)](_0x2ed85a,_0x32449f,_0x1f8937);};function Sprite_SvEnemy(){this['initialize'](...arguments);}Sprite_SvEnemy[_0x478a06(0x9c5)]=Object['create'](Sprite_Actor[_0x478a06(0x9c5)]),Sprite_SvEnemy['prototype'][_0x478a06(0x930)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x478a06(0x9c5)]['initialize']=function(_0x8cf962){const _0x26408f=_0x478a06;Sprite_Actor[_0x26408f(0x9c5)]['initialize'][_0x26408f(0x21e)](this,_0x8cf962),this[_0x26408f(0x853)]['x']=-0x1,this['_stateSprite']['scale']['x']=-0x1;},Sprite_SvEnemy[_0x478a06(0x9c5)][_0x478a06(0x477)]=function(){},Sprite_SvEnemy[_0x478a06(0x9c5)]['moveToStartPosition']=function(){},Sprite_SvEnemy[_0x478a06(0x9c5)][_0x478a06(0x7c5)]=function(_0x456799){},Sprite_SvEnemy[_0x478a06(0x9c5)][_0x478a06(0x466)]=function(){},Sprite_SvEnemy[_0x478a06(0x9c5)]['updateShadowPosition']=function(){},Sprite_SvEnemy[_0x478a06(0x9c5)]['updateStateSprite']=function(){const _0x111be1=_0x478a06;this[_0x111be1(0x4a5)][_0x111be1(0xbbc)]=![];},Sprite_SvEnemy[_0x478a06(0x9c5)][_0x478a06(0x72a)]=function(){const _0xb75898=_0x478a06;Sprite_Battler[_0xb75898(0x9c5)][_0xb75898(0x72a)]['call'](this);const _0x51ac89=this[_0xb75898(0x917)][_0xb75898(0x9f6)]();this[_0xb75898(0x31e)]!==_0x51ac89&&(this[_0xb75898(0x31e)]=_0x51ac89,this[_0xb75898(0x575)][_0xb75898(0x410)]=ImageManager[_0xb75898(0xa81)](_0x51ac89)),this['_mainSprite']&&this[_0xb75898(0x575)]['bitmap']&&this[_0xb75898(0xbe5)]&&(this['_mainSprite']['bitmap'][_0xb75898(0xace)]!==this[_0xb75898(0xbe5)]['battlerSmoothImage']()&&(this[_0xb75898(0x575)][_0xb75898(0x410)][_0xb75898(0xace)]=this[_0xb75898(0xbe5)]['battlerSmoothImage']()));},Sprite_SvEnemy[_0x478a06(0x9c5)][_0x478a06(0x80f)]=function(){},Sprite_SvEnemy[_0x478a06(0x9c5)][_0x478a06(0xa33)]=function(_0x51fc39,_0x574847,_0x891d15){const _0x23b97b=_0x478a06;if(this[_0x23b97b(0x452)])this[_0x23b97b(0x452)][_0x23b97b(0xa33)](_0x51fc39,_0x574847,_0x891d15);},Sprite_SvEnemy[_0x478a06(0x9c5)][_0x478a06(0xaff)]=function(){const _0x813c4=_0x478a06,_0x102c21=this[_0x813c4(0x917)];if(_0x102c21){const _0x5da226=_0x102c21[_0x813c4(0x3b8)]();if(_0x102c21['isInputting']()||_0x102c21[_0x813c4(0x326)]())this[_0x813c4(0x166)](_0x813c4(0x3bd));else{if(_0x5da226===0x3)this[_0x813c4(0x166)](_0x813c4(0x30d));else{if(_0x5da226===0x2)this['startMotion'](_0x813c4(0x8d2));else{if(_0x102c21[_0x813c4(0xb25)]())this['startMotion'](_0x813c4(0x33d));else{if(_0x102c21[_0x813c4(0x1fd)]()||_0x102c21['isGuardWaiting']())this[_0x813c4(0x166)]('guard');else{if(_0x5da226===0x1)this[_0x813c4(0x166)]('abnormal');else{if(_0x102c21[_0x813c4(0xa6e)]())this[_0x813c4(0x166)](_0x813c4(0x40b));else _0x102c21[_0x813c4(0xb16)]()?this['startMotion']('walk'):this[_0x813c4(0x166)](_0x102c21[_0x813c4(0x153)]()[_0x813c4(0x19f)]||_0x813c4(0x3bd));}}}}}}}},Sprite_SvEnemy[_0x478a06(0x9c5)][_0x478a06(0x2f8)]=function(){const _0x47ec33=_0x478a06;return this[_0x47ec33(0x452)]?this[_0x47ec33(0x452)][_0x47ec33(0x7da)]===0x0&&this[_0x47ec33(0x452)][_0x47ec33(0xa61)]===0x0:!![];},Sprite_SvEnemy['prototype']['updateFlip']=function(){},VisuMZ['BattleCore'][_0x478a06(0x986)]=Sprite_Animation['prototype'][_0x478a06(0x9e9)],Sprite_Animation[_0x478a06(0x9c5)][_0x478a06(0x9e9)]=function(_0x592f44){const _0x116a4e=_0x478a06;return _0x592f44[_0x116a4e(0x858)]?this[_0x116a4e(0x978)](_0x592f44):VisuMZ[_0x116a4e(0x1a5)]['Sprite_Animation_targetSpritePosition'][_0x116a4e(0x21e)](this,_0x592f44);},Sprite_Animation['prototype'][_0x478a06(0x978)]=function(_0x306ce6){const _0x44dc62=_0x478a06;let _0x485aeb=_0x306ce6['x'],_0x27b23e=_0x306ce6['y'],_0x54b9a7=_0x306ce6['height'],_0x58e9c7=_0x306ce6['_distortionSprite'][_0x44dc62(0x853)]['y'];_0x306ce6['x']=_0x306ce6[_0x44dc62(0x392)]+_0x306ce6[_0x44dc62(0x59a)](),_0x306ce6['y']=_0x306ce6[_0x44dc62(0xb38)]+_0x306ce6[_0x44dc62(0x591)](),_0x306ce6['height']*=_0x58e9c7;let _0x2378b9=VisuMZ[_0x44dc62(0x1a5)][_0x44dc62(0x986)][_0x44dc62(0x21e)](this,_0x306ce6);return _0x306ce6['x']=_0x485aeb,_0x306ce6['y']=_0x27b23e,_0x306ce6['height']=_0x54b9a7,_0x2378b9;},VisuMZ['BattleCore'][_0x478a06(0x83a)]=Sprite_AnimationMV[_0x478a06(0x9c5)]['updatePosition'],Sprite_AnimationMV[_0x478a06(0x9c5)][_0x478a06(0x7b4)]=function(){const _0x4453ca=_0x478a06;VisuMZ['BattleCore'][_0x4453ca(0x83a)]['call'](this);if(!SceneManager[_0x4453ca(0x785)]())return;if(this[_0x4453ca(0x4cc)][_0x4453ca(0x43d)]===0x3)this['x']=Math[_0x4453ca(0x801)](Graphics[_0x4453ca(0xb0a)]/0x2),this['y']=Math[_0x4453ca(0x801)](Graphics[_0x4453ca(0xb21)]/0x2);else{if(this[_0x4453ca(0x9d9)])return;}},Sprite_Damage[_0x478a06(0x9c5)][_0x478a06(0x2fa)]=function(_0x17dbda){const _0x449122=_0x478a06,_0x50bd26=_0x17dbda[_0x449122(0x755)]()||_0x17dbda[_0x449122(0x15f)]();if(_0x50bd26['missed']||_0x50bd26['evaded'])this['_colorType']=0x0,this[_0x449122(0x3ec)]();else{if(_0x50bd26[_0x449122(0x6a5)])this[_0x449122(0x934)]=_0x50bd26['hpDamage']>=0x0?0x0:0x1,this['createDigits'](_0x50bd26[_0x449122(0x837)]);else _0x17dbda[_0x449122(0x1f5)]()&&_0x50bd26[_0x449122(0xa1c)]!==0x0&&(this[_0x449122(0x934)]=_0x50bd26[_0x449122(0xa1c)]>=0x0?0x2:0x3,this[_0x449122(0x1d1)](_0x50bd26[_0x449122(0xa1c)]));}_0x50bd26[_0x449122(0xb0b)]&&this[_0x449122(0x987)]();},Sprite_Damage[_0x478a06(0x9c5)][_0x478a06(0x40f)]=function(_0x526aa4){},Sprite_Damage['prototype']['createDigits']=function(_0x1b0341){const _0x509104=_0x478a06;let _0x1d056d=this[_0x509104(0xb2f)](_0x1b0341);const _0x4f7b2c=this[_0x509104(0x635)](),_0x142c8d=Math[_0x509104(0xa76)](_0x4f7b2c*0.75);for(let _0x7d2b0f=0x0;_0x7d2b0f<_0x1d056d['length'];_0x7d2b0f++){const _0x407b31=this[_0x509104(0x173)](_0x142c8d,_0x4f7b2c);_0x407b31['bitmap'][_0x509104(0x895)](_0x1d056d[_0x7d2b0f],0x0,0x0,_0x142c8d,_0x4f7b2c,_0x509104(0x11d)),_0x407b31['x']=(_0x7d2b0f-(_0x1d056d[_0x509104(0x496)]-0x1)/0x2)*_0x142c8d,_0x407b31['dy']=-_0x7d2b0f;}},Sprite_Damage['prototype']['createString']=function(_0x301bd9){const _0x58bbd0=_0x478a06;let _0x5b40a2=Math[_0x58bbd0(0x42d)](_0x301bd9)[_0x58bbd0(0x9e1)]();this['useDigitGrouping']()&&(_0x5b40a2=VisuMZ['GroupDigits'](_0x5b40a2));const _0x424652=VisuMZ[_0x58bbd0(0x1a5)][_0x58bbd0(0x468)]['Damage'];let _0x3a2459='',_0xf0c14f='';switch(this[_0x58bbd0(0x934)]){case 0x0:_0x3a2459=_0x424652['hpDamageFmt']||_0x58bbd0(0x3a4),_0xf0c14f=TextManager['hp'];if(_0x301bd9===0x0)_0x3a2459='%1';break;case 0x1:_0x3a2459=_0x424652[_0x58bbd0(0x66a)]||'+%1',_0xf0c14f=TextManager['hp'];break;case 0x2:_0x3a2459=_0x424652[_0x58bbd0(0x30c)]||_0x58bbd0(0xfc),_0xf0c14f=TextManager['mp'];break;case 0x3:_0x3a2459=_0x424652['mpHealingFmt']||_0x58bbd0(0x44a),_0xf0c14f=TextManager['mp'];break;}return _0x3a2459[_0x58bbd0(0x177)](_0x5b40a2,_0xf0c14f)['trim']();},Sprite_Damage['prototype'][_0x478a06(0xa49)]=function(){const _0x3f2a1b=_0x478a06;return Imported[_0x3f2a1b(0x1a1)]?VisuMZ[_0x3f2a1b(0x71a)][_0x3f2a1b(0x468)][_0x3f2a1b(0x621)]['DigitGroupingDamageSprites']:![];},Sprite_Damage[_0x478a06(0x9c5)][_0x478a06(0x987)]=function(){const _0x1f2b72=_0x478a06,_0x3d48b9=VisuMZ[_0x1f2b72(0x1a5)][_0x1f2b72(0x468)]['Damage'];_0x3d48b9['CriticalColor']=_0x3d48b9[_0x1f2b72(0x1d5)]||[0x0,0x0,0x0,0x0],this[_0x1f2b72(0xa9c)]=_0x3d48b9[_0x1f2b72(0x1d5)][_0x1f2b72(0x144)](0x0),this[_0x1f2b72(0x78c)]=_0x3d48b9[_0x1f2b72(0xb37)]||0x1;},Sprite_Damage[_0x478a06(0x9c5)][_0x478a06(0x5aa)]=function(_0x3f8024,_0x1d9208){const _0x322885=_0x478a06;this[_0x322885(0xa9c)]=_0x1d9208[_0x322885(0xbb0)]||[0x0,0x0,0x0,0x0],this[_0x322885(0xa9c)]=JsonEx['makeDeepCopy'](this[_0x322885(0xa9c)]),this[_0x322885(0x78c)]=_0x1d9208[_0x322885(0x417)]||0x0;const _0x56f1f0=this['fontSize'](),_0x51dd23=Math[_0x322885(0xa76)](_0x56f1f0*0x1e),_0x3004c9=this[_0x322885(0x173)](_0x51dd23,_0x56f1f0);_0x3004c9[_0x322885(0x410)][_0x322885(0x355)]=ColorManager[_0x322885(0x455)](_0x1d9208[_0x322885(0x355)]),_0x3004c9['bitmap'][_0x322885(0x895)](_0x3f8024,0x0,0x0,_0x51dd23,_0x56f1f0,_0x322885(0x11d)),_0x3004c9['dy']=0x0;},Sprite_Damage['prototype'][_0x478a06(0x3f5)]=function(_0x4d51c5,_0x3599ef,_0x1bc389){const _0x1d9a74=_0x478a06,_0x5c3426=Math['max'](this[_0x1d9a74(0x635)](),ImageManager[_0x1d9a74(0x61f)]),_0x50abb7=Math[_0x1d9a74(0xa76)](_0x5c3426*0x1e),_0x23c3a9=this[_0x1d9a74(0x173)](_0x50abb7,_0x5c3426),_0x199a66=ImageManager[_0x1d9a74(0x33e)]/0x2,_0x38196f=_0x23c3a9[_0x1d9a74(0x410)]['measureTextWidth'](_0x3599ef+'\x20');_0x23c3a9[_0x1d9a74(0x410)][_0x1d9a74(0x355)]=ColorManager['getColor'](_0x1bc389['textColor']),_0x23c3a9[_0x1d9a74(0x410)][_0x1d9a74(0x895)](_0x3599ef,_0x199a66,0x0,_0x50abb7-_0x199a66,_0x5c3426,_0x1d9a74(0x11d));const _0x2da95e=Math[_0x1d9a74(0x801)]((_0x5c3426-ImageManager[_0x1d9a74(0x61f)])/0x2),_0x563764=_0x50abb7/0x2-ImageManager[_0x1d9a74(0x33e)]-_0x38196f/0x2+_0x199a66/0x2,_0x3a47f8=ImageManager[_0x1d9a74(0x8e8)](_0x1d9a74(0xad7)),_0x211d54=ImageManager[_0x1d9a74(0x33e)],_0x11adac=ImageManager[_0x1d9a74(0x61f)],_0x102faa=_0x4d51c5%0x10*_0x211d54,_0xdad6fb=Math[_0x1d9a74(0xa76)](_0x4d51c5/0x10)*_0x11adac;_0x23c3a9[_0x1d9a74(0x410)]['blt'](_0x3a47f8,_0x102faa,_0xdad6fb,_0x211d54,_0x11adac,_0x563764,_0x2da95e),this[_0x1d9a74(0xa9c)]=_0x1bc389[_0x1d9a74(0xbb0)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x1d9a74(0xb51)](this[_0x1d9a74(0xa9c)]),this[_0x1d9a74(0x78c)]=_0x1bc389['flashDuration']||0x0,_0x23c3a9['dy']=0x0,_0x1bc389[_0x1d9a74(0x88a)]&&(_0x23c3a9['x']+=_0x1bc389[_0x1d9a74(0x88a)]),_0x1bc389[_0x1d9a74(0x7d4)]&&(_0x23c3a9['dy']+=_0x1bc389[_0x1d9a74(0x7d4)]);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x18f)]=Sprite_Damage[_0x478a06(0x9c5)][_0x478a06(0x173)],Sprite_Damage[_0x478a06(0x9c5)][_0x478a06(0x173)]=function(_0x44d194,_0x521bfa){const _0x276c41=_0x478a06;return _0x521bfa=Math[_0x276c41(0x801)](_0x521bfa*1.2),VisuMZ['BattleCore'][_0x276c41(0x18f)][_0x276c41(0x21e)](this,_0x44d194,_0x521bfa);},VisuMZ[_0x478a06(0x1a5)]['Sprite_StateIcon_updateFrame']=Sprite_StateIcon['prototype'][_0x478a06(0xb00)],Sprite_StateIcon[_0x478a06(0x9c5)][_0x478a06(0xb00)]=function(){const _0x36b693=_0x478a06;VisuMZ[_0x36b693(0x1a5)]['Sprite_StateIcon_updateFrame'][_0x36b693(0x21e)](this),this['opacity']=this[_0x36b693(0x429)]>0x0?0xff:0x0;},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x5d6)]=Sprite_Weapon[_0x478a06(0x9c5)]['loadBitmap'],Sprite_Weapon['prototype'][_0x478a06(0x419)]=function(){const _0x4bd937=_0x478a06;VisuMZ[_0x4bd937(0x1a5)]['Sprite_Weapon_loadBitmap'][_0x4bd937(0x21e)](this),this[_0x4bd937(0x410)]&&(this[_0x4bd937(0x410)][_0x4bd937(0xace)]=VisuMZ[_0x4bd937(0x1a5)][_0x4bd937(0x468)][_0x4bd937(0x145)][_0x4bd937(0x6cd)]);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x856)]=Sprite_Gauge[_0x478a06(0x9c5)][_0x478a06(0x7c1)],Sprite_Gauge['prototype'][_0x478a06(0x7c1)]=function(){const _0x90bea4=_0x478a06;return this[_0x90bea4(0x103)]!=='time'?VisuMZ[_0x90bea4(0x1a5)]['Settings']['HpGauge'][_0x90bea4(0xa52)]??0x14:VisuMZ[_0x90bea4(0x1a5)]['Sprite_Gauge_smoothness'][_0x90bea4(0x21e)](this);};function Sprite_GaugeRate(){const _0x68e93e=_0x478a06;this[_0x68e93e(0x552)](...arguments);}Sprite_GaugeRate['prototype']=Object[_0x478a06(0x47b)](Sprite_Gauge[_0x478a06(0x9c5)]),Sprite_GaugeRate[_0x478a06(0x9c5)]['constructor']=Sprite_GaugeRate,Sprite_GaugeRate[_0x478a06(0x9c5)]['initialize']=function(){const _0x26bc56=_0x478a06;Sprite_Gauge[_0x26bc56(0x9c5)][_0x26bc56(0x552)][_0x26bc56(0x21e)](this),this[_0x26bc56(0x378)]=![];},Sprite_GaugeRate[_0x478a06(0x9c5)][_0x478a06(0x1f1)]=function(_0x39ded7,_0x2d9a4c){const _0x3f8791=_0x478a06;this[_0x3f8791(0x378)]=!![],Sprite_Gauge[_0x3f8791(0x9c5)][_0x3f8791(0x1f1)]['call'](this,_0x39ded7,_0x2d9a4c),this[_0x3f8791(0x378)]=![];},Sprite_GaugeRate[_0x478a06(0x9c5)][_0x478a06(0x913)]=function(){const _0x1438c2=_0x478a06;if(this['_updateTargetValue']){const _0x1cfd6d=Sprite_Gauge['prototype'][_0x1438c2(0x913)][_0x1438c2(0x21e)](this),_0x1ced12=this[_0x1438c2(0x51a)]();if(_0x1ced12<=0x0)return'100%';return Math[_0x1438c2(0xa76)](_0x1cfd6d/_0x1ced12*0x64)+'%';}else return Sprite_Gauge[_0x1438c2(0x9c5)]['currentValue']['call'](this);},Sprite_GaugeRate[_0x478a06(0x9c5)][_0x478a06(0x9e2)]=function(){const _0x2de7c6=_0x478a06,_0x18cffa=Sprite_Gauge[_0x2de7c6(0x9c5)][_0x2de7c6(0x913)][_0x2de7c6(0x21e)](this),_0x15b464=this[_0x2de7c6(0x51a)]();if(_0x15b464<=0x0)return _0x2de7c6(0x137);return Math[_0x2de7c6(0xa76)](_0x18cffa/_0x15b464*0x64)+'%';},Sprite_GaugeRate[_0x478a06(0x9c5)][_0x478a06(0x2aa)]=function(){const _0x346b76=_0x478a06;if(this['currentMaxValue']()<=0x0)return 0x1;return Sprite_Gauge['prototype'][_0x346b76(0x2aa)][_0x346b76(0x21e)](this);},Sprite_GaugeRate['prototype'][_0x478a06(0x26d)]=function(){const _0xd78ad2=_0x478a06;if(this[_0xd78ad2(0x51a)]()<=0x0)return ColorManager['normalColor']();return Sprite_Gauge[_0xd78ad2(0x9c5)][_0xd78ad2(0x26d)][_0xd78ad2(0x21e)](this);},Sprite_GaugeRate[_0x478a06(0x9c5)]['redraw']=function(){const _0x434d79=_0x478a06;this[_0x434d79(0x103)]==='mp'&&this[_0x434d79(0x51a)]()<=0x0&&($gameTemp[_0x434d79(0x766)]=!![]),Sprite_Gauge['prototype'][_0x434d79(0x30b)][_0x434d79(0x21e)](this),$gameTemp[_0x434d79(0x766)]=undefined;},VisuMZ['BattleCore'][_0x478a06(0x8d5)]=ColorManager[_0x478a06(0x16c)],ColorManager[_0x478a06(0x16c)]=function(_0xbe6a9a){const _0x4fe72f=_0x478a06;if($gameTemp['redrawForGaugeRate'])return ColorManager[_0x4fe72f(0x677)]();return VisuMZ['BattleCore'][_0x4fe72f(0x8d5)][_0x4fe72f(0x21e)](this,_0xbe6a9a);};function Sprite_HpGauge(){const _0x17e7e0=_0x478a06;this[_0x17e7e0(0x552)](...arguments);}Sprite_HpGauge[_0x478a06(0x9c5)]=Object[_0x478a06(0x47b)](Sprite_Gauge[_0x478a06(0x9c5)]),Sprite_HpGauge[_0x478a06(0x9c5)][_0x478a06(0x930)]=Sprite_HpGauge,Sprite_HpGauge[_0x478a06(0x9c5)][_0x478a06(0x552)]=function(){const _0x5bcba3=_0x478a06;Sprite_Gauge[_0x5bcba3(0x9c5)]['initialize'][_0x5bcba3(0x21e)](this);},Sprite_HpGauge[_0x478a06(0x9c5)][_0x478a06(0x75f)]=function(){return 0x0;},Sprite_HpGauge[_0x478a06(0x9c5)][_0x478a06(0x30b)]=function(){const _0x478a3f=_0x478a06;this[_0x478a3f(0x410)][_0x478a3f(0x87d)]();const _0x5f1fdb=this[_0x478a3f(0x913)]();!isNaN(_0x5f1fdb)&&this[_0x478a3f(0x171)]();};function Sprite_EnemyName(){const _0x4923c5=_0x478a06;this[_0x4923c5(0x552)](...arguments);}Sprite_EnemyName[_0x478a06(0x9c5)]=Object['create'](Sprite_Name[_0x478a06(0x9c5)]),Sprite_EnemyName[_0x478a06(0x9c5)][_0x478a06(0x930)]=Sprite_EnemyName,Sprite_EnemyName[_0x478a06(0x9c5)][_0x478a06(0x552)]=function(){const _0x58290c=_0x478a06;Sprite_Name[_0x58290c(0x9c5)][_0x58290c(0x552)][_0x58290c(0x21e)](this),this['createAttachedSprites']();},Sprite_EnemyName['prototype'][_0x478a06(0x2ef)]=function(){const _0x191f6f=_0x478a06;Sprite_Name[_0x191f6f(0x9c5)][_0x191f6f(0x2ef)]['call'](this),this[_0x191f6f(0x6d0)]=0x0,this[_0x191f6f(0x4e1)]=null,this[_0x191f6f(0x488)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName[_0x478a06(0x9c5)][_0x478a06(0x3b3)]=function(){const _0x31b9f1=_0x478a06;VisuMZ[_0x31b9f1(0x1a5)][_0x31b9f1(0x468)][_0x31b9f1(0x9b6)][_0x31b9f1(0x56b)]&&(this[_0x31b9f1(0x5fa)]=new Sprite_StateIcon(),this[_0x31b9f1(0xb9b)](this[_0x31b9f1(0x5fa)]));},Sprite_EnemyName[_0x478a06(0x9c5)]['bitmapWidth']=function(){const _0x2c5c38=_0x478a06;return Graphics[_0x2c5c38(0xb0a)];},Sprite_EnemyName[_0x478a06(0x9c5)][_0x478a06(0x2cf)]=function(){const _0x8759f4=_0x478a06;return this[_0x8759f4(0x1d4)]=this[_0x8759f4(0x1d4)]||Window_Base[_0x8759f4(0x9c5)]['lineHeight']()||0x24,this[_0x8759f4(0x1d4)]*0x4;},Sprite_EnemyName[_0x478a06(0x9c5)][_0x478a06(0x635)]=function(){const _0x93f527=_0x478a06;return VisuMZ[_0x93f527(0x1a5)][_0x93f527(0x468)][_0x93f527(0x9b6)]['NameFontSize']||$gameSystem[_0x93f527(0x75b)]();},Sprite_EnemyName['prototype'][_0x478a06(0x87a)]=function(_0xabf04f){const _0x54e5bb=_0x478a06;this[_0x54e5bb(0x4e1)]=_0xabf04f;},Sprite_EnemyName[_0x478a06(0x9c5)][_0x478a06(0x865)]=function(){const _0x35e631=_0x478a06;Sprite_Name[_0x35e631(0x9c5)][_0x35e631(0x865)][_0x35e631(0x21e)](this),this['updateLink'](),this['updatePosition'](),this['updateAttachedSprites'](),this[_0x35e631(0x2df)]();},Sprite_EnemyName['prototype']['redraw']=function(){const _0x4cd8ad=_0x478a06;this['_cacheTextWidth']=undefined;const _0x383320=this[_0x4cd8ad(0x8ff)](),_0x53b44d=this['bitmapWidth'](),_0x5bf55e=Window_Base[_0x4cd8ad(0x9c5)][_0x4cd8ad(0xef)]();this[_0x4cd8ad(0x3dc)](),this[_0x4cd8ad(0x410)]['clear'](),this[_0x4cd8ad(0x410)]['drawText'](_0x383320,0x0,0x0,_0x53b44d,_0x5bf55e,_0x4cd8ad(0x11d));},Sprite_EnemyName['prototype'][_0x478a06(0x973)]=function(){const _0x52ab2f=_0x478a06;if(!this[_0x52ab2f(0x4e1)])return;this[_0x52ab2f(0xbe5)]!==this[_0x52ab2f(0x4e1)][_0x52ab2f(0xbe5)]&&this['setup'](this['_linkedSprite'][_0x52ab2f(0xbe5)]);},Sprite_EnemyName[_0x478a06(0x9c5)][_0x478a06(0x7b4)]=function(){const _0x30ce90=_0x478a06;if(!this['_linkedSprite'])return;this[_0x30ce90(0x1d4)]=this[_0x30ce90(0x1d4)]||Window_Base['prototype'][_0x30ce90(0xef)](),this['x']=Math[_0x30ce90(0x801)](this[_0x30ce90(0x4e1)]['_baseX']),this['y']=Math['round'](this[_0x30ce90(0x4e1)][_0x30ce90(0xb38)]-this[_0x30ce90(0x1d4)]*0.5);const _0x1b6607=VisuMZ['BattleCore'][_0x30ce90(0x468)]['Enemy'];this['x']+=Math[_0x30ce90(0x801)](_0x1b6607['NameOffsetX']||0x0),this['y']+=Math['round'](_0x1b6607['NameOffsetY']||0x0);},Sprite_EnemyName[_0x478a06(0x9c5)][_0x478a06(0xb35)]=function(){const _0x470327=_0x478a06;this[_0x470327(0x854)]();},Sprite_EnemyName[_0x478a06(0x9c5)][_0x478a06(0x854)]=function(){const _0x4f8cc3=_0x478a06;if(!this[_0x4f8cc3(0x5fa)])return;this[_0x4f8cc3(0xbe5)]!==this[_0x4f8cc3(0x5fa)]['_battler']&&this[_0x4f8cc3(0x5fa)][_0x4f8cc3(0x40f)](this['_battler']);const _0x49212d=this[_0x4f8cc3(0xb24)]();this[_0x4f8cc3(0x1d4)]=this[_0x4f8cc3(0x1d4)]||Window_Base[_0x4f8cc3(0x9c5)]['lineHeight'](),this[_0x4f8cc3(0x5fa)]['x']=Math[_0x4f8cc3(0x801)]((_0x49212d+ImageManager[_0x4f8cc3(0x33e)])/0x2)+0x8,this['_stateIconSprite']['y']=this[_0x4f8cc3(0x1d4)]/0x2;const _0x21238d=VisuMZ[_0x4f8cc3(0x1a5)]['Settings'][_0x4f8cc3(0x9b6)];this[_0x4f8cc3(0x5fa)]['x']+=_0x21238d[_0x4f8cc3(0x20d)]||0x0,this[_0x4f8cc3(0x5fa)]['y']+=_0x21238d[_0x4f8cc3(0x754)]||0x0;},Sprite_EnemyName[_0x478a06(0x9c5)][_0x478a06(0x2df)]=function(){const _0x3b7c6c=_0x478a06,_0x45137e=this[_0x3b7c6c(0xb5c)]();if(_0x45137e&&this[_0x3b7c6c(0x6d0)]<0xff)this[_0x3b7c6c(0x6d0)]+=0x10;else!_0x45137e&&this['opacity']>0x0&&(this[_0x3b7c6c(0x6d0)]-=0x10);},Sprite_EnemyName['prototype'][_0x478a06(0xb5c)]=function(){const _0x16a1c0=_0x478a06;if(this[_0x16a1c0(0xb1d)]())return![];else{if(!this[_0x16a1c0(0xbe5)])return![];else{if(!this[_0x16a1c0(0xbe5)][_0x16a1c0(0x9c8)]())return![];else{if(this['temporaryVisibile']())return!![];else{if(this[_0x16a1c0(0xbe5)]['isDead']())return![];else{if(this[_0x16a1c0(0x685)]())return!![];else{if(this['compatibilityVisible']())return!![];else{if(this[_0x16a1c0(0x279)]())return!![];else{if(this['isIncludedInEnemyWindow']())return!![];else{if(this[_0x16a1c0(0x6d0)]>0x0)return![];}}}}}}}}}},Sprite_EnemyName[_0x478a06(0x9c5)][_0x478a06(0x3e8)]=function(){const _0x167a24=_0x478a06;return this[_0x167a24(0xbe5)]&&this[_0x167a24(0xbe5)][_0x167a24(0x290)]();},Sprite_EnemyName[_0x478a06(0x9c5)][_0x478a06(0xb1d)]=function(){const _0x7fb65e=_0x478a06;return VisuMZ[_0x7fb65e(0x1a5)][_0x7fb65e(0x468)][_0x7fb65e(0x9b6)][_0x7fb65e(0x2e5)];},Sprite_EnemyName['prototype'][_0x478a06(0x685)]=function(){const _0x4f8811=_0x478a06;if(!VisuMZ[_0x4f8811(0x1a5)][_0x4f8811(0x468)][_0x4f8811(0x9b6)][_0x4f8811(0x33b)])return![];if(BattleManager['isInputting']()&&!BattleManager[_0x4f8811(0xbb1)]())return![];return this[_0x4f8811(0xbe5)]&&BattleManager[_0x4f8811(0x6f3)]&&BattleManager['_targets'][_0x4f8811(0x982)](this[_0x4f8811(0xbe5)]);},Sprite_EnemyName['prototype']['compatibilityVisible']=function(){return![];},Sprite_EnemyName[_0x478a06(0x9c5)][_0x478a06(0x279)]=function(){const _0x44ee81=_0x478a06;return VisuMZ[_0x44ee81(0x1a5)]['Settings'][_0x44ee81(0x9b6)][_0x44ee81(0x36c)];},Sprite_EnemyName[_0x478a06(0x9c5)][_0x478a06(0x931)]=function(){const _0x292823=_0x478a06;return VisuMZ['BattleCore'][_0x292823(0x468)][_0x292823(0x9b6)]['NameAlwaysSelectOnly']?this[_0x292823(0xbe5)]['isSelected']():SceneManager[_0x292823(0x143)][_0x292823(0x9ef)]&&SceneManager['_scene']['_enemyWindow'][_0x292823(0x4cb)]&&SceneManager[_0x292823(0x143)][_0x292823(0x9ef)]['_enemies']['includes'](this[_0x292823(0xbe5)]);},Sprite_EnemyName[_0x478a06(0x9c5)][_0x478a06(0xb24)]=function(){const _0x31e6b1=_0x478a06;if(!this[_0x31e6b1(0xbe5)])return 0x0;if(this['_cacheTextWidth'])return this[_0x31e6b1(0x2d9)];const _0x20acd0=this[_0x31e6b1(0x8ff)]();return this['setupFont'](),this['_cacheTextWidth']=this['bitmap'][_0x31e6b1(0x46d)](_0x20acd0)||0x1,this[_0x31e6b1(0x2d9)];},VisuMZ['BattleCore'][_0x478a06(0x321)]=Sprite_Battleback[_0x478a06(0x9c5)][_0x478a06(0x8c7)],Sprite_Battleback['prototype'][_0x478a06(0x8c7)]=function(){const _0x314257=_0x478a06,_0x5f23e5=VisuMZ['BattleCore'][_0x314257(0x468)][_0x314257(0xdf)];if(!_0x5f23e5)return VisuMZ[_0x314257(0x1a5)]['Sprite_Battleback_adjustPosition'][_0x314257(0x21e)](this);const _0x33772b=String(_0x5f23e5['DefaultStyle'])||'MZ';switch(_0x33772b){case'MZ':VisuMZ[_0x314257(0x1a5)][_0x314257(0x321)][_0x314257(0x21e)](this);break;case _0x314257(0x945):this[_0x314257(0x712)]();break;case _0x314257(0x969):this[_0x314257(0x14b)]();break;case _0x314257(0x309):this[_0x314257(0x141)]();break;case'ScaleUp':this[_0x314257(0x79a)]();break;}},Sprite_Battleback[_0x478a06(0x9c5)][_0x478a06(0x712)]=function(){const _0x440922=_0x478a06,_0x3aea46=VisuMZ[_0x440922(0x1a5)][_0x440922(0x468)][_0x440922(0xdf)];if(_0x3aea46&&_0x3aea46[_0x440922(0x833)])return _0x3aea46[_0x440922(0x833)][_0x440922(0x21e)](this);this[_0x440922(0xaad)]=Graphics[_0x440922(0xaad)],this[_0x440922(0x15a)]=Graphics[_0x440922(0x15a)];const _0x1290d5=0x1;this['scale']['x']=_0x1290d5,this[_0x440922(0x853)]['y']=_0x1290d5,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x478a06(0x9c5)][_0x478a06(0x14b)]=function(){const _0x874a86=_0x478a06,_0x474cfb=VisuMZ['BattleCore']['Settings']['BattlebackScale'];if(_0x474cfb&&_0x474cfb['jsScaleToFit'])return _0x474cfb[_0x874a86(0x67f)][_0x874a86(0x21e)](this);this[_0x874a86(0xaad)]=Graphics[_0x874a86(0xaad)],this[_0x874a86(0x15a)]=Graphics[_0x874a86(0x15a)];const _0x1dd430=this[_0x874a86(0xaad)]/this[_0x874a86(0x410)][_0x874a86(0xaad)],_0x3b2e3e=this[_0x874a86(0x15a)]/this[_0x874a86(0x410)][_0x874a86(0x15a)],_0x1e083d=Math['max'](_0x1dd430,_0x3b2e3e);this[_0x874a86(0x853)]['x']=_0x1e083d,this[_0x874a86(0x853)]['y']=_0x1e083d,this['x']=(Graphics[_0x874a86(0xaad)]-this['width'])/0x2,this['y']=Graphics['height']-this[_0x874a86(0x15a)];},Sprite_Battleback['prototype'][_0x478a06(0x141)]=function(){const _0x86a044=_0x478a06,_0x3f111e=VisuMZ[_0x86a044(0x1a5)][_0x86a044(0x468)]['BattlebackScale'];if(_0x3f111e&&_0x3f111e[_0x86a044(0x6c4)])return _0x3f111e[_0x86a044(0x6c4)]['call'](this);this[_0x86a044(0xaad)]=Graphics[_0x86a044(0xaad)],this[_0x86a044(0x15a)]=Graphics[_0x86a044(0x15a)];const _0x192da6=Math[_0x86a044(0x7a1)](0x1,this[_0x86a044(0xaad)]/this['bitmap'][_0x86a044(0xaad)]),_0xbaf35f=Math[_0x86a044(0x7a1)](0x1,this['height']/this[_0x86a044(0x410)][_0x86a044(0x15a)]),_0x36df18=Math[_0x86a044(0x896)](_0x192da6,_0xbaf35f);this[_0x86a044(0x853)]['x']=_0x36df18,this[_0x86a044(0x853)]['y']=_0x36df18,this['x']=(Graphics[_0x86a044(0xaad)]-this[_0x86a044(0xaad)])/0x2,this['y']=Graphics[_0x86a044(0x15a)]-this['height'];},Sprite_Battleback[_0x478a06(0x9c5)]['adjustPosition_ScaleUp']=function(){const _0x204477=_0x478a06,_0x1be7b8=VisuMZ['BattleCore'][_0x204477(0x468)][_0x204477(0xdf)];if(_0x1be7b8&&_0x1be7b8[_0x204477(0x8a0)])return _0x1be7b8['jsScaleUp'][_0x204477(0x21e)](this);this[_0x204477(0xaad)]=Graphics[_0x204477(0xaad)],this[_0x204477(0x15a)]=Graphics[_0x204477(0x15a)];const _0x453759=Math['max'](0x1,this[_0x204477(0xaad)]/this['bitmap']['width']),_0x508f57=Math['max'](0x1,this['height']/this[_0x204477(0x410)][_0x204477(0x15a)]),_0x1bee79=Math[_0x204477(0x896)](_0x453759,_0x508f57);this[_0x204477(0x853)]['x']=_0x1bee79,this[_0x204477(0x853)]['y']=_0x1bee79,this['x']=(Graphics[_0x204477(0xaad)]-this[_0x204477(0xaad)])/0x2,this['y']=Graphics[_0x204477(0x15a)]-this['height'];},Spriteset_Battle[_0x478a06(0x339)]=VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x64a)][_0x478a06(0x30e)]??!![],Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x45a)]=function(){const _0x15efef=_0x478a06;if(!$gameSystem[_0x15efef(0x787)]())return![];return![];},Spriteset_Battle['prototype'][_0x478a06(0xa4d)]=function(){return 0x0;},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x82e)]=function(){return 0x0;},VisuMZ[_0x478a06(0x1a5)]['Spriteset_Battle_createLowerLayer']=Spriteset_Battle[_0x478a06(0x9c5)]['createLowerLayer'],Spriteset_Battle['prototype'][_0x478a06(0x125)]=function(){const _0x417ae4=_0x478a06;VisuMZ[_0x417ae4(0x1a5)][_0x417ae4(0xa78)][_0x417ae4(0x21e)](this),this[_0x417ae4(0x2a7)](),this[_0x417ae4(0x546)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x6ec)]=Spriteset_Battle['prototype'][_0x478a06(0x865)],Spriteset_Battle['prototype'][_0x478a06(0x865)]=function(){const _0x474186=_0x478a06;VisuMZ[_0x474186(0x1a5)][_0x474186(0x6ec)][_0x474186(0x21e)](this),this[_0x474186(0x90c)](),this[_0x474186(0x9f8)](),this['updateWeather'](),this[_0x474186(0x65b)]();},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x2a7)]=function(){const _0xd19f96=_0x478a06;this['_weather']=new Weather(),this[_0xd19f96(0xab2)]['addChild'](this[_0xd19f96(0xb03)]);},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0xa18)]=function(){const _0x87daa7=_0x478a06;this[_0x87daa7(0xb03)][_0x87daa7(0x47c)]=$gameScreen[_0x87daa7(0x127)](),this[_0x87daa7(0xb03)]['power']=$gameScreen[_0x87daa7(0x5e6)]();},Game_Interpreter[_0x478a06(0x9c5)][_0x478a06(0x68c)]=function(_0x2c1e94){const _0x304b81=_0x478a06;$gameScreen[_0x304b81(0x5a2)](_0x2c1e94[0x0],_0x2c1e94[0x1],_0x2c1e94[0x2]);if(_0x2c1e94[0x3])this[_0x304b81(0xe3)](_0x2c1e94[0x2]);return!![];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x38e)]=Game_Interpreter[_0x478a06(0x9c5)][_0x478a06(0x97c)],Game_Interpreter['prototype'][_0x478a06(0x97c)]=function(_0x2033d2){const _0x17a13d=_0x478a06;return VisuMZ[_0x17a13d(0x1a5)][_0x17a13d(0x38e)][_0x17a13d(0x21e)](this,_0x2033d2),SceneManager[_0x17a13d(0x785)]()&&SceneManager[_0x17a13d(0x143)]['_spriteset'][_0x17a13d(0x5dd)](_0x2033d2[0x0],_0x2033d2[0x1]),!![];},Sprite_Battleback[_0x478a06(0x9c5)][_0x478a06(0x20c)]=function(){const _0x2eace5=_0x478a06;if($gameMap[_0x2eace5(0x20c)]()!==null)return $gameMap[_0x2eace5(0x20c)]();else{if(BattleManager[_0x2eace5(0xbb5)]())return $dataSystem[_0x2eace5(0x20c)];else return $gameMap[_0x2eace5(0xbe1)]()?this[_0x2eace5(0x501)]():'';}},Sprite_Battleback[_0x478a06(0x9c5)][_0x478a06(0x805)]=function(){const _0x12d9fc=_0x478a06;if($gameMap[_0x12d9fc(0x805)]()!==null)return $gameMap[_0x12d9fc(0x805)]();else{if(BattleManager[_0x12d9fc(0xbb5)]())return $dataSystem[_0x12d9fc(0x805)];else return $gameMap[_0x12d9fc(0xbe1)]()?this[_0x12d9fc(0x486)]():'';}},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x953)]=function(_0x4f01df,_0x464f6f){_0x4f01df['bitmap']=_0x464f6f;},Spriteset_Battle['prototype'][_0x478a06(0x5dd)]=function(_0x4b8a4b,_0x1eb3ab){const _0x3b463d=_0x478a06;_0x4b8a4b=_0x4b8a4b||'',_0x1eb3ab=_0x1eb3ab||'';_0x4b8a4b===''&&_0x1eb3ab===''&&(_0x4b8a4b=this[_0x3b463d(0x944)][_0x3b463d(0x20c)](),_0x1eb3ab=this[_0x3b463d(0xba1)][_0x3b463d(0x805)]());const _0x57774a=ImageManager[_0x3b463d(0xa63)](_0x4b8a4b),_0x2a3119=ImageManager[_0x3b463d(0xad8)](_0x1eb3ab);_0x57774a[_0x3b463d(0x9d1)](this[_0x3b463d(0xb52)][_0x3b463d(0x543)](this,this[_0x3b463d(0x944)],this[_0x3b463d(0xba1)],_0x57774a,_0x2a3119));},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0xb52)]=function(_0x4dfae1,_0x59534a,_0x87b25e,_0x5ed584){const _0xa27395=_0x478a06;_0x5ed584['addLoadListener'](this['updateBattlebackBitmap2'][_0xa27395(0x543)](this,_0x4dfae1,_0x59534a,_0x87b25e,_0x5ed584));},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x6d2)]=function(_0x5472fc,_0xa65524,_0x4427c0,_0x57a5e1){const _0x25dbcb=_0x478a06;_0x5472fc[_0x25dbcb(0x410)]=_0x4427c0,_0xa65524[_0x25dbcb(0x410)]=_0x57a5e1,_0x5472fc[_0x25dbcb(0x8c7)](),_0xa65524['adjustPosition']();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x876)]=Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x52d)],Spriteset_Battle[_0x478a06(0x9c5)]['createBattleField']=function(){const _0x8d55a8=_0x478a06;VisuMZ[_0x8d55a8(0x1a5)][_0x8d55a8(0x876)][_0x8d55a8(0x21e)](this),this['createBattleFieldBattleCore']();},Spriteset_Battle[_0x478a06(0x9c5)]['createBattleFieldBattleCore']=function(){const _0x567a05=_0x478a06;this['createBattleFieldContainer'](),this['createUIContainer'](),this[_0x567a05(0x81b)](),this[_0x567a05(0x457)](),this[_0x567a05(0x393)]();},Spriteset_Battle['prototype'][_0x478a06(0x8b5)]=function(){const _0x30e9a4=_0x478a06;this[_0x30e9a4(0x1a8)]=new Sprite(),this[_0x30e9a4(0xab2)][_0x30e9a4(0xb9b)](this[_0x30e9a4(0x1a8)]);},Spriteset_Battle['prototype'][_0x478a06(0x81b)]=function(){const _0x257e35=_0x478a06;this['_animationContainer']=new Sprite(),Spriteset_Battle[_0x257e35(0x339)]?this[_0x257e35(0xb9b)](this[_0x257e35(0x9f4)]):this[_0x257e35(0xab2)][_0x257e35(0xb9b)](this[_0x257e35(0x9f4)]);},Spriteset_Battle['prototype'][_0x478a06(0x457)]=function(){const _0x728938=_0x478a06;this[_0x728938(0x258)]=new Sprite(),this[_0x728938(0x258)]['x']=this[_0x728938(0xab2)]['x'],this[_0x728938(0x258)]['y']=this[_0x728938(0xab2)]['y'],this[_0x728938(0xb9b)](this[_0x728938(0x258)]);},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x393)]=function(){const _0x27843b=_0x478a06;if(!this[_0x27843b(0x45a)]())return;this[_0x27843b(0x1a8)][_0x27843b(0x853)]['x']=-0x1,this['_battlerContainer']['x']=this[_0x27843b(0xab2)][_0x27843b(0xaad)],this[_0x27843b(0x632)][_0x27843b(0x853)]['x']=-0x1,this[_0x27843b(0x632)]['x']=this[_0x27843b(0xab2)][_0x27843b(0xaad)],this['_animationContainer'][_0x27843b(0x853)]['x']=-0x1,this['_animationContainer']['x']=this[_0x27843b(0xab2)]['width'],this[_0x27843b(0x258)][_0x27843b(0x853)]['x']=-0x1,this['_damageContainer']['x']=this['_battleField']['x']+this[_0x27843b(0xab2)]['width'];},Spriteset_Battle['prototype'][_0x478a06(0x6a3)]=function(){const _0x5a43be=_0x478a06;Imported['VisuMZ_0_CoreEngine']&&this[_0x5a43be(0xac2)]()&&this[_0x5a43be(0x644)]();const _0x2a2f44=$gameTroop[_0x5a43be(0x645)](),_0x5ea08a=[];for(const _0x1b07eb of _0x2a2f44){_0x5ea08a[_0x5a43be(0x6b3)](new Sprite_Enemy(_0x1b07eb));}_0x5ea08a[_0x5a43be(0x351)](this[_0x5a43be(0x2b4)][_0x5a43be(0x543)](this));for(const _0x1bdf5e of _0x5ea08a){this[_0x5a43be(0x1a8)][_0x5a43be(0xb9b)](_0x1bdf5e);}this[_0x5a43be(0x130)]=_0x5ea08a;},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x815)]=function(){const _0x2faa24=_0x478a06;this[_0x2faa24(0x928)]=[];for(let _0x463a92=0x0;_0x463a92<$gameParty['maxBattleMembers']();_0x463a92++){const _0x59a2a9=$gameParty[_0x2faa24(0x6dd)]()[_0x463a92],_0x470698=new Sprite_Actor();_0x470698[_0x2faa24(0xbdb)](_0x59a2a9),_0x470698['setBattler'](_0x59a2a9),_0x470698['update'](),this['_actorSprites'][_0x2faa24(0x6b3)](_0x470698),this[_0x2faa24(0x1a8)][_0x2faa24(0xb9b)](_0x470698);}},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x79f)]=function(_0x3465da,_0x50d717,_0x2005a7,_0xbe61e7){const _0x51b38d=_0x478a06,_0x579112=this['isMVAnimation'](_0x50d717),_0x55f15e=new(_0x579112?Sprite_AnimationMV:Sprite_Animation)(),_0x18863f=this[_0x51b38d(0x2e7)](_0x3465da);this[_0x51b38d(0x9d5)](_0x3465da[0x0])&&(_0x2005a7=!_0x2005a7),_0x55f15e[_0x51b38d(0xadf)]=_0x3465da,_0x55f15e[_0x51b38d(0x40f)](_0x18863f,_0x50d717,_0x2005a7,_0xbe61e7),this[_0x51b38d(0x57d)](_0x55f15e);},Spriteset_Battle['prototype'][_0x478a06(0x57d)]=function(_0x4fcef0){const _0x25fe1e=_0x478a06;this[_0x25fe1e(0x605)](_0x4fcef0)?(this[_0x25fe1e(0xbe2)]()[_0x25fe1e(0xb9b)](_0x4fcef0),_0x4fcef0[_0x25fe1e(0x9d9)]=!![]):(this[_0x25fe1e(0x9f4)]['addChild'](_0x4fcef0),Spriteset_Battle[_0x25fe1e(0x339)]&&(this['_animationContainer']['x']=this[_0x25fe1e(0x82f)]['x'],this['_animationContainer']['y']=this['_effectsContainer']['y'])),this[_0x25fe1e(0x8cb)][_0x25fe1e(0x6b3)](_0x4fcef0);},Spriteset_Battle['prototype'][_0x478a06(0x605)]=function(_0x3c3c51){const _0x375341=_0x478a06;if(!_0x3c3c51)return![];if(!_0x3c3c51['_animation'])return![];if(!_0x3c3c51[_0x375341(0xadf)][0x0])return![];if(_0x3c3c51['targetObjects'][0x0]['isActor']&&!_0x3c3c51[_0x375341(0xadf)][0x0][_0x375341(0x847)]())return![];if($gameSystem['isSideView']())return![];if(!this[_0x375341(0xbe2)]())return![];if(_0x3c3c51['constructor']===Sprite_Animation){const _0x274b28=VisuMZ[_0x375341(0x1a5)]['Settings'][_0x375341(0x145)];_0x274b28[_0x375341(0x7af)]=_0x274b28[_0x375341(0x7af)]??!![];if(_0x3c3c51[_0x375341(0x4cc)][_0x375341(0xc1)]===0x0&&!_0x274b28[_0x375341(0x7af)])return![];_0x274b28[_0x375341(0x567)]=_0x274b28[_0x375341(0x567)]??!![];if(_0x3c3c51[_0x375341(0x4cc)]['displayType']===0x1&&!_0x274b28[_0x375341(0x567)])return![];_0x274b28[_0x375341(0xad6)]=_0x274b28['FvAniCenterScreen']??![];if(_0x3c3c51[_0x375341(0x4cc)][_0x375341(0xc1)]===0x2&&!_0x274b28[_0x375341(0xad6)])return![];}else{if(_0x3c3c51['constructor']===Sprite_AnimationMV){if(_0x3c3c51[_0x375341(0x4cc)][_0x375341(0x43d)]===0x3)return![];}}return!![];const _0x36a142=Window_BattleStatus[_0x375341(0x9c5)][_0x375341(0x716)]();return['xp',_0x375341(0x596)][_0x375341(0xbaa)](_0x36a142);},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0xbe2)]=function(){const _0x4c8865=_0x478a06;if(!SceneManager['_scene'])return null;if(!SceneManager[_0x4c8865(0x143)]['_statusWindow'])return null;if(!SceneManager['_scene'][_0x4c8865(0x967)][_0x4c8865(0x82f)])return null;return SceneManager[_0x4c8865(0x143)][_0x4c8865(0x967)][_0x4c8865(0x82f)];},Spriteset_Battle[_0x478a06(0x9c5)]['removeAnimation']=function(_0x189ea1){const _0x17886c=_0x478a06;this[_0x17886c(0x16b)](_0x189ea1);for(const _0x1a460b of _0x189ea1[_0x17886c(0xadf)]){_0x1a460b['endAnimation']&&_0x1a460b[_0x17886c(0x422)]();}_0x189ea1[_0x17886c(0x22c)]();},Spriteset_Battle['prototype']['removeAnimationFromContainer']=function(_0x41ce36){const _0x38a700=_0x478a06;this[_0x38a700(0x605)](_0x41ce36)?this['battleStatusWindowAnimationContainer']()[_0x38a700(0x459)](_0x41ce36):this[_0x38a700(0x9f4)][_0x38a700(0x459)](_0x41ce36);this[_0x38a700(0x82f)][_0x38a700(0x459)](_0x41ce36),this[_0x38a700(0x9f4)][_0x38a700(0x459)](_0x41ce36),this[_0x38a700(0x8cb)]['remove'](_0x41ce36);if(this[_0x38a700(0x718)])this[_0x38a700(0x718)][_0x38a700(0x553)](_0x41ce36);},VisuMZ['BattleCore']['Spriteset_Battle_updateActors']=Spriteset_Battle['prototype'][_0x478a06(0x60e)],Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x60e)]=function(){const _0x5948fe=_0x478a06;VisuMZ[_0x5948fe(0x1a5)][_0x5948fe(0x9b2)][_0x5948fe(0x21e)](this),this[_0x5948fe(0x90c)]();},Spriteset_Battle['prototype'][_0x478a06(0x90c)]=function(){const _0x31ce78=_0x478a06;this[_0x31ce78(0x1a8)][_0x31ce78(0x671)][_0x31ce78(0x351)](this[_0x31ce78(0x956)][_0x31ce78(0x543)](this)),this['putActiveBattlerOnTop']();if(!this[_0x31ce78(0x1a8)])return;this[_0x31ce78(0x1a8)][_0x31ce78(0x6d0)]=this[_0x31ce78(0x225)]();},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x956)]=function(_0x5cc4f3,_0x35fef1){const _0x37ced0=_0x478a06;if(VisuMZ[_0x37ced0(0x1a5)][_0x37ced0(0x468)]['Actor'][_0x37ced0(0x204)]){if(_0x5cc4f3[_0x37ced0(0xbe5)]&&_0x35fef1['_battler']){if(_0x5cc4f3['_battler'][_0x37ced0(0x847)]()&&_0x35fef1[_0x37ced0(0xbe5)][_0x37ced0(0x8e3)]())return 0x1;else{if(_0x35fef1[_0x37ced0(0xbe5)][_0x37ced0(0x847)]()&&_0x5cc4f3['_battler'][_0x37ced0(0x8e3)]())return-0x1;}}}return _0x5cc4f3[_0x37ced0(0xb38)]!==_0x35fef1['_baseY']?_0x5cc4f3[_0x37ced0(0xb38)]-_0x35fef1[_0x37ced0(0xb38)]:_0x35fef1[_0x37ced0(0xa6c)]-_0x5cc4f3[_0x37ced0(0xa6c)];},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x4c2)]=function(){const _0x415190=_0x478a06;if(!VisuMZ[_0x415190(0x1a5)]['Settings'][_0x415190(0x145)][_0x415190(0x163)])return;const _0x3b1ad7=BattleManager['_subject'];if(_0x3b1ad7){if(_0x3b1ad7[_0x415190(0x847)]()&&!$gameSystem[_0x415190(0x787)]())return;if(_0x3b1ad7===BattleManager[_0x415190(0x421)]())return;const _0x1ecb43=_0x3b1ad7[_0x415190(0x244)]();if(_0x1ecb43&&_0x3b1ad7[_0x415190(0x847)]())this['_battlerContainer']['addChild'](_0x1ecb43);}},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x898)]=function(){for(const _0x5bd6dc of $gameParty['aliveMembers']()){if(!_0x5bd6dc)continue;if(!_0x5bd6dc['battler']())continue;_0x5bd6dc['battler']()['forceEscapeSprite']=!![],_0x5bd6dc['battler']()['retreat']();}},Spriteset_Battle[_0x478a06(0x9c5)]['createUIContainer']=function(){const _0x22f869=_0x478a06;this[_0x22f869(0x632)]=new Sprite(),Spriteset_Battle[_0x22f869(0x339)]?this[_0x22f869(0xb9b)](this[_0x22f869(0x632)]):this[_0x22f869(0xab2)][_0x22f869(0xb9b)](this[_0x22f869(0x632)]),SceneManager[_0x22f869(0x143)]['_uiContainer']=this['_uiContainer'];},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x546)]=function(){const _0x1a59b8=_0x478a06;if(VisuMZ[_0x1a59b8(0x1a5)][_0x1a59b8(0x468)][_0x1a59b8(0x9b6)]['NameLegacy'])return;this[_0x1a59b8(0x826)]=new Sprite(),BattleManager[_0x1a59b8(0x937)](this[_0x1a59b8(0x826)]);for(const _0x4fb643 of this[_0x1a59b8(0x130)]){const _0x312e0a=new Sprite_EnemyName();this[_0x1a59b8(0x826)][_0x1a59b8(0xb9b)](_0x312e0a),_0x312e0a[_0x1a59b8(0x87a)](_0x4fb643);}},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x9f8)]=function(){const _0x5607e4=_0x478a06;if(!this[_0x5607e4(0x258)])return;if(!this['_uiContainer'])return;const _0x614418=Spriteset_Battle[_0x5607e4(0x339)]?this['_damageContainer']['x']:0x0,_0x18f08d=Spriteset_Battle[_0x5607e4(0x339)]?this['_damageContainer']['y']:0x0,_0x3cbce6=Imported[_0x5607e4(0x7b2)]?this['_battleField']['x']:0x0,_0x403bd3=Imported[_0x5607e4(0x7b2)]?this[_0x5607e4(0xab2)]['y']:0x0;this[_0x5607e4(0x632)]['x']=_0x614418+_0x3cbce6,this[_0x5607e4(0x632)]['y']=_0x18f08d+_0x403bd3;},BattleManager[_0x478a06(0x937)]=function(_0x30d9f1){const _0x485450=_0x478a06;if(!SceneManager[_0x485450(0x143)][_0x485450(0x632)])return;SceneManager[_0x485450(0x143)]['_uiContainer'][_0x485450(0xb9b)](_0x30d9f1);},BattleManager[_0x478a06(0xbb9)]=function(_0x2372fc){const _0x72523=_0x478a06;if(!SceneManager[_0x72523(0x143)][_0x72523(0x632)])return;SceneManager[_0x72523(0x143)]['_uiContainer'][_0x72523(0x459)](_0x2372fc);},Spriteset_Battle['prototype'][_0x478a06(0x225)]=function(){return 0xff;},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x46f)]=function(){return![];},Spriteset_Battle['prototype']['isAnyoneFloating']=function(){const _0x7161bf=_0x478a06;return this['battlerSprites']()['some'](_0x3f8787=>_0x3f8787[_0x7161bf(0x8ce)]());},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x6d6)]=function(){const _0x306846=_0x478a06;return this[_0x306846(0x65a)]()[_0x306846(0x3cb)](_0x24827c=>_0x24827c[_0x306846(0x979)]());},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x665)]=function(){const _0x1ecd1f=_0x478a06;return this['battlerSprites']()['some'](_0x462748=>_0x462748[_0x1ecd1f(0x24f)]());},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x406)]=function(){const _0x5f4e64=_0x478a06;return this[_0x5f4e64(0x65a)]()[_0x5f4e64(0x3cb)](_0x34d2f1=>_0x34d2f1['isSkewing']());},Spriteset_Battle['prototype'][_0x478a06(0xbeb)]=function(){const _0x49a5a6=_0x478a06;return this[_0x49a5a6(0x65a)]()[_0x49a5a6(0x3cb)](_0x1b487e=>_0x1b487e['isSpinning']());},Spriteset_Battle[_0x478a06(0x9c5)][_0x478a06(0x24d)]=function(){const _0x14f9b1=_0x478a06;return this[_0x14f9b1(0x65a)]()['some'](_0x95bb58=>_0x95bb58['isChangingOpacity']());},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x8e7)]=Window_ItemList[_0x478a06(0x9c5)][_0x478a06(0x951)],Window_ItemList['prototype'][_0x478a06(0x951)]=function(){const _0x53e3c0=_0x478a06;return SceneManager[_0x53e3c0(0x785)]()?SceneManager[_0x53e3c0(0x143)][_0x53e3c0(0x716)]()===_0x53e3c0(0x444)?VisuMZ[_0x53e3c0(0x1a5)][_0x53e3c0(0x468)][_0x53e3c0(0x64a)][_0x53e3c0(0x7b9)]:VisuMZ[_0x53e3c0(0x1a5)]['Settings'][_0x53e3c0(0x64a)]['SkillItemStandardCols']:VisuMZ['BattleCore'][_0x53e3c0(0x8e7)][_0x53e3c0(0x21e)](this);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xa39)]=Window_SkillList[_0x478a06(0x9c5)][_0x478a06(0x951)],Window_SkillList[_0x478a06(0x9c5)][_0x478a06(0x951)]=function(){const _0x4b875a=_0x478a06;return SceneManager['isSceneBattle']()?SceneManager[_0x4b875a(0x143)][_0x4b875a(0x716)]()==='border'?VisuMZ[_0x4b875a(0x1a5)][_0x4b875a(0x468)][_0x4b875a(0x64a)][_0x4b875a(0x7b9)]:VisuMZ[_0x4b875a(0x1a5)][_0x4b875a(0x468)][_0x4b875a(0x64a)][_0x4b875a(0xa30)]:VisuMZ['BattleCore'][_0x4b875a(0xa39)][_0x4b875a(0x21e)](this);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x156)]=Window_Options['prototype'][_0x478a06(0x2fc)],Window_Options[_0x478a06(0x9c5)][_0x478a06(0x2fc)]=function(){const _0x58eafb=_0x478a06;VisuMZ[_0x58eafb(0x1a5)][_0x58eafb(0x156)][_0x58eafb(0x21e)](this),this['addAutoBattleCommands'](),this[_0x58eafb(0x327)]();},Window_Options[_0x478a06(0x9c5)][_0x478a06(0xda)]=function(){const _0x253a1d=_0x478a06;VisuMZ[_0x253a1d(0x1a5)][_0x253a1d(0x468)]['AutoBattle'][_0x253a1d(0x96d)]&&(this['addBattleCoreAutoBattleStartupCommand'](),this[_0x253a1d(0x894)]());},Window_Options[_0x478a06(0x9c5)][_0x478a06(0x327)]=function(){const _0xe3a38=_0x478a06;if(!VisuMZ[_0xe3a38(0x1a5)][_0xe3a38(0x468)][_0xe3a38(0x2ae)][_0xe3a38(0x656)])return;const _0x22183e=TextManager[_0xe3a38(0xb3d)],_0x23f355=_0xe3a38(0xb3d);this['addCommand'](_0x22183e,_0x23f355);},Window_Options[_0x478a06(0x9c5)]['addBattleCoreAutoBattleStartupCommand']=function(){const _0x436168=_0x478a06,_0x1823e9=TextManager[_0x436168(0x385)],_0x3ec0b3=_0x436168(0xaf8);this[_0x436168(0x652)](_0x1823e9,_0x3ec0b3);},Window_Options[_0x478a06(0x9c5)]['addBattleCoreAutoBattleStyleCommand']=function(){const _0x38ead3=_0x478a06,_0x4eb543=TextManager[_0x38ead3(0x7d1)],_0x5697ed=_0x38ead3(0x4fa);this['addCommand'](_0x4eb543,_0x5697ed);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x77f)]=Window_Options[_0x478a06(0x9c5)][_0x478a06(0xb57)],Window_Options[_0x478a06(0x9c5)][_0x478a06(0xb57)]=function(_0x5694cd){const _0x12f138=_0x478a06,_0x4b8258=this[_0x12f138(0x4b0)](_0x5694cd);return _0x4b8258==='autoBattleUseSkills'?this['statusTextAutoBattleStyle']():VisuMZ[_0x12f138(0x1a5)]['Window_Options_statusText']['call'](this,_0x5694cd);},Window_Options[_0x478a06(0x9c5)][_0x478a06(0x55e)]=function(){const _0x56f8b2=_0x478a06,_0x4df4b4=VisuMZ['BattleCore'][_0x56f8b2(0x468)]['AutoBattle'],_0xca5dd9=this[_0x56f8b2(0xa9a)](_0x56f8b2(0x4fa));return _0xca5dd9?_0x4df4b4[_0x56f8b2(0xbc2)]:_0x4df4b4['StyleOFF'];},Window_ShopStatus['prototype'][_0x478a06(0xa1e)]=function(){const _0x21d335=_0x478a06,_0x7a4fa5=DataManager[_0x21d335(0x806)](this[_0x21d335(0x808)]),_0x300beb=VisuMZ[_0x21d335(0x181)][_0x7a4fa5];if(!_0x300beb)return this[_0x21d335(0x989)]();const _0x103bb0='DamageType%1'['format'](this['_item'][_0x21d335(0x6b4)][_0x21d335(0x47c)]),_0x4a405b=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x21d335(0x808)]['damage'][_0x21d335(0x47c)]];return _0x300beb[_0x103bb0][_0x21d335(0x177)](_0x4a405b);},Window_ShopStatus['prototype'][_0x478a06(0x20f)]=function(){const _0x4ac82d=_0x478a06,_0x55cd2b=DataManager[_0x4ac82d(0x806)](this[_0x4ac82d(0x808)]),_0x4b9ff8=VisuMZ[_0x4ac82d(0x181)][_0x55cd2b];if(!_0x4b9ff8)return this[_0x4ac82d(0x4a7)]();return _0x4b9ff8[_0x4ac82d(0x47e)][_0x4ac82d(0x21e)](this);},VisuMZ['BattleCore'][_0x478a06(0x6e4)]=Window_PartyCommand['prototype']['initialize'],Window_PartyCommand['prototype'][_0x478a06(0x552)]=function(_0x5d4c26){const _0x3bf7ed=_0x478a06;VisuMZ['BattleCore']['Window_PartyCommand_initialize'][_0x3bf7ed(0x21e)](this,_0x5d4c26),this[_0x3bf7ed(0x770)](_0x5d4c26);},Window_PartyCommand['prototype'][_0x478a06(0x770)]=function(_0x41538d){const _0x578fc0=_0x478a06,_0x19f2d7=new Rectangle(0x0,0x0,_0x41538d['width'],_0x41538d[_0x578fc0(0x15a)]);this['_commandNameWindow']=new Window_Base(_0x19f2d7),this[_0x578fc0(0x612)][_0x578fc0(0x6d0)]=0x0,this['addChild'](this[_0x578fc0(0x612)]),this[_0x578fc0(0x868)]();},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0x9f9)]=function(){const _0x512529=_0x478a06;Window_Command['prototype'][_0x512529(0x9f9)][_0x512529(0x21e)](this);if(this[_0x512529(0x612)])this['updateCommandNameWindow']();},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0x868)]=function(){const _0x22e0de=_0x478a06,_0x24c4ed=this[_0x22e0de(0x612)];_0x24c4ed[_0x22e0de(0x2b9)]['clear']();const _0x3acc16=this[_0x22e0de(0x381)](this[_0x22e0de(0x5c6)]());if(_0x3acc16==='icon'&&this['maxItems']()>0x0){const _0x5d852f=this[_0x22e0de(0x372)](this['index']());let _0x1efa01=this['commandName'](this[_0x22e0de(0x5c6)]());_0x1efa01=_0x1efa01[_0x22e0de(0xaa3)](/\\I\[(\d+)\]/gi,''),_0x24c4ed[_0x22e0de(0x140)](),this[_0x22e0de(0x3c8)](_0x1efa01,_0x5d852f),this[_0x22e0de(0x625)](_0x1efa01,_0x5d852f),this['commandNameWindowCenter'](_0x1efa01,_0x5d852f);}},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0x3c8)]=function(_0xc95b9e,_0x8b1bfa){},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0x625)]=function(_0x4c1bc7,_0x3ba57e){const _0x139d48=_0x478a06,_0x1890db=this[_0x139d48(0x612)];_0x1890db[_0x139d48(0x895)](_0x4c1bc7,0x0,_0x3ba57e['y'],_0x1890db['innerWidth'],_0x139d48(0x11d));},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0x1ef)]=function(_0xd1a304,_0xc0ed84){const _0x42faaa=_0x478a06,_0x57150b=this['_commandNameWindow'],_0x165e5f=$gameSystem[_0x42faaa(0xae4)](),_0x5b8d51=_0xc0ed84['x']+Math[_0x42faaa(0xa76)](_0xc0ed84[_0x42faaa(0xaad)]/0x2)+_0x165e5f;_0x57150b['x']=_0x57150b[_0x42faaa(0xaad)]/-0x2+_0x5b8d51,_0x57150b['y']=Math[_0x42faaa(0xa76)](_0xc0ed84[_0x42faaa(0x15a)]/0x2);},Window_PartyCommand['prototype'][_0x478a06(0x313)]=function(){const _0x1dc6ea=_0x478a06;this[_0x1dc6ea(0x7f3)](),this[_0x1dc6ea(0x328)](),this[_0x1dc6ea(0x5c3)](),this[_0x1dc6ea(0xa11)](),this[_0x1dc6ea(0x83f)](),this['addEscapeCommand']();},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0x7f3)]=function(){const _0x5869ce=_0x478a06,_0x366bd3=this[_0x5869ce(0xab5)](),_0x51255c=VisuMZ[_0x5869ce(0x1a5)][_0x5869ce(0x468)][_0x5869ce(0xae9)][_0x5869ce(0x209)],_0x47aaa2=_0x366bd3===_0x5869ce(0x47f)?TextManager['fight']:_0x5869ce(0x5c2)['format'](_0x51255c,TextManager[_0x5869ce(0x53c)]),_0x2b3095=this['isFightCommandEnabled']();this[_0x5869ce(0x652)](_0x47aaa2,'fight',_0x2b3095);},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0x71c)]=function(){return!![];},Window_PartyCommand['prototype'][_0x478a06(0x328)]=function(){const _0x3173ce=_0x478a06;if(!this['isAutoBattleCommandAdded']())return;const _0x1ca9e5=this[_0x3173ce(0xab5)](),_0x615093=VisuMZ['BattleCore'][_0x3173ce(0x468)]['PartyCmd']['CmdIconAutoBattle'],_0x267847=_0x1ca9e5==='text'?TextManager[_0x3173ce(0x9d0)]:_0x3173ce(0x5c2)[_0x3173ce(0x177)](_0x615093,TextManager[_0x3173ce(0x9d0)]),_0x28979e=this['isAutoBattleCommandEnabled']();this[_0x3173ce(0x652)](_0x267847,'autoBattle',_0x28979e);},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0xcb)]=function(){const _0x144887=_0x478a06;return VisuMZ[_0x144887(0x1a5)]['Settings'][_0x144887(0xae9)][_0x144887(0x642)];},Window_PartyCommand['prototype'][_0x478a06(0x8a6)]=function(){return!![];},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0x5c3)]=function(){},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0xa11)]=function(){const _0x53cde1=_0x478a06,_0x585fe6=VisuMZ['BattleCore'][_0x53cde1(0x468)]['PartyCmd']['CommandAddStatus']??!![];if(!_0x585fe6)return;const _0x20f9ed=this[_0x53cde1(0xab5)](),_0x455bbc=VisuMZ[_0x53cde1(0x1a5)][_0x53cde1(0x468)]['InBattleStatus']['CmdIconStatus']??0x57,_0xa11b29=_0x20f9ed==='text'?TextManager[_0x53cde1(0x9a0)]:_0x53cde1(0x5c2)[_0x53cde1(0x177)](_0x455bbc,TextManager['status']),_0x427e71=!![];this[_0x53cde1(0x652)](_0xa11b29,'status',_0x427e71);},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0x83f)]=function(){const _0x14c6a4=_0x478a06;if(!this[_0x14c6a4(0x6bd)]())return;const _0x4d47e8=this['commandStyle'](),_0x3d0fc7=VisuMZ['BattleCore'][_0x14c6a4(0x468)][_0x14c6a4(0xae9)]['CmdIconOptions'],_0x4cab91=_0x4d47e8==='text'?TextManager['options']:_0x14c6a4(0x5c2)[_0x14c6a4(0x177)](_0x3d0fc7,TextManager['options']),_0x3cafaa=this[_0x14c6a4(0x6d7)]();this[_0x14c6a4(0x652)](_0x4cab91,'options',_0x3cafaa);},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0x6bd)]=function(){const _0x3af7b4=_0x478a06;return VisuMZ['BattleCore'][_0x3af7b4(0x468)][_0x3af7b4(0xae9)][_0x3af7b4(0x735)];},Window_PartyCommand[_0x478a06(0x9c5)]['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand['prototype'][_0x478a06(0x7e1)]=function(){const _0x30a695=_0x478a06,_0x494307=this['commandStyle'](),_0x552815=VisuMZ[_0x30a695(0x1a5)][_0x30a695(0x468)]['PartyCmd']['CmdIconEscape'],_0x5e0aab=_0x494307===_0x30a695(0x47f)?TextManager[_0x30a695(0x9e8)]:_0x30a695(0x5c2)['format'](_0x552815,TextManager['escape']),_0x1e5869=this[_0x30a695(0xb8b)]();this[_0x30a695(0x652)](_0x5e0aab,_0x30a695(0x9e8),_0x1e5869);},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0xb8b)]=function(){const _0x26430d=_0x478a06;return BattleManager[_0x26430d(0x748)]();},Window_PartyCommand['prototype'][_0x478a06(0x51d)]=function(){const _0x282aaf=_0x478a06;return VisuMZ[_0x282aaf(0x1a5)][_0x282aaf(0x468)]['PartyCmd']['CmdTextAlign'];},Window_PartyCommand['prototype'][_0x478a06(0x817)]=function(_0x4c18c7){const _0x5d2790=_0x478a06,_0x41df65=this[_0x5d2790(0x381)](_0x4c18c7);if(_0x41df65===_0x5d2790(0x7ae))this[_0x5d2790(0x971)](_0x4c18c7);else _0x41df65==='icon'?this['drawItemStyleIcon'](_0x4c18c7):Window_Command[_0x5d2790(0x9c5)][_0x5d2790(0x817)][_0x5d2790(0x21e)](this,_0x4c18c7);},Window_PartyCommand[_0x478a06(0x9c5)]['commandStyle']=function(){const _0x49db36=_0x478a06;return VisuMZ[_0x49db36(0x1a5)][_0x49db36(0x468)][_0x49db36(0xae9)][_0x49db36(0x37a)];},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0x381)]=function(_0x1e37bb){const _0x295f0d=_0x478a06;if(_0x1e37bb<0x0)return _0x295f0d(0x47f);const _0x3c760a=this[_0x295f0d(0xab5)]();if(_0x3c760a!=='auto')return _0x3c760a;else{if(this['maxItems']()>0x0){const _0x1f1cf7=this[_0x295f0d(0xaf1)](_0x1e37bb);if(_0x1f1cf7[_0x295f0d(0x85a)](/\\I\[(\d+)\]/i)){const _0x59cca1=this[_0x295f0d(0x372)](_0x1e37bb),_0x26ada4=this[_0x295f0d(0x799)](_0x1f1cf7)['width'];return _0x26ada4<=_0x59cca1[_0x295f0d(0xaad)]?'iconText':_0x295f0d(0x308);}}}return'text';},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0x971)]=function(_0x1ce08e){const _0x498b4e=_0x478a06,_0x43f065=this['itemLineRect'](_0x1ce08e),_0x371a82=this[_0x498b4e(0xaf1)](_0x1ce08e),_0x280423=this[_0x498b4e(0x799)](_0x371a82)[_0x498b4e(0xaad)];this[_0x498b4e(0x1a7)](this[_0x498b4e(0xde)](_0x1ce08e));const _0x3e41ea=this[_0x498b4e(0x51d)]();if(_0x3e41ea===_0x498b4e(0x58d))this[_0x498b4e(0x31a)](_0x371a82,_0x43f065['x']+_0x43f065[_0x498b4e(0xaad)]-_0x280423,_0x43f065['y'],_0x280423);else{if(_0x3e41ea==='center'){const _0x59cc85=_0x43f065['x']+Math[_0x498b4e(0xa76)]((_0x43f065[_0x498b4e(0xaad)]-_0x280423)/0x2);this[_0x498b4e(0x31a)](_0x371a82,_0x59cc85,_0x43f065['y'],_0x280423);}else this[_0x498b4e(0x31a)](_0x371a82,_0x43f065['x'],_0x43f065['y'],_0x280423);}},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0x2c8)]=function(_0x5c905f){const _0xf1c558=_0x478a06;this['commandName'](_0x5c905f)[_0xf1c558(0x85a)](/\\I\[(\d+)\]/i);const _0x539974=Number(RegExp['$1'])||0x0,_0x16feac=this['itemLineRect'](_0x5c905f),_0x361488=_0x16feac['x']+Math[_0xf1c558(0xa76)]((_0x16feac['width']-ImageManager[_0xf1c558(0x33e)])/0x2),_0x31a5fd=_0x16feac['y']+(_0x16feac[_0xf1c558(0x15a)]-ImageManager['iconHeight'])/0x2;this[_0xf1c558(0x5eb)](_0x539974,_0x361488,_0x31a5fd);},Window_PartyCommand['prototype'][_0x478a06(0x4be)]=function(){},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0x901)]=function(){const _0x56112e=_0x478a06;Window_Command[_0x56112e(0x9c5)][_0x56112e(0x901)][_0x56112e(0x21e)](this);const _0x1580d3=this[_0x56112e(0x716)]();_0x1580d3===_0x56112e(0x444)&&this['showHelpWindow']();},Window_PartyCommand['prototype']['battleLayoutStyle']=function(){const _0x3cd77c=_0x478a06;if(this['_battleLayoutStyle'])return this[_0x3cd77c(0x518)];return this[_0x3cd77c(0x518)]=SceneManager[_0x3cd77c(0x143)][_0x3cd77c(0x716)](),this[_0x3cd77c(0x518)];},Window_PartyCommand[_0x478a06(0x9c5)][_0x478a06(0xb93)]=function(){const _0x29544c=_0x478a06,_0x490a5a=VisuMZ[_0x29544c(0x1a5)][_0x29544c(0x468)]['PartyCmd'],_0x2ad586=this['currentSymbol']();switch(_0x2ad586){case _0x29544c(0x53c):this[_0x29544c(0x91f)][_0x29544c(0x4f7)](_0x490a5a[_0x29544c(0x3fe)]);break;case _0x29544c(0x9d0):this[_0x29544c(0x91f)][_0x29544c(0x4f7)](_0x490a5a[_0x29544c(0xb4d)]);break;case'options':this['_helpWindow'][_0x29544c(0x4f7)](_0x490a5a[_0x29544c(0xa09)]);break;case _0x29544c(0x9e8):this[_0x29544c(0x91f)]['setText'](_0x490a5a['HelpEscape']);break;case _0x29544c(0x9a0):this[_0x29544c(0x91f)]['setText'](Window_InBattleStatus[_0x29544c(0xb9d)][_0x29544c(0x873)]);break;default:this[_0x29544c(0x91f)][_0x29544c(0x4f7)]('');break;}},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x490)]=Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x552)],Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x552)]=function(_0x577669){const _0x16c4f9=_0x478a06;VisuMZ[_0x16c4f9(0x1a5)][_0x16c4f9(0x490)][_0x16c4f9(0x21e)](this,_0x577669),this[_0x16c4f9(0x770)](_0x577669);},Window_ActorCommand[_0x478a06(0x9c5)]['createCommandNameWindow']=function(_0x331a12){const _0x14683f=_0x478a06,_0x3ddd88=new Rectangle(0x0,0x0,_0x331a12[_0x14683f(0xaad)],_0x331a12[_0x14683f(0x15a)]);this[_0x14683f(0x612)]=new Window_Base(_0x3ddd88),this['_commandNameWindow'][_0x14683f(0x6d0)]=0x0,this['addChild'](this[_0x14683f(0x612)]),this[_0x14683f(0x868)]();},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x9f9)]=function(){const _0x509c5c=_0x478a06;Window_Command[_0x509c5c(0x9c5)][_0x509c5c(0x9f9)][_0x509c5c(0x21e)](this);if(this['_commandNameWindow'])this['updateCommandNameWindow']();},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x868)]=function(){const _0x89d98e=_0x478a06,_0x2a31ae=this[_0x89d98e(0x612)];_0x2a31ae[_0x89d98e(0x2b9)][_0x89d98e(0x87d)]();const _0x3b49e1=this[_0x89d98e(0x381)](this[_0x89d98e(0x5c6)]());if(_0x3b49e1===_0x89d98e(0x308)&&this[_0x89d98e(0x4e0)]()>0x0){const _0x2e14ae=this[_0x89d98e(0x372)](this[_0x89d98e(0x5c6)]());let _0x467376=this[_0x89d98e(0xaf1)](this[_0x89d98e(0x5c6)]());_0x467376=_0x467376['replace'](/\\I\[(\d+)\]/gi,''),_0x2a31ae['resetFontSettings'](),this[_0x89d98e(0x3c8)](_0x467376,_0x2e14ae),this[_0x89d98e(0x625)](_0x467376,_0x2e14ae),this[_0x89d98e(0x1ef)](_0x467376,_0x2e14ae);}},Window_ActorCommand['prototype'][_0x478a06(0x3c8)]=function(_0x3a46fe,_0x2b70aa){},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x625)]=function(_0x4c7ce8,_0x5e85f2){const _0xdda7b3=_0x478a06,_0x3163f1=this['_commandNameWindow'];_0x3163f1[_0xdda7b3(0x895)](_0x4c7ce8,0x0,_0x5e85f2['y'],_0x3163f1[_0xdda7b3(0x25f)],_0xdda7b3(0x11d));},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x1ef)]=function(_0x34c005,_0x1e4a3c){const _0x5cb519=_0x478a06,_0x2f41b8=this['_commandNameWindow'],_0xf6d7e6=$gameSystem[_0x5cb519(0xae4)](),_0xa37476=_0x1e4a3c['x']+Math[_0x5cb519(0xa76)](_0x1e4a3c[_0x5cb519(0xaad)]/0x2)+_0xf6d7e6;_0x2f41b8['x']=_0x2f41b8[_0x5cb519(0xaad)]/-0x2+_0xa37476,_0x2f41b8['y']=Math[_0x5cb519(0xa76)](_0x1e4a3c[_0x5cb519(0x15a)]/0x2);},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x313)]=function(){const _0x3aaf14=_0x478a06;if(!this[_0x3aaf14(0x917)])return;const _0x4c32d6=this['_actor']['battleCommands']();for(const _0x171eae of _0x4c32d6){this[_0x3aaf14(0xc2)](_0x171eae[_0x3aaf14(0xabf)]()['trim']());}},Window_ActorCommand['prototype'][_0x478a06(0xc2)]=function(_0x11275e){const _0x40d92e=_0x478a06;_0x11275e===_0x40d92e(0x2a0)&&this[_0x40d92e(0x3be)]();[_0x40d92e(0x8a9),_0x40d92e(0x188)][_0x40d92e(0x982)](_0x11275e)&&this['addSkillCommands']();_0x11275e===_0x40d92e(0xbe6)&&this[_0x40d92e(0x12a)]();_0x11275e===_0x40d92e(0x5ff)&&this[_0x40d92e(0xa9b)]();_0x11275e===_0x40d92e(0x39b)&&this[_0x40d92e(0xa11)]();_0x11275e==='ESCAPE'&&this['addEscapeCommand']();_0x11275e===_0x40d92e(0x70d)&&this['addAutoBattleCommand']();if(_0x11275e[_0x40d92e(0x85a)](/STYPE: (\d+)/i)){const _0xb99cad=Number(RegExp['$1']);this[_0x40d92e(0x6ae)](_0xb99cad);}else{if(_0x11275e['match'](/STYPE: (.*)/i)){const _0xdd969d=DataManager[_0x40d92e(0xb86)](RegExp['$1']);this[_0x40d92e(0x6ae)](_0xdd969d);}}_0x11275e===_0x40d92e(0x8eb)&&this['addSingleSkillCommands']();if(_0x11275e[_0x40d92e(0x85a)](/SKILL: (\d+)/i)){const _0x588264=Number(RegExp['$1']);this[_0x40d92e(0x4c0)]($dataSkills[_0x588264]);}else{if(_0x11275e[_0x40d92e(0x85a)](/SKILL: (.*)/i)){const _0x31793d=DataManager[_0x40d92e(0x151)](RegExp['$1']);this[_0x40d92e(0x4c0)]($dataSkills[_0x31793d]);}}_0x11275e===_0x40d92e(0x711)&&Imported[_0x40d92e(0x426)]&&this['addPartyCommand'](),[_0x40d92e(0x751),_0x40d92e(0xb0d)][_0x40d92e(0x982)](_0x11275e)&&Imported[_0x40d92e(0xb6e)]&&this[_0x40d92e(0x14a)](),_0x11275e===_0x40d92e(0x83d)&&Imported[_0x40d92e(0xaa6)]&&this[_0x40d92e(0x81e)](!![]),_0x11275e===_0x40d92e(0x536)&&Imported[_0x40d92e(0xaaf)]&&this[_0x40d92e(0xb3e)]();},Window_ActorCommand[_0x478a06(0x9c5)]['addAttackCommand']=function(){const _0x5220f9=_0x478a06,_0x4fe14f=$dataSkills[this[_0x5220f9(0x917)][_0x5220f9(0x1ba)]()];if(!_0x4fe14f)return;if(!this[_0x5220f9(0x75c)](_0x4fe14f))return;const _0x4dd25e=this[_0x5220f9(0xab5)](),_0x3b0175=DataManager[_0x5220f9(0x38b)](_0x4fe14f),_0x281fc0=DataManager[_0x5220f9(0x3ad)](_0x4fe14f),_0xda8c0e=_0x4dd25e===_0x5220f9(0x47f)?_0x3b0175:_0x5220f9(0x5c2)[_0x5220f9(0x177)](_0x281fc0,_0x3b0175);this[_0x5220f9(0x652)](_0xda8c0e,_0x5220f9(0x1c5),this[_0x5220f9(0x917)][_0x5220f9(0x9cd)]());},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x12a)]=function(){const _0x4e6bf3=_0x478a06,_0x446e02=$dataSkills[this[_0x4e6bf3(0x917)][_0x4e6bf3(0x2c3)]()];if(!_0x446e02)return;if(!this[_0x4e6bf3(0x75c)](_0x446e02))return;const _0x3a429c=this['commandStyle'](),_0x365865=DataManager[_0x4e6bf3(0x38b)](_0x446e02),_0x51d6aa=DataManager[_0x4e6bf3(0x3ad)](_0x446e02),_0xa1df7f=_0x3a429c===_0x4e6bf3(0x47f)?_0x365865:_0x4e6bf3(0x5c2)['format'](_0x51d6aa,_0x365865);this[_0x4e6bf3(0x652)](_0xa1df7f,_0x4e6bf3(0x7cc),this[_0x4e6bf3(0x917)][_0x4e6bf3(0x300)]());},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0xa9b)]=function(){const _0x14eb5a=_0x478a06,_0x21eaaa=this[_0x14eb5a(0xab5)](),_0x1958df=VisuMZ['BattleCore'][_0x14eb5a(0x468)]['ActorCmd'][_0x14eb5a(0x325)],_0xf24173=_0x21eaaa==='text'?TextManager[_0x14eb5a(0x8dd)]:_0x14eb5a(0x5c2)[_0x14eb5a(0x177)](_0x1958df,TextManager[_0x14eb5a(0x8dd)]),_0x5da80b=this[_0x14eb5a(0xa87)]();this[_0x14eb5a(0x652)](_0xf24173,_0x14eb5a(0x8dd),_0x5da80b);},Window_ActorCommand[_0x478a06(0x9c5)]['isItemCommandEnabled']=function(){const _0x43b01d=_0x478a06;return this[_0x43b01d(0x917)]&&this['_actor'][_0x43b01d(0x132)]();},Window_ActorCommand['prototype']['addSkillCommands']=function(){const _0x385689=_0x478a06,_0x245d8f=this['_actor'][_0x385689(0x473)]();for(const _0x329d00 of _0x245d8f){this['addSkillTypeCommand'](_0x329d00);}},Window_ActorCommand[_0x478a06(0x9c5)]['addSkillTypeCommand']=function(_0x2a279c){const _0x10f3c5=_0x478a06;let _0x6ce57=$dataSystem[_0x10f3c5(0x473)][_0x2a279c];if(!_0x6ce57)return;let _0x3860f9=_0x6ce57;const _0x1731b9=this['commandStyle']();if(_0x1731b9===_0x10f3c5(0x47f))_0x3860f9=_0x3860f9[_0x10f3c5(0xaa3)](/\x1I\[(\d+)\]/gi,''),_0x3860f9=_0x3860f9[_0x10f3c5(0xaa3)](/\\I\[(\d+)\]/gi,'');else{if(!_0x6ce57['match'](/\\I\[(\d+)\]/i)){const _0x504a25=Imported[_0x10f3c5(0x7a6)]?VisuMZ['SkillsStatesCore'][_0x10f3c5(0x468)][_0x10f3c5(0xb7a)]:VisuMZ[_0x10f3c5(0x1a5)][_0x10f3c5(0x468)][_0x10f3c5(0xa6d)],_0x39cdac=$dataSystem[_0x10f3c5(0x96c)]['includes'](_0x2a279c),_0x1a6e12=_0x39cdac?_0x504a25[_0x10f3c5(0xba7)]:_0x504a25[_0x10f3c5(0xaba)];_0x3860f9=_0x10f3c5(0x5c2)[_0x10f3c5(0x177)](_0x1a6e12,_0x6ce57);}}this[_0x10f3c5(0x652)](_0x3860f9,_0x10f3c5(0x1f6),!![],_0x2a279c);},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x379)]=function(){const _0x41e584=_0x478a06,_0x304d14=this[_0x41e584(0x917)][_0x41e584(0x473)](),_0x337543=this[_0x41e584(0x917)]['skills']();for(const _0x3aa541 of _0x337543){if(!_0x3aa541)continue;if(Imported[_0x41e584(0x7a6)]){if(this['noSimilarSTypes'](_0x3aa541))continue;if(this['isHiddenSkill'](_0x3aa541))continue;}else{if(!_0x304d14[_0x41e584(0x982)](_0x3aa541[_0x41e584(0x41e)]))continue;}this['addSingleSkillCommand'](_0x3aa541);}},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x25c)]=function(_0x369c8f){const _0x4c28f1=_0x478a06,_0x352a76=this[_0x4c28f1(0x917)]['skillTypes'](),_0x28fb3b=_0x352a76[_0x4c28f1(0x4d3)](_0x14f65f=>DataManager[_0x4c28f1(0x52f)](_0x369c8f)['includes'](_0x14f65f));return _0x28fb3b[_0x4c28f1(0x496)]<=0x0;},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x5f6)]=function(_0x5c14b3){const _0x455110=_0x478a06;if(Imported['VisuMZ_1_SkillsStatesCore']){if(VisuMZ['SkillsStatesCore'][_0x455110(0x784)]>=1.24){if(this[_0x455110(0x917)]){if(!VisuMZ[_0x455110(0x783)]['CheckVisibleBattleNotetags'](this[_0x455110(0x917)],_0x5c14b3))return!![];if(!VisuMZ['SkillsStatesCore'][_0x455110(0x7f5)](this['_actor'],_0x5c14b3))return!![];if(!VisuMZ[_0x455110(0x783)][_0x455110(0x512)](this[_0x455110(0x917)],_0x5c14b3))return!![];}}else{if(!Window_SkillList[_0x455110(0x9c5)][_0x455110(0x84b)][_0x455110(0x21e)](this,_0x5c14b3))return!![];if(!Window_SkillList['prototype']['checkShowHideSwitchNotetags']['call'](this,_0x5c14b3))return!![];if(!Window_SkillList[_0x455110(0x9c5)][_0x455110(0x52e)][_0x455110(0x21e)](this,_0x5c14b3))return!![];}}return![];},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x4c0)]=function(_0x17b1e8){const _0x41e174=_0x478a06;if(!_0x17b1e8)return;if(!this['canAddSkillCommand'](_0x17b1e8))return;const _0x12b37b=this[_0x41e174(0xab5)](),_0x13f8fb=DataManager[_0x41e174(0x38b)](_0x17b1e8),_0x3550a5=DataManager[_0x41e174(0x3ad)](_0x17b1e8),_0x5c9b4a=_0x12b37b===_0x41e174(0x47f)?_0x13f8fb:'\x5cI[%1]%2'[_0x41e174(0x177)](_0x3550a5,_0x13f8fb),_0x2319cf=this[_0x41e174(0x917)][_0x41e174(0x2b1)](_0x17b1e8);this[_0x41e174(0x652)](_0x5c9b4a,_0x41e174(0x5cf),_0x2319cf,_0x17b1e8['id']);},Window_ActorCommand['prototype'][_0x478a06(0x75c)]=function(_0x42c32b){const _0x322aae=_0x478a06,_0x15867b=_0x42c32b[_0x322aae(0x39c)];if(_0x15867b[_0x322aae(0x85a)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x322aae(0x917)][_0x322aae(0x98c)](_0x42c32b['id']))return![];}if(_0x15867b[_0x322aae(0x85a)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x322aae(0x917)][_0x322aae(0x7ac)](_0x42c32b['id']))return![];}const _0x4aa551=VisuMZ['BattleCore'][_0x322aae(0xb43)](_0x42c32b,'CommandVisible');if(VisuMZ['BattleCore']['JS'][_0x4aa551]){if(!VisuMZ[_0x322aae(0x1a5)]['JS'][_0x4aa551][_0x322aae(0x21e)](this,this[_0x322aae(0x917)],_0x42c32b))return![];}return VisuMZ[_0x322aae(0x1a5)]['CheckSkillCommandShowSwitches'](_0x42c32b);},VisuMZ[_0x478a06(0x1a5)]['CheckSkillCommandShowSwitches']=function(_0x2d338d){const _0x360077=_0x478a06,_0x5e2b05=_0x2d338d['note'];if(_0x5e2b05[_0x360077(0x85a)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x114c01=JSON[_0x360077(0x7bc)]('['+RegExp['$1'][_0x360077(0x85a)](/\d+/g)+']');for(const _0x87839e of _0x114c01){if(!$gameSwitches[_0x360077(0x66c)](_0x87839e))return![];}return!![];}if(_0x5e2b05[_0x360077(0x85a)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x57db4f=JSON[_0x360077(0x7bc)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x2f6492 of _0x57db4f){if(!$gameSwitches[_0x360077(0x66c)](_0x2f6492))return![];}return!![];}if(_0x5e2b05[_0x360077(0x85a)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x375a73=JSON['parse']('['+RegExp['$1'][_0x360077(0x85a)](/\d+/g)+']');for(const _0x150156 of _0x375a73){if($gameSwitches[_0x360077(0x66c)](_0x150156))return!![];}return![];}if(_0x5e2b05['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x44608f=JSON['parse']('['+RegExp['$1'][_0x360077(0x85a)](/\d+/g)+']');for(const _0x2a0744 of _0x44608f){if(!$gameSwitches[_0x360077(0x66c)](_0x2a0744))return!![];}return![];}if(_0x5e2b05[_0x360077(0x85a)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1c5d3c=JSON[_0x360077(0x7bc)]('['+RegExp['$1'][_0x360077(0x85a)](/\d+/g)+']');for(const _0x576f24 of _0x1c5d3c){if(!$gameSwitches[_0x360077(0x66c)](_0x576f24))return!![];}return![];}if(_0x5e2b05[_0x360077(0x85a)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0xe225b0=JSON[_0x360077(0x7bc)]('['+RegExp['$1'][_0x360077(0x85a)](/\d+/g)+']');for(const _0x2d670b of _0xe225b0){if($gameSwitches[_0x360077(0x66c)](_0x2d670b))return![];}return!![];}return!![];},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0xa11)]=function(){const _0x422d56=_0x478a06,_0x105e02=this[_0x422d56(0xab5)](),_0x290ee2=VisuMZ[_0x422d56(0x1a5)][_0x422d56(0x468)]['InBattleStatus']['CmdIconStatus']??0x57,_0x461b00=_0x105e02===_0x422d56(0x47f)?TextManager[_0x422d56(0x9a0)]:_0x422d56(0x5c2)['format'](_0x290ee2,TextManager['status']),_0x17fac3=!![];this[_0x422d56(0x652)](_0x461b00,'status',_0x17fac3);},Window_ActorCommand['prototype'][_0x478a06(0x7e1)]=function(){const _0x52f35e=_0x478a06,_0x4f8c4b=this[_0x52f35e(0xab5)](),_0xaf1b63=VisuMZ['BattleCore'][_0x52f35e(0x468)][_0x52f35e(0xae9)][_0x52f35e(0x9a9)],_0x573068=_0x4f8c4b===_0x52f35e(0x47f)?TextManager[_0x52f35e(0x9e8)]:_0x52f35e(0x5c2)['format'](_0xaf1b63,TextManager['escape']),_0x50a721=this[_0x52f35e(0xb8b)]();this[_0x52f35e(0x652)](_0x573068,_0x52f35e(0x9e8),_0x50a721);},Window_ActorCommand['prototype'][_0x478a06(0xb8b)]=function(){const _0xaeb6ea=_0x478a06;return BattleManager[_0xaeb6ea(0x748)]();},Window_ActorCommand['prototype'][_0x478a06(0x328)]=function(){const _0x4a17f9=_0x478a06,_0x1e3dc1=this[_0x4a17f9(0xab5)](),_0xd44bf8=VisuMZ['BattleCore'][_0x4a17f9(0x468)][_0x4a17f9(0xae9)][_0x4a17f9(0xa16)],_0x496dcd=_0x1e3dc1===_0x4a17f9(0x47f)?TextManager[_0x4a17f9(0x9d0)]:'\x5cI[%1]%2'[_0x4a17f9(0x177)](_0xd44bf8,TextManager[_0x4a17f9(0x9d0)]),_0x56d1fc=this[_0x4a17f9(0x8a6)]();this[_0x4a17f9(0x652)](_0x496dcd,_0x4a17f9(0x9d0),_0x56d1fc);},Window_ActorCommand['prototype'][_0x478a06(0x8a6)]=function(){return!![];},Window_ActorCommand[_0x478a06(0x9c5)]['itemTextAlign']=function(){const _0xf5e99d=_0x478a06;return VisuMZ[_0xf5e99d(0x1a5)][_0xf5e99d(0x468)]['ActorCmd'][_0xf5e99d(0xa1a)];},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x817)]=function(_0x4751fa){const _0x2b07a1=_0x478a06,_0x23be53=this['commandStyleCheck'](_0x4751fa);if(_0x23be53===_0x2b07a1(0x7ae))this[_0x2b07a1(0x971)](_0x4751fa);else _0x23be53===_0x2b07a1(0x308)?this[_0x2b07a1(0x2c8)](_0x4751fa):Window_Command[_0x2b07a1(0x9c5)][_0x2b07a1(0x817)][_0x2b07a1(0x21e)](this,_0x4751fa);this['drawSingleSkillCost'](_0x4751fa);},Window_ActorCommand[_0x478a06(0x9c5)]['commandStyle']=function(){const _0x828725=_0x478a06;return VisuMZ['BattleCore'][_0x828725(0x468)][_0x828725(0xa6d)]['CmdStyle'];},Window_ActorCommand[_0x478a06(0x9c5)]['commandStyleCheck']=function(_0x4aeefe){const _0x1371c5=_0x478a06;if(_0x4aeefe<0x0)return'text';const _0x21c43c=this[_0x1371c5(0xab5)]();if(_0x21c43c!==_0x1371c5(0xb81))return _0x21c43c;else{if(this[_0x1371c5(0x4e0)]()>0x0){const _0x3beef2=this['commandName'](_0x4aeefe);if(_0x3beef2[_0x1371c5(0x85a)](/\\I\[(\d+)\]/i)){const _0xb4f826=this['itemLineRect'](_0x4aeefe),_0x2fe166=this[_0x1371c5(0x799)](_0x3beef2)['width'];return _0x2fe166<=_0xb4f826[_0x1371c5(0xaad)]?'iconText':_0x1371c5(0x308);}}}return _0x1371c5(0x47f);},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x971)]=function(_0x299f2c){const _0x1452a6=_0x478a06,_0x21d89d=this[_0x1452a6(0x372)](_0x299f2c),_0x176251=this[_0x1452a6(0xaf1)](_0x299f2c),_0x1a2bf3=this[_0x1452a6(0x799)](_0x176251)[_0x1452a6(0xaad)];this[_0x1452a6(0x1a7)](this[_0x1452a6(0xde)](_0x299f2c));const _0x424f6c=this[_0x1452a6(0x51d)]();if(_0x424f6c===_0x1452a6(0x58d))this[_0x1452a6(0x31a)](_0x176251,_0x21d89d['x']+_0x21d89d[_0x1452a6(0xaad)]-_0x1a2bf3,_0x21d89d['y'],_0x1a2bf3);else{if(_0x424f6c===_0x1452a6(0x11d)){const _0x315f46=_0x21d89d['x']+Math[_0x1452a6(0xa76)]((_0x21d89d[_0x1452a6(0xaad)]-_0x1a2bf3)/0x2);this['drawTextEx'](_0x176251,_0x315f46,_0x21d89d['y'],_0x1a2bf3);}else this['drawTextEx'](_0x176251,_0x21d89d['x'],_0x21d89d['y'],_0x1a2bf3);}},Window_ActorCommand['prototype'][_0x478a06(0x2c8)]=function(_0x266238){const _0x3c93fc=_0x478a06;this['commandName'](_0x266238)[_0x3c93fc(0x85a)](/\\I\[(\d+)\]/i);const _0x2f0ab5=Number(RegExp['$1'])||0x0,_0x5d6adf=this[_0x3c93fc(0x372)](_0x266238),_0x2ee3a6=_0x5d6adf['x']+Math[_0x3c93fc(0xa76)]((_0x5d6adf[_0x3c93fc(0xaad)]-ImageManager['iconWidth'])/0x2),_0x2133b0=_0x5d6adf['y']+(_0x5d6adf[_0x3c93fc(0x15a)]-ImageManager['iconHeight'])/0x2;this[_0x3c93fc(0x5eb)](_0x2f0ab5,_0x2ee3a6,_0x2133b0);},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x18d)]=function(_0x4e8caa){const _0x38ba52=_0x478a06;if(!(VisuMZ[_0x38ba52(0x1a5)][_0x38ba52(0x468)][_0x38ba52(0xa6d)][_0x38ba52(0x7f1)]??!![]))return;const _0x2a1313=this[_0x38ba52(0x4b0)](_0x4e8caa);if(![_0x38ba52(0x1c5),_0x38ba52(0x7cc),_0x38ba52(0x5cf)]['includes'](_0x2a1313))return;const _0x4018d7=this[_0x38ba52(0x372)](_0x4e8caa);let _0x2b6ac4=null;if(_0x2a1313==='attack')_0x2b6ac4=$dataSkills[this[_0x38ba52(0x917)][_0x38ba52(0x1ba)]()];else _0x2a1313===_0x38ba52(0x7cc)?_0x2b6ac4=$dataSkills[this[_0x38ba52(0x917)]['guardSkillId']()]:_0x2b6ac4=$dataSkills[this[_0x38ba52(0x514)][_0x4e8caa][_0x38ba52(0x947)]];this['drawSkillCost'](this[_0x38ba52(0x917)],_0x2b6ac4,_0x4018d7['x'],_0x4018d7['y'],_0x4018d7['width']);},Window_ActorCommand[_0x478a06(0x9c5)]['drawSkillCost']=function(_0x450676,_0x185a94,_0x3e7b0a,_0x422dab,_0x2df2cc){const _0x56747d=_0x478a06;if(!_0x185a94)return;Imported[_0x56747d(0x7a6)]?Window_Command[_0x56747d(0x9c5)]['drawSkillCost']['call'](this,_0x450676,_0x185a94,_0x3e7b0a,_0x422dab,_0x2df2cc):Window_SkillList[_0x56747d(0x9c5)][_0x56747d(0x4c5)][_0x56747d(0x21e)](this,_0x185a94,_0x3e7b0a,_0x422dab,_0x2df2cc);},Window_ActorCommand['prototype']['hide']=function(){},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x901)]=function(){const _0x4a55ac=_0x478a06;Window_Command[_0x4a55ac(0x9c5)][_0x4a55ac(0x901)][_0x4a55ac(0x21e)](this);const _0x3cf65d=this[_0x4a55ac(0x716)]();_0x3cf65d===_0x4a55ac(0x444)&&this[_0x4a55ac(0x6c5)]();},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x716)]=function(){const _0x45748b=_0x478a06;if(this[_0x45748b(0x518)])return this[_0x45748b(0x518)];return this[_0x45748b(0x518)]=SceneManager[_0x45748b(0x143)][_0x45748b(0x716)](),this[_0x45748b(0x518)];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x1da)]=Window_ActorCommand['prototype'][_0x478a06(0x40f)],Window_ActorCommand[_0x478a06(0x9c5)]['setup']=function(_0x3cf581){const _0x404aa1=_0x478a06,_0x1f6fce=this[_0x404aa1(0x716)]();if(_0x3cf581&&['xp',_0x404aa1(0x596)][_0x404aa1(0x982)](_0x1f6fce))this[_0x404aa1(0x5c0)](_0x3cf581);else _0x3cf581&&[_0x404aa1(0x444)][_0x404aa1(0x982)](_0x1f6fce)&&(this[_0x404aa1(0x9fe)](_0x3cf581),this[_0x404aa1(0x6c5)]());VisuMZ[_0x404aa1(0x1a5)][_0x404aa1(0x1da)][_0x404aa1(0x21e)](this,_0x3cf581),_0x3cf581&&$gameTroop[_0x404aa1(0x7bb)]()[_0x404aa1(0x496)]>0x0&&_0x3cf581[_0x404aa1(0x244)]()&&_0x3cf581[_0x404aa1(0x244)]()[_0x404aa1(0x2d5)]();},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x5c0)]=function(_0x141fff){const _0x144688=_0x478a06,_0x430f0a=VisuMZ['BattleCore']['Settings'][_0x144688(0x64a)][_0x144688(0x47d)],_0xfd5751=Math[_0x144688(0x801)](Graphics[_0x144688(0xb0a)]/0x3),_0x5cf6a6=Math['round'](Graphics[_0x144688(0xb0a)]/$gameParty[_0x144688(0x6dd)]()[_0x144688(0x496)]),_0x481243=Math[_0x144688(0x896)](Math[_0x144688(0x7a1)](_0xfd5751,_0x5cf6a6),_0x430f0a),_0x560d15=this[_0x144688(0x90e)](VisuMZ['BattleCore'][_0x144688(0x468)]['BattleLayout']['XPActorCommandLines']),_0x296fee=Math[_0x144688(0xa76)]((Graphics[_0x144688(0xb0a)]-Graphics['width'])/0x2),_0x51a2c2=Graphics[_0x144688(0xb0a)]-_0x296fee,_0x6b5164=(Math['round'](_0x5cf6a6*_0x141fff[_0x144688(0x5c6)]())+Math[_0x144688(0x801)]((_0x5cf6a6-_0x481243)/0x2))[_0x144688(0x411)](_0x296fee,_0x51a2c2-_0x481243),_0x2d8c38=Math[_0x144688(0x801)](SceneManager[_0x144688(0x143)][_0x144688(0x967)]['y']-_0x560d15);this['move'](_0x6b5164,_0x2d8c38,_0x481243,_0x560d15),this[_0x144688(0xb69)](),this[_0x144688(0x92b)](0x1);},Window_ActorCommand[_0x478a06(0x9c5)]['resizeWindowBorderStyle']=function(_0x457993){const _0x575b5e=_0x478a06,_0x530fc3=SceneManager[_0x575b5e(0x143)][_0x575b5e(0xa42)]();this[_0x575b5e(0x4da)](_0x530fc3['x'],_0x530fc3['y'],_0x530fc3[_0x575b5e(0xaad)],_0x530fc3[_0x575b5e(0x15a)]),this[_0x575b5e(0xb69)](),this[_0x575b5e(0x92b)](0x0);},Window_ActorCommand[_0x478a06(0x9c5)]['refreshDimmerBitmap']=function(){const _0x323ef0=_0x478a06;if(this[_0x323ef0(0xba9)]){const _0x3ec47b=this[_0x323ef0(0xba9)][_0x323ef0(0x410)],_0x18963b=this['width']-0x8,_0x7d2290=this[_0x323ef0(0x15a)],_0x193ecb=this[_0x323ef0(0x12f)],_0x1f3237=ColorManager[_0x323ef0(0x7ba)](),_0x21b701=ColorManager[_0x323ef0(0xb9a)]();this['_dimmerSprite']['x']=0x4,_0x3ec47b[_0x323ef0(0x698)](_0x18963b,_0x7d2290),_0x3ec47b['gradientFillRect'](0x0,0x0,_0x18963b,_0x193ecb,_0x21b701,_0x1f3237,!![]),_0x3ec47b[_0x323ef0(0x226)](0x0,_0x193ecb,_0x18963b,_0x7d2290-_0x193ecb*0x2,_0x1f3237),_0x3ec47b[_0x323ef0(0x323)](0x0,_0x7d2290-_0x193ecb,_0x18963b,_0x193ecb,_0x1f3237,_0x21b701,!![]),this[_0x323ef0(0xba9)][_0x323ef0(0xb06)](0x0,0x0,_0x18963b,_0x7d2290);}},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0xb93)]=function(){const _0x695ba2=_0x478a06;if(!this[_0x695ba2(0x917)])return;const _0x13907a=VisuMZ[_0x695ba2(0x1a5)][_0x695ba2(0x468)][_0x695ba2(0xa6d)],_0x3820de=this['currentSymbol']();switch(_0x3820de){case'attack':this['setHelpWindowItem']($dataSkills[this[_0x695ba2(0x917)][_0x695ba2(0x1ba)]()]);break;case'guard':this['setHelpWindowItem']($dataSkills[this[_0x695ba2(0x917)][_0x695ba2(0x2c3)]()]);break;case _0x695ba2(0x1f6):const _0x4e7394=_0x13907a['HelpSkillType'],_0x211d8c=_0x4e7394[_0x695ba2(0x177)]($dataSystem['skillTypes'][this[_0x695ba2(0x5f2)]()]);this['_helpWindow']['setText'](_0x211d8c);break;case _0x695ba2(0x5cf):this[_0x695ba2(0x267)]($dataSkills[this['currentExt']()]);break;case'item':this[_0x695ba2(0x91f)][_0x695ba2(0x4f7)](_0x13907a['HelpItem']);break;case'escape':this[_0x695ba2(0x91f)][_0x695ba2(0x4f7)](_0x13907a['HelpEscape']);break;case _0x695ba2(0x9d0):this[_0x695ba2(0x91f)][_0x695ba2(0x4f7)](_0x13907a[_0x695ba2(0xb4d)]);break;case _0x695ba2(0x9a0):this['_helpWindow']['setText'](Window_InBattleStatus[_0x695ba2(0xb9d)][_0x695ba2(0x873)]);break;default:this[_0x695ba2(0x91f)]['setText']('');break;}},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x92f)]=function(){const _0x3c3d23=_0x478a06;this[_0x3c3d23(0x97f)](0x0);if(this['_actor']&&ConfigManager[_0x3c3d23(0x353)]){const _0x1da4e8=this[_0x3c3d23(0x917)][_0x3c3d23(0xaac)]();this[_0x3c3d23(0x34d)](_0x1da4e8);if(_0x1da4e8===_0x3c3d23(0x1f6)){const _0x3ccd98=this[_0x3c3d23(0x917)][_0x3c3d23(0x729)]();if(_0x3ccd98){const _0x4655ba=this[_0x3c3d23(0x4e7)](_0x3c3d23(0x1f6),_0x3ccd98['stypeId']);this[_0x3c3d23(0x10a)](_0x4655ba||0x0);}}else{if(_0x1da4e8===_0x3c3d23(0x5cf)){const _0x1e4887=this[_0x3c3d23(0x917)][_0x3c3d23(0x729)]();if(_0x1e4887){const _0x203942=this['findSymbolExt'](_0x3c3d23(0x5cf),_0x1e4887['id']);this['select'](_0x203942||0x0);}}}}},Window_ActorCommand[_0x478a06(0x9c5)][_0x478a06(0x4e7)]=function(_0x3b1953,_0xc0515){const _0x32085c=_0x478a06;return this[_0x32085c(0x514)][_0x32085c(0xa9d)](_0x1a5723=>_0x1a5723[_0x32085c(0x636)]===_0x3b1953&&_0x1a5723[_0x32085c(0x947)]===_0xc0515);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xb1c)]=Window_BattleStatus['prototype']['initialize'],Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x552)]=function(_0xe1a43b){const _0x5f0214=_0x478a06;VisuMZ['BattleCore']['Window_BattleStatus_initialize'][_0x5f0214(0x21e)](this,_0xe1a43b),this[_0x5f0214(0x1d7)](),this[_0x5f0214(0xa32)]();},Window_BattleStatus['prototype'][_0x478a06(0x716)]=function(){const _0x1840f5=_0x478a06;if(this[_0x1840f5(0x518)])return this[_0x1840f5(0x518)];return this[_0x1840f5(0x518)]=SceneManager[_0x1840f5(0x143)][_0x1840f5(0x716)](),this[_0x1840f5(0x518)];},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x1d7)]=function(){const _0x3a7cd0=_0x478a06;this[_0x3a7cd0(0x217)]=this[_0x3a7cd0(0x968)]();const _0x5c37e7=VisuMZ[_0x3a7cd0(0x1a5)][_0x3a7cd0(0x468)][_0x3a7cd0(0x64a)];_0x5c37e7[_0x3a7cd0(0x174)]&&(this[_0x3a7cd0(0x6d0)]=0x0);},Window_BattleStatus[_0x478a06(0x9c5)]['isFrameVisible']=function(){const _0x24dc40=_0x478a06,_0xe8a365=VisuMZ[_0x24dc40(0x1a5)]['Settings']['BattleLayout'];if(_0xe8a365[_0x24dc40(0x72e)])return!![];const _0x1c8afd=this[_0x24dc40(0x716)]();switch(_0x1c8afd){case'list':case'border':return!![];break;case'default':case'xp':case _0x24dc40(0x596):default:return![];break;}},Window_BattleStatus['prototype'][_0x478a06(0x352)]=function(){return this['isFrameVisible']()?0x0:0xa;},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x951)]=function(){const _0x39fa44=_0x478a06,_0x58804f=this[_0x39fa44(0x716)]();switch(_0x58804f){case _0x39fa44(0x841):return 0x1;break;case'xp':case _0x39fa44(0x596):return $gameParty[_0x39fa44(0x6dd)]()[_0x39fa44(0x496)];break;case'default':default:return $gameParty['maxBattleMembers']();break;}},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0xbe3)]=function(){const _0x5964ba=_0x478a06,_0x3489d1=this['battleLayoutStyle']();switch(_0x3489d1){case _0x5964ba(0x841):return Window_StatusBase[_0x5964ba(0x9c5)][_0x5964ba(0xbe3)][_0x5964ba(0x21e)](this);break;case _0x5964ba(0x8e6):case'xp':case _0x5964ba(0x596):default:return this[_0x5964ba(0x983)];break;}},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x418)]=function(){const _0x5c533e=_0x478a06,_0x403a78=this[_0x5c533e(0x716)]();switch(_0x403a78){case _0x5c533e(0x841):return Window_StatusBase[_0x5c533e(0x9c5)]['rowSpacing'][_0x5c533e(0x21e)](this);break;case _0x5c533e(0x8e6):case'xp':case'portrait':default:return 0x0;break;}},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x32f)]=function(){const _0x4cdd85=_0x478a06;this['isFrameVisible']()?Window_StatusBase[_0x4cdd85(0x9c5)][_0x4cdd85(0x32f)][_0x4cdd85(0x21e)](this):this[_0x4cdd85(0x12f)]=0x8;},Window_BattleStatus['prototype'][_0x478a06(0x88e)]=function(){const _0x1bf71d=_0x478a06,_0x29f507=VisuMZ['BattleCore'][_0x1bf71d(0x468)][_0x1bf71d(0x64a)];_0x29f507[_0x1bf71d(0x72e)]?this[_0x1bf71d(0x2ed)]=ImageManager[_0x1bf71d(0x8e8)](_0x29f507[_0x1bf71d(0x72e)]):Window_StatusBase['prototype'][_0x1bf71d(0x88e)][_0x1bf71d(0x21e)](this);},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0xa2a)]=function(_0x16e55f){const _0x7f0ba5=_0x478a06,_0x369295=VisuMZ[_0x7f0ba5(0x1a5)][_0x7f0ba5(0x468)]['BattleLayout'];if(_0x369295[_0x7f0ba5(0x458)])return;Window_StatusBase[_0x7f0ba5(0x9c5)][_0x7f0ba5(0xa2a)][_0x7f0ba5(0x21e)](this,_0x16e55f);},Window_BattleStatus['prototype'][_0x478a06(0x1aa)]=function(){const _0x435e53=_0x478a06;this[_0x435e53(0xbe0)]=!![];},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x865)]=function(){const _0x80688e=_0x478a06;Window_StatusBase[_0x80688e(0x9c5)][_0x80688e(0x865)][_0x80688e(0x21e)](this),this[_0x80688e(0x5c4)](),this[_0x80688e(0x872)]();if(this[_0x80688e(0x716)]()===_0x80688e(0x444))this[_0x80688e(0x4a6)]();},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x5c4)]=function(){const _0x2e8cc9=_0x478a06;if($gameTemp[_0x2e8cc9(0x89d)]())this[_0x2e8cc9(0xb07)](),this[_0x2e8cc9(0xbe0)]=![],$gameTemp[_0x2e8cc9(0x2dc)]();else this[_0x2e8cc9(0xbe0)]&&(this[_0x2e8cc9(0xbe0)]=![],this['refresh'](),this[_0x2e8cc9(0x9e3)]());},Window_BattleStatus['prototype'][_0x478a06(0x769)]=function(){const _0x5569e1=_0x478a06;Window_StatusBase[_0x5569e1(0x9c5)][_0x5569e1(0x769)][_0x5569e1(0x21e)](this);if(!$gameSystem['isSideView']())this[_0x5569e1(0x85c)]();},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x4be)]=function(){const _0x4644bb=_0x478a06;if(this['constructor']===Window_BattleStatus)return;Window_StatusBase[_0x4644bb(0x9c5)]['hide'][_0x4644bb(0x21e)](this);},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0xa8a)]=function(_0x47a466){const _0x4e0e50=_0x478a06,_0x489dbb=this['battleLayoutStyle']();switch(_0x489dbb){case'xp':case _0x4e0e50(0x596):break;case _0x4e0e50(0x8e6):case _0x4e0e50(0x841):case _0x4e0e50(0x444):default:return Window_StatusBase[_0x4e0e50(0x9c5)][_0x4e0e50(0xa8a)][_0x4e0e50(0x21e)](this,_0x47a466);break;}},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x27e)]=Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x2ca)],Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x2ca)]=function(_0x1dc1c1){const _0x16ad9d=_0x478a06,_0x9d6b04=this[_0x16ad9d(0x716)]();switch(_0x9d6b04){case _0x16ad9d(0x841):this[_0x16ad9d(0x212)](_0x1dc1c1);break;case'xp':this[_0x16ad9d(0xbc7)](_0x1dc1c1);break;case _0x16ad9d(0x596):this[_0x16ad9d(0x98b)](_0x1dc1c1);break;case _0x16ad9d(0x8e6):case _0x16ad9d(0x444):default:VisuMZ['BattleCore'][_0x16ad9d(0x27e)][_0x16ad9d(0x21e)](this,_0x1dc1c1);break;}},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0xb1f)]=function(_0x11100a){const _0x47fd81=_0x478a06,_0x1bc7cf=this[_0x47fd81(0x716)]();if(!$gameSystem['isSideView']())this['centerFrontViewSprite'](_0x11100a);switch(_0x1bc7cf){case _0x47fd81(0x841):this[_0x47fd81(0xa7e)](_0x11100a);break;case'xp':case'portrait':case _0x47fd81(0x8e6):case _0x47fd81(0x444):default:this[_0x47fd81(0x614)](_0x11100a);break;}},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x248)]=function(){const _0x3b6588=_0x478a06,_0x204767=this[_0x3b6588(0x716)]();if(['xp'][_0x3b6588(0x982)](_0x204767)&&!$gameSystem[_0x3b6588(0x787)]()){this[_0x3b6588(0x690)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x3b6588(0x9c5)][_0x3b6588(0x248)][_0x3b6588(0x21e)](this);},Window_BattleStatus['prototype'][_0x478a06(0x5d2)]=function(_0x30ee1b){const _0x588043=_0x478a06,_0x349627=this['actor'](_0x30ee1b)[_0x588043(0x244)]();if(!_0x349627)return;const _0x5ee138=this[_0x588043(0x716)](),_0xc6b1a7=this[_0x588043(0xb7b)](_0x30ee1b);let _0xa1c1d=Math[_0x588043(0x801)](_0xc6b1a7['x']+_0xc6b1a7[_0x588043(0xaad)]/0x2)+this[_0x588043(0x12f)];['list'][_0x588043(0x982)](_0x5ee138)&&(_0xa1c1d=_0xc6b1a7[_0x588043(0xaad)]/$gameParty[_0x588043(0x6dd)]()[_0x588043(0x496)],_0xa1c1d*=_0x30ee1b,_0xa1c1d+=_0xc6b1a7[_0x588043(0xaad)]/$gameParty[_0x588043(0x6dd)]()[_0x588043(0x496)]/0x2);let _0x28e196=Math[_0x588043(0x801)](this['frontviewSpriteY'](_0x30ee1b,_0x349627,_0xc6b1a7));_0x349627[_0x588043(0x54a)](_0xa1c1d,_0x28e196),this['addChildAt'](_0x349627,0x1),_0x349627['show'](),this[_0x588043(0x547)](),this[_0x588043(0x9e3)]();},Window_BattleStatus['prototype'][_0x478a06(0xe7)]=function(_0x3d52b9,_0x22c1ca,_0x56445e){const _0x26653f=_0x478a06,_0x47f383=VisuMZ[_0x26653f(0x1a5)][_0x26653f(0x468)][_0x26653f(0x64a)],_0x21463c=this[_0x26653f(0x716)]();if(_0x21463c==='xp'){const _0x2035d4=_0x47f383[_0x26653f(0x22e)];switch(_0x2035d4['toLowerCase']()[_0x26653f(0xb7d)]()){case _0x26653f(0x104):return _0x56445e['height']-_0x22c1ca[_0x26653f(0x7f8)][_0x26653f(0x15a)]/0x4;break;case'center':const _0x49fe34=_0x47f383[_0x26653f(0x3cc)];return(_0x56445e[_0x26653f(0x15a)]+(_0x22c1ca[_0x26653f(0x15a)]||_0x49fe34))/0x2;break;case _0x26653f(0x706):return 0x0;case'name':default:return this[_0x26653f(0xa4b)](_0x56445e);break;}}else{if(_0x21463c===_0x26653f(0x596)){}}return _0x22c1ca[_0x26653f(0x15a)];},Sprite_Name[_0x478a06(0x9c5)][_0x478a06(0x2cf)]=function(){return 0x24;},Sprite_Name[_0x478a06(0x9c5)][_0x478a06(0x30b)]=function(){const _0x594732=_0x478a06,_0x341e38=this[_0x594732(0x8ff)](),_0x4378d9=this[_0x594732(0x361)](),_0x2e7b6a=this['bitmapHeight']();this[_0x594732(0x3dc)](),this[_0x594732(0x410)][_0x594732(0x87d)](),this[_0x594732(0x410)][_0x594732(0x4bc)](_0x341e38,0x4,0x0,_0x4378d9,_0x2e7b6a,'left');},Bitmap['prototype'][_0x478a06(0x4bc)]=function(_0x6884d8,_0xb3e3f1,_0x42ef03,_0x21726e,_0x50c6dc,_0x160b41){const _0x4c7d98=_0x478a06;TextManager[_0x4c7d98(0x5ac)]&&(_0x6884d8=TextManager['parseLocalizedText'](_0x6884d8));const _0x313eb2=this['context'],_0x5cbae9=_0x313eb2[_0x4c7d98(0x371)];_0x21726e=_0x21726e||0xffffffff;let _0x504522=_0xb3e3f1,_0x54d8be=Math[_0x4c7d98(0x801)](_0x42ef03+0x18/0x2+this['fontSize']*0.35);_0x160b41===_0x4c7d98(0x11d)&&(_0x504522+=_0x21726e/0x2),_0x160b41===_0x4c7d98(0x58d)&&(_0x504522+=_0x21726e),_0x313eb2[_0x4c7d98(0x363)](),_0x313eb2['font']=this[_0x4c7d98(0x319)](),_0x313eb2[_0x4c7d98(0xada)]=_0x160b41,_0x313eb2[_0x4c7d98(0xbcd)]='alphabetic',_0x313eb2[_0x4c7d98(0x371)]=0x1,this['_drawTextOutline'](_0x6884d8,_0x504522,_0x54d8be,_0x21726e),_0x313eb2[_0x4c7d98(0x371)]=_0x5cbae9,this[_0x4c7d98(0x25a)](_0x6884d8,_0x504522,_0x54d8be,_0x21726e),_0x313eb2[_0x4c7d98(0x1fa)](),this['_baseTexture'][_0x4c7d98(0x865)]();},Window_BattleStatus[_0x478a06(0x9c5)]['nameY']=function(_0x53abe0){const _0x136dbb=_0x478a06;return this[_0x136dbb(0xbd8)](_0x53abe0)-this[_0x136dbb(0x1ee)]();},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x212)]=function(_0x3c473b){const _0x5885bc=_0x478a06;if(!VisuMZ[_0x5885bc(0x1a5)][_0x5885bc(0x468)][_0x5885bc(0x64a)][_0x5885bc(0x4d7)])return;const _0x391307=this[_0x5885bc(0x421)](_0x3c473b),_0x2ba455=this[_0x5885bc(0xb7b)](_0x3c473b);_0x2ba455[_0x5885bc(0xaad)]=ImageManager[_0x5885bc(0x22a)],_0x2ba455['height']-=0x2,this[_0x5885bc(0x485)](_0x391307,_0x2ba455['x']+0x1,_0x2ba455['y']+0x1,_0x2ba455[_0x5885bc(0xaad)],_0x2ba455[_0x5885bc(0x15a)]);},Window_BattleStatus['prototype'][_0x478a06(0xa7e)]=function(_0x156392){const _0x127153=_0x478a06,_0x4a7b82=VisuMZ[_0x127153(0x1a5)][_0x127153(0x468)][_0x127153(0x64a)],_0x3f267b=$dataSystem[_0x127153(0x597)]?0x4:0x3,_0xf017fa=_0x3f267b*0x80+(_0x3f267b-0x1)*0x8+0x4,_0x190faf=this['actor'](_0x156392),_0x1e760b=this[_0x127153(0xb7b)](_0x156392);let _0x55d774=_0x1e760b['x']+this[_0x127153(0x12f)];_0x4a7b82[_0x127153(0x4d7)]?_0x55d774=_0x1e760b['x']+ImageManager['faceWidth']+0x8:_0x55d774+=ImageManager['iconWidth'];const _0x12df78=Math[_0x127153(0x801)](Math['min'](_0x1e760b['x']+_0x1e760b['width']-_0xf017fa,_0x55d774)),_0x174145=Math[_0x127153(0x801)](_0x1e760b['y']+(_0x1e760b['height']-Sprite_Name[_0x127153(0x9c5)][_0x127153(0x2cf)]())/0x2),_0x1f4768=Math[_0x127153(0x801)](_0x12df78-ImageManager[_0x127153(0x33e)]/0x2-0x4),_0x7cf488=Math[_0x127153(0x801)](_0x1e760b['y']+(_0x1e760b['height']-ImageManager['iconHeight'])/0x2+ImageManager[_0x127153(0x61f)]/0x2);let _0x46689f=_0x12df78+0x88;const _0x249b4b=_0x174145;this[_0x127153(0x701)](_0x190faf,_0x12df78-0x4+(_0x4a7b82[_0x127153(0x9fb)]||0x0),_0x174145+(_0x4a7b82[_0x127153(0xbee)]||0x0)),this[_0x127153(0x45f)](_0x190faf,_0x12df78+(_0x4a7b82[_0x127153(0x726)]||0x0),_0x174145+(_0x4a7b82[_0x127153(0x717)]||0x0)),this[_0x127153(0x2c2)](_0x190faf,_0x1f4768+(_0x4a7b82[_0x127153(0x7e5)]||0x0),_0x7cf488+(_0x4a7b82[_0x127153(0x88f)]||0x0)),this[_0x127153(0x231)](_0x190faf,'hp',_0x46689f+0x88*0x0+(_0x4a7b82[_0x127153(0x2db)]||0x0),_0x249b4b+(_0x4a7b82['HpGaugeOffsetY']||0x0)),this['placeGauge'](_0x190faf,'mp',_0x46689f+0x88*0x1+(_0x4a7b82[_0x127153(0x608)]||0x0),_0x249b4b+(_0x4a7b82[_0x127153(0x476)]||0x0)),$dataSystem[_0x127153(0x597)]&&this[_0x127153(0x231)](_0x190faf,'tp',_0x46689f+0x88*0x2+(_0x4a7b82[_0x127153(0x5e8)]||0x0),_0x249b4b+(_0x4a7b82['TpGaugeOffsetY']||0x0));},Window_BattleStatus['prototype'][_0x478a06(0xbc7)]=function(_0x590026){const _0x1e43fe=_0x478a06;if(!$gameSystem[_0x1e43fe(0x787)]())return;VisuMZ[_0x1e43fe(0x1a5)][_0x1e43fe(0x27e)][_0x1e43fe(0x21e)](this,_0x590026);},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x614)]=function(_0x4e307d){const _0x590742=_0x478a06,_0x3caf5e=VisuMZ[_0x590742(0x1a5)]['Settings'][_0x590742(0x64a)],_0x4b2981=this[_0x590742(0x421)](_0x4e307d),_0x3d168e=this[_0x590742(0xb7b)](_0x4e307d),_0x16554f=Math[_0x590742(0x801)](_0x3d168e['x']+(_0x3d168e[_0x590742(0xaad)]-0x80)/0x2),_0x404728=this[_0x590742(0xa4b)](_0x3d168e);let _0x10dfa7=_0x16554f-ImageManager[_0x590742(0x33e)]/0x2-0x4,_0x3c63fe=_0x404728+ImageManager[_0x590742(0x61f)]/0x2;_0x10dfa7-ImageManager[_0x590742(0x33e)]/0x2<_0x3d168e['x']&&(_0x10dfa7=_0x16554f+ImageManager[_0x590742(0x33e)]/0x2-0x4,_0x3c63fe=_0x404728-ImageManager[_0x590742(0x61f)]/0x2);const _0x5a5361=_0x16554f,_0x349bd5=this[_0x590742(0xbd8)](_0x3d168e);this['placeTimeGauge'](_0x4b2981,_0x16554f+(_0x3caf5e[_0x590742(0x9fb)]||0x0),_0x404728+(_0x3caf5e['TpbGaugeOffsetY']||0x0)),this[_0x590742(0x45f)](_0x4b2981,_0x16554f+(_0x3caf5e[_0x590742(0x726)]||0x0),_0x404728+(_0x3caf5e[_0x590742(0x717)]||0x0)),this[_0x590742(0x2c2)](_0x4b2981,_0x10dfa7+(_0x3caf5e['StateIconOffsetX']||0x0),_0x3c63fe+(_0x3caf5e['StateIconOffsetY']||0x0)),this[_0x590742(0x231)](_0x4b2981,'hp',_0x5a5361+(_0x3caf5e[_0x590742(0x2db)]||0x0),_0x349bd5+(_0x3caf5e[_0x590742(0xa96)]||0x0)),this[_0x590742(0x231)](_0x4b2981,'mp',_0x5a5361+(_0x3caf5e[_0x590742(0x608)]||0x0),_0x349bd5+this[_0x590742(0x1ee)]()+(_0x3caf5e[_0x590742(0x476)]||0x0)),$dataSystem[_0x590742(0x597)]&&this[_0x590742(0x231)](_0x4b2981,'tp',_0x5a5361+(_0x3caf5e['TpGaugeOffsetX']||0x0),_0x349bd5+this['gaugeLineHeight']()*0x2+(_0x3caf5e['TpGaugeOffsetY']||0x0));},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0xd2)]=function(_0x5f47b9){const _0x51833b=_0x478a06;if(!VisuMZ['BattleCore'][_0x51833b(0x468)][_0x51833b(0x64a)][_0x51833b(0x373)])return![];if(_0x5f47b9['getBattlePortrait']())return!![];return Imported['VisuMZ_1_MainMenuCore']&&_0x5f47b9[_0x51833b(0x254)]();},Game_Actor[_0x478a06(0x9c5)][_0x478a06(0xeb)]=function(){const _0x2ae918=_0x478a06;if(this[_0x2ae918(0x421)]()[_0x2ae918(0x39c)][_0x2ae918(0x85a)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x2ae918(0x39c)][_0x2ae918(0x85a)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x478a06(0x9c5)]['getBattlePortraitOffsetY']=function(){const _0x62fd88=_0x478a06;if(this['actor']()[_0x62fd88(0x39c)][_0x62fd88(0x85a)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x62fd88(0x421)]()[_0x62fd88(0x39c)][_0x62fd88(0x85a)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x98b)]=function(_0x4266bf){const _0x351e17=_0x478a06,_0x24c504=this[_0x351e17(0x421)](_0x4266bf);if(this[_0x351e17(0xd2)](_0x24c504)){const _0x68a24b=_0x351e17(0x8f6)[_0x351e17(0x177)](_0x24c504[_0x351e17(0x4aa)]()),_0x525589=this[_0x351e17(0x9c1)](_0x68a24b,Sprite),_0x509735=_0x24c504['getBattlePortraitFilename']();_0x509735!==''?_0x525589[_0x351e17(0x410)]=ImageManager[_0x351e17(0xbc4)](_0x509735):_0x525589[_0x351e17(0x410)]=ImageManager['_emptyBitmap'];const _0x2a06a1=this['itemRect'](_0x4266bf);_0x525589[_0x351e17(0x488)]['x']=0.5,_0x525589[_0x351e17(0x488)]['y']=0x1;let _0x55b6f6=Math['round'](_0x2a06a1['x']+_0x2a06a1['width']/0x2)+this[_0x351e17(0x12f)];_0x55b6f6+=_0x24c504[_0x351e17(0xeb)]();let _0x49ba9c=Math[_0x351e17(0x801)](this['height']);_0x49ba9c+=_0x24c504[_0x351e17(0x878)](),_0x525589['move'](_0x55b6f6,_0x49ba9c);const _0x3b7d8f=VisuMZ[_0x351e17(0x1a5)][_0x351e17(0x468)][_0x351e17(0x64a)][_0x351e17(0xb31)];_0x525589['scale']['x']=_0x3b7d8f,_0x525589[_0x351e17(0x853)]['y']=_0x3b7d8f,_0x525589[_0x351e17(0x769)]();}else{const _0x544bb2=this[_0x351e17(0x193)](_0x4266bf);this[_0x351e17(0x485)](_0x24c504,_0x544bb2['x'],_0x544bb2['y'],_0x544bb2['width'],_0x544bb2[_0x351e17(0x15a)]);}},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x9c1)]=function(_0x4a3f01,_0x48ee3c){const _0x1aee16=_0x478a06,_0x36c246=this[_0x1aee16(0x334)];if(_0x36c246[_0x4a3f01])return _0x36c246[_0x4a3f01];else{const _0x56b846=new _0x48ee3c();return _0x36c246[_0x4a3f01]=_0x56b846,this['addChildToBack'](_0x56b846),this[_0x1aee16(0x437)](this[_0x1aee16(0x347)]),_0x56b846;}},Window_BattleStatus[_0x478a06(0x9c5)]['_createClientArea']=function(){const _0x582a10=_0x478a06;this['_createCursorArea'](),this[_0x582a10(0x78b)](),Window_StatusBase[_0x582a10(0x9c5)][_0x582a10(0x6e7)][_0x582a10(0x21e)](this),this['_createDamageContainer']();},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x6f9)]=function(){const _0x1f69a9=_0x478a06;this[_0x1f69a9(0x347)]=new Sprite(),this[_0x1f69a9(0x347)]['filters']=[new PIXI['filters'][(_0x1f69a9(0xab3))]()],this[_0x1f69a9(0x347)][_0x1f69a9(0x722)]=new Rectangle(),this['_cursorArea'][_0x1f69a9(0x4da)](this[_0x1f69a9(0x4de)],this['_padding']),this[_0x1f69a9(0xb9b)](this[_0x1f69a9(0x347)]);},Window_BattleStatus['prototype'][_0x478a06(0x78b)]=function(){const _0x54eaba=_0x478a06;this[_0x54eaba(0x82f)]=new Sprite(),this[_0x54eaba(0xb9b)](this[_0x54eaba(0x82f)]);},Window_BattleStatus['prototype'][_0x478a06(0x547)]=function(){const _0x2c5562=_0x478a06;this[_0x2c5562(0x82f)]&&this[_0x2c5562(0xb9b)](this['_effectsContainer']);},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x664)]=function(){const _0x460ce1=_0x478a06;this[_0x460ce1(0x258)]=new Sprite(),this[_0x460ce1(0xb9b)](this['_damageContainer']);},Window_BattleStatus['prototype']['_createCursorSprite']=function(){const _0x556b01=_0x478a06;this[_0x556b01(0x802)]=new Sprite();for(let _0x42bb8e=0x0;_0x42bb8e<0x9;_0x42bb8e++){this[_0x556b01(0x802)][_0x556b01(0xb9b)](new Sprite());}this[_0x556b01(0x347)][_0x556b01(0xb9b)](this['_cursorSprite']);},Window_BattleStatus['prototype'][_0x478a06(0x831)]=function(){const _0x471855=_0x478a06;Window_StatusBase['prototype'][_0x471855(0x831)][_0x471855(0x21e)](this),this[_0x471855(0x73d)]();},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x73d)]=function(){const _0x2f7b91=_0x478a06,_0x34be25=this['_padding'];this[_0x2f7b91(0x347)]['move'](_0x34be25,_0x34be25),this[_0x2f7b91(0x347)]['x']=_0x34be25-this[_0x2f7b91(0x912)]['x'],this['_cursorArea']['y']=_0x34be25-this[_0x2f7b91(0x912)]['y'],this[_0x2f7b91(0x25f)]>0x0&&this['innerHeight']>0x0?this[_0x2f7b91(0x347)][_0x2f7b91(0xbbc)]=this[_0x2f7b91(0xf5)]():this['_cursorArea'][_0x2f7b91(0xbbc)]=![];},Window_BattleStatus['prototype'][_0x478a06(0xfa)]=function(){const _0x79aae=_0x478a06;Window_StatusBase[_0x79aae(0x9c5)]['_updateFilterArea'][_0x79aae(0x21e)](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x478a06(0x9c5)]['_updateCursorFilterArea']=function(){const _0xb9a95b=_0x478a06,_0xdf6f39=this[_0xb9a95b(0x347)][_0xb9a95b(0x9b1)][_0xb9a95b(0x3c7)](new Point(0x0,0x0)),_0x2afbc7=this[_0xb9a95b(0x347)][_0xb9a95b(0x722)];_0x2afbc7['x']=_0xdf6f39['x']+this[_0xb9a95b(0x912)]['x'],_0x2afbc7['y']=_0xdf6f39['y']+this['origin']['y'],_0x2afbc7[_0xb9a95b(0xaad)]=this['innerWidth'],_0x2afbc7[_0xb9a95b(0x15a)]=this['innerHeight'];},Window_BattleStatus[_0x478a06(0x9c5)]['refreshActorPortrait']=function(_0x46146b){const _0x17ba84=_0x478a06;if(this['battleLayoutStyle']()!=='portrait')return;this[_0x17ba84(0x98b)](_0x46146b['index']());},Window_BattleStatus['prototype'][_0x478a06(0x3d6)]=function(_0x3e01e2,_0x4637ee){const _0x58fc88=_0x478a06;if(!this[_0x58fc88(0x258)])return;if(!_0x3e01e2)return;if(!_0x4637ee)return;const _0xd45d1e=this['itemRect'](_0x4637ee[_0x58fc88(0x5c6)]());_0xd45d1e['x']+=_0xd45d1e[_0x58fc88(0xaad)]/0x2+this[_0x58fc88(0x12f)],_0x3e01e2['x']=_0xd45d1e['x'],_0x3e01e2['y']=_0xd45d1e['y'],this[_0x58fc88(0x258)][_0x58fc88(0xb9b)](_0x3e01e2);},Window_BattleStatus[_0x478a06(0x9c5)]['removeDamageSprite']=function(_0x5f5697){const _0x4a2dc7=_0x478a06;if(!this['_damageContainer'])return;if(!_0x5f5697)return;this[_0x4a2dc7(0x258)][_0x4a2dc7(0x459)](_0x5f5697);},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x4a6)]=function(){const _0x5dc417=_0x478a06;if(!this[_0x5dc417(0xa14)]())return;if(!this[_0x5dc417(0x797)])this['createBorderStylePortraitSprite']();this['prepareBorderActor'](),this[_0x5dc417(0x1b6)]();},Window_BattleStatus[_0x478a06(0x9c5)]['isBorderStylePortraitShown']=function(){const _0x373fe2=_0x478a06;if(this[_0x373fe2(0x930)]!==Window_BattleStatus)return![];if(!SceneManager['isSceneBattle']())return![];return VisuMZ['BattleCore'][_0x373fe2(0x468)]['BattleLayout'][_0x373fe2(0x75a)];},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x46c)]=function(){const _0x2ef105=_0x478a06;this['_borderPortraitSprite']=new Sprite();const _0x3806cd=SceneManager['_scene'],_0x33c6b0=_0x3806cd[_0x2ef105(0x671)][_0x2ef105(0x960)](_0x3806cd[_0x2ef105(0x287)]);_0x3806cd[_0x2ef105(0xb8c)](this[_0x2ef105(0x797)],_0x33c6b0),this[_0x2ef105(0x797)][_0x2ef105(0x488)]['x']=0.5,this['_borderPortraitSprite'][_0x2ef105(0x488)]['y']=0x1;const _0x31acf1=VisuMZ['BattleCore'][_0x2ef105(0x468)][_0x2ef105(0x64a)][_0x2ef105(0x49e)];this[_0x2ef105(0x797)][_0x2ef105(0x853)]['x']=_0x31acf1,this[_0x2ef105(0x797)][_0x2ef105(0x853)]['y']=_0x31acf1,this[_0x2ef105(0x797)]['y']=this['y']+this[_0x2ef105(0x15a)],this[_0x2ef105(0x8f0)]=0x0;},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x3b9)]=function(){const _0x3f675b=_0x478a06;return BattleManager[_0x3f675b(0x8bc)]();},Window_BattleStatus[_0x478a06(0x9c5)]['prepareBorderActor']=function(){const _0x34db07=_0x478a06;this[_0x34db07(0x797)][_0x34db07(0xbbc)]=this[_0x34db07(0x3b9)]();const _0x1b8c8b=BattleManager[_0x34db07(0x421)](),_0x2b00ac=_0x1b8c8b?_0x1b8c8b['getBattlePortraitFilename']()||'':'';if(_0x1b8c8b===this[_0x34db07(0x797)][_0x34db07(0x421)]&&_0x2b00ac===this[_0x34db07(0x797)][_0x34db07(0x85f)])return;this[_0x34db07(0x797)]['actor']=_0x1b8c8b||this[_0x34db07(0x797)][_0x34db07(0x421)],this[_0x34db07(0x797)][_0x34db07(0x85f)]=_0x2b00ac;if(!_0x1b8c8b)return;else{if(_0x2b00ac===''){this[_0x34db07(0x797)]['bitmap']=ImageManager[_0x34db07(0x412)],this['_borderPortraitSprite']['lastFilename']='';return;}else{const _0x51fe13=ImageManager[_0x34db07(0xbc4)](_0x2b00ac);this['_borderPortraitSprite'][_0x34db07(0x6d0)]=0x0,_0x51fe13[_0x34db07(0x9d1)](this['processBorderActor'][_0x34db07(0x543)](this,_0x51fe13));}}},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x93b)]=function(_0x5c0f04){const _0x366ba7=_0x478a06;this[_0x366ba7(0x8f0)]=0x14,this[_0x366ba7(0x797)][_0x366ba7(0x410)]=_0x5c0f04;SceneManager[_0x366ba7(0x143)][_0x366ba7(0x1e6)]()?(this[_0x366ba7(0x797)]['x']=0x0,this[_0x366ba7(0xbd0)]=Math[_0x366ba7(0x4f5)](_0x5c0f04['width']/0x2)):(this['_borderPortraitSprite']['x']=this['width'],this[_0x366ba7(0xbd0)]=this[_0x366ba7(0xaad)]*0x3/0x4);this[_0x366ba7(0x797)][_0x366ba7(0x6d0)]=0x0,this[_0x366ba7(0x797)]['y']=this['y']+this[_0x366ba7(0x15a)];const _0x12f702=BattleManager[_0x366ba7(0x421)]();_0x12f702&&(this[_0x366ba7(0xbd0)]+=_0x12f702[_0x366ba7(0xeb)](),this['_borderPortraitSprite']['y']+=_0x12f702['getBattlePortraitOffsetY']());},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x1b6)]=function(){const _0x28b384=_0x478a06;if(this[_0x28b384(0x8f0)]>0x0){const _0x45207c=this['_borderPortraitDuration'],_0x206ec0=this[_0x28b384(0x797)];_0x206ec0['x']=(_0x206ec0['x']*(_0x45207c-0x1)+this[_0x28b384(0xbd0)])/_0x45207c,_0x206ec0[_0x28b384(0x6d0)]=(_0x206ec0['opacity']*(_0x45207c-0x1)+0xff)/_0x45207c,this[_0x28b384(0x8f0)]--;}},Window_BattleStatus[_0x478a06(0x9c5)][_0x478a06(0x872)]=function(){const _0x2455ac=_0x478a06;return;this[_0x2455ac(0x82f)]&&(this[_0x2455ac(0x82f)]['x']=this['x'],this[_0x2455ac(0x82f)]['y']=this['y']),this[_0x2455ac(0x258)]&&(this[_0x2455ac(0x258)]['x']=this['x'],this[_0x2455ac(0x258)]['y']=this['y']);},Window_BattleStatus['prototype'][_0x478a06(0xa32)]=function(){const _0x4c5223=_0x478a06,_0x1a3b47=VisuMZ[_0x4c5223(0x1a5)][_0x4c5223(0x468)][_0x4c5223(0x64a)];if(_0x1a3b47[_0x4c5223(0x94b)]){const _0x5da97c=new Sprite();_0x5da97c[_0x4c5223(0x410)]=ImageManager[_0x4c5223(0x8e8)](_0x1a3b47[_0x4c5223(0x94b)]),_0x5da97c['x']=_0x1a3b47[_0x4c5223(0xa5a)]||0x0,_0x5da97c['y']=_0x1a3b47[_0x4c5223(0x533)]||0x0,this[_0x4c5223(0x437)](_0x5da97c),this[_0x4c5223(0x219)]=_0x5da97c;}if(_0x1a3b47[_0x4c5223(0x5db)]){const _0x1defde=new Sprite();_0x1defde[_0x4c5223(0x410)]=ImageManager['loadSystem'](_0x1a3b47[_0x4c5223(0x5db)]),_0x1defde['x']=_0x1a3b47[_0x4c5223(0x589)]||0x0,_0x1defde['y']=_0x1a3b47['StatusWindowAttachmentFrontOffsetY']||0x0,this['addChild'](_0x1defde),this[_0x4c5223(0x318)]=_0x1defde;}},Window_BattleStatus[_0x478a06(0x9c5)]['updateAttachmentSprites']=function(){const _0x3acc2b=_0x478a06;this[_0x3acc2b(0x318)]&&this[_0x3acc2b(0xb9b)](this['_frontAttachmentSprite']),this[_0x3acc2b(0x219)]&&this['addChildToBack'](this[_0x3acc2b(0x219)]);},Window_BattleActor[_0x478a06(0x9c5)][_0x478a06(0x413)]=function(){const _0x1b15e1=_0x478a06;return this[_0x1b15e1(0x26c)]();},Window_BattleActor[_0x478a06(0x9c5)]['isActionSelectionValid']=function(){const _0x18a078=_0x478a06,_0x4dcdc2=BattleManager[_0x18a078(0x11a)]();if(!_0x4dcdc2)return!![];if(!_0x4dcdc2[_0x18a078(0x8dd)]())return!![];const _0x198e42=this[_0x18a078(0x421)](this[_0x18a078(0x5c6)]()),_0x31e98b=_0x4dcdc2[_0x18a078(0x8dd)]()['note'];if(_0x4dcdc2[_0x18a078(0x8ea)]()){if(_0x198e42===BattleManager[_0x18a078(0x421)]())return![];}if(_0x4dcdc2[_0x18a078(0x342)]()){if(!_0x198e42[_0x18a078(0x9c0)]())return![];}if(_0x4dcdc2['isForAliveFriend']()){if(!_0x198e42['isAlive']())return![];}return!![];},Window_BattleActor[_0x478a06(0x9c5)][_0x478a06(0x86f)]=function(_0x176204){this['_enemyWindowMode']=_0x176204;},VisuMZ['BattleCore'][_0x478a06(0x305)]=Window_BattleActor[_0x478a06(0x9c5)][_0x478a06(0x215)],Window_BattleActor[_0x478a06(0x9c5)][_0x478a06(0x215)]=function(){const _0x537956=_0x478a06;Window_BattleStatus[_0x537956(0x9c5)]['processTouch'][_0x537956(0x21e)](this),this['_enemyWindowMode']?this[_0x537956(0x6b5)]():VisuMZ['BattleCore'][_0x537956(0x305)][_0x537956(0x21e)](this);},Window_BattleActor[_0x478a06(0x9c5)][_0x478a06(0x6b5)]=function(){const _0x1ba3bf=_0x478a06,_0xf779d0=SceneManager[_0x1ba3bf(0x143)][_0x1ba3bf(0x9ef)];if(!_0xf779d0)return;this['_doubleTouch']=![];const _0x453d4d=this['hitIndex']();if(_0x453d4d>=0x0){this[_0x1ba3bf(0x10a)](_0x453d4d);if(TouchInput[_0x1ba3bf(0x246)]()){const _0x339cbb=$gameParty[_0x1ba3bf(0x645)]()[_0x453d4d],_0x5b5690=_0xf779d0[_0x1ba3bf(0x414)][_0x1ba3bf(0x960)](_0x339cbb);_0x5b5690>=0x0&&(_0xf779d0[_0x1ba3bf(0x10a)](_0x5b5690),_0xf779d0['processOk']());}}},Window_BattleActor[_0x478a06(0x9c5)][_0x478a06(0x502)]=function(){const _0x5b1773=_0x478a06;this[_0x5b1773(0x975)]&&(this[_0x5b1773(0x890)]++,this['active']=!![]);const _0x570319=Window_BattleStatus[_0x5b1773(0x9c5)][_0x5b1773(0x502)]['call'](this);return this['_enemyWindowMode']&&(this[_0x5b1773(0x4cb)]=![]),_0x570319;},VisuMZ['BattleCore']['Window_BattleActor_show']=Window_BattleActor[_0x478a06(0x9c5)][_0x478a06(0x769)],Window_BattleActor[_0x478a06(0x9c5)][_0x478a06(0x769)]=function(){const _0x597de3=_0x478a06;VisuMZ['BattleCore'][_0x597de3(0xe6)][_0x597de3(0x21e)](this);const _0x13e6a9=BattleManager[_0x597de3(0x11a)]();if(_0x13e6a9){const _0x1d9e0f=$gameParty[_0x597de3(0x7bb)]();_0x13e6a9[_0x597de3(0x5e4)]()&&_0x1d9e0f['length']>0x1&&this[_0x597de3(0x358)](_0x597de3(0x1c1),this[_0x597de3(0x491)][_0x597de3(0x543)](this));}},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x86a)]=Window_BattleActor['prototype']['hide'],Window_BattleActor['prototype'][_0x478a06(0x4be)]=function(){const _0xb6c3e7=_0x478a06;VisuMZ[_0xb6c3e7(0x1a5)][_0xb6c3e7(0x86a)][_0xb6c3e7(0x21e)](this),delete this[_0xb6c3e7(0x394)][_0xb6c3e7(0xaa8)],delete this[_0xb6c3e7(0x394)]['pagedown'];},Window_BattleActor[_0x478a06(0x9c5)][_0x478a06(0x491)]=function(){const _0x1a8e41=_0x478a06,_0x2fabae=BattleManager['inputtingAction']();if(_0x2fabae)_0x2fabae[_0x1a8e41(0xa4c)](_0x1a8e41(0x560));this[_0x1a8e41(0x537)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x376)]=Window_BattleEnemy[_0x478a06(0x9c5)]['initialize'],Window_BattleEnemy['prototype'][_0x478a06(0x552)]=function(_0x182119){const _0x483779=_0x478a06;this[_0x483779(0x329)]=null,VisuMZ[_0x483779(0x1a5)][_0x483779(0x376)][_0x483779(0x21e)](this,_0x182119);if(Imported[_0x483779(0x79b)]){if(VisuMZ['AggroControlSystem'][_0x483779(0x784)]<1.12){let _0x15e45b='';_0x15e45b+=_0x483779(0x3ae),_0x15e45b+=_0x483779(0xb0c),_0x15e45b+=_0x483779(0x713),alert(_0x15e45b),SceneManager[_0x483779(0x834)]();}}},Window_BattleEnemy[_0x478a06(0x9c5)][_0x478a06(0x951)]=function(){return this['maxItems']();},VisuMZ[_0x478a06(0x1a5)]['Window_BattleEnemy_show']=Window_BattleEnemy[_0x478a06(0x9c5)][_0x478a06(0x769)],Window_BattleEnemy[_0x478a06(0x9c5)][_0x478a06(0x769)]=function(){const _0x136492=_0x478a06;VisuMZ[_0x136492(0x1a5)][_0x136492(0xbd7)][_0x136492(0x21e)](this),this['y']=Graphics[_0x136492(0x15a)]*0xa,this[_0x136492(0x3fb)]()&&this[_0x136492(0x19b)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x15c)]=Window_BattleEnemy[_0x478a06(0x9c5)][_0x478a06(0x4be)],Window_BattleEnemy['prototype'][_0x478a06(0x4be)]=function(){const _0x36714f=_0x478a06;VisuMZ[_0x36714f(0x1a5)][_0x36714f(0x15c)][_0x36714f(0x21e)](this),$gameParty[_0x36714f(0x10a)](null),delete this['_handlers']['pageup'],delete this[_0x36714f(0x394)]['pagedown'];},Window_BattleEnemy[_0x478a06(0x9c5)]['validTargets']=function(){const _0x53ed77=_0x478a06;let _0x4a1e29=$gameTroop[_0x53ed77(0x7bb)]();const _0x3b1c59=BattleManager['inputtingAction']();if(_0x3b1c59){_0x3b1c59[_0x53ed77(0x5e4)]()&&_0x4a1e29[_0x53ed77(0x496)]>0x1&&this[_0x53ed77(0x358)](_0x53ed77(0xaa8),this['selectAllEnemies'][_0x53ed77(0x543)](this));if(_0x3b1c59['isForAnyone']()){const _0x1ee6a0=$gameParty[_0x53ed77(0x7bb)]();_0x4a1e29=_0x4a1e29['concat'](_0x1ee6a0),_0x3b1c59[_0x53ed77(0x5e4)]()&&_0x1ee6a0['length']>0x1&&this['setHandler']('pagedown',this[_0x53ed77(0x491)][_0x53ed77(0x543)](this));}}return _0x4a1e29;},Window_BattleEnemy['prototype']['refresh']=function(){const _0x2124ff=_0x478a06;this[_0x2124ff(0x414)]=this['validTargets'](),this[_0x2124ff(0x3c0)](),Window_Selectable[_0x2124ff(0x9c5)]['refresh'][_0x2124ff(0x21e)](this);},Window_BattleEnemy[_0x478a06(0x9c5)]['sortEnemies']=function(){const _0x179278=_0x478a06;this[_0x179278(0x414)][_0x179278(0x351)]((_0x4ecd43,_0x2f1e38)=>{const _0xd4054c=_0x179278;if(_0x4ecd43['isActor']()!==_0x2f1e38[_0xd4054c(0x847)]()){if(_0x4ecd43[_0xd4054c(0x8e3)]())return-0x1;if(_0x2f1e38['isEnemy']())return 0x1;}if(_0x4ecd43[_0xd4054c(0x847)]()&&_0x2f1e38['isActor']())return _0x4ecd43[_0xd4054c(0x5c6)]()-_0x2f1e38['index']();return _0x4ecd43[_0xd4054c(0x244)]()[_0xd4054c(0x392)]===_0x2f1e38[_0xd4054c(0x244)]()[_0xd4054c(0x392)]?_0x4ecd43[_0xd4054c(0x244)]()['_baseY']-_0x2f1e38[_0xd4054c(0x244)]()[_0xd4054c(0xb38)]:_0x4ecd43['battler']()['_baseX']-_0x2f1e38['battler']()[_0xd4054c(0x392)];}),SceneManager[_0x179278(0x746)]()&&this[_0x179278(0x414)][_0x179278(0x741)]();},Window_BattleEnemy['prototype'][_0x478a06(0x13d)]=function(){const _0x1e4a79=_0x478a06,_0x14a3a4=VisuMZ[_0x1e4a79(0x1a5)][_0x1e4a79(0x468)]['Enemy'];_0x14a3a4['LastSelected']?this[_0x1e4a79(0x9ce)]():this['autoSelectPriority']();},Window_BattleEnemy['prototype'][_0x478a06(0x9ce)]=function(){const _0x5e61dc=_0x478a06,_0x120690=BattleManager[_0x5e61dc(0x11a)]();if(_0x120690&&_0x120690[_0x5e61dc(0x602)]()){if(_0x120690['isForAnyoneFocusFriends']()){if(this[_0x5e61dc(0x494)]&&this[_0x5e61dc(0x414)]['includes'](this['_lastActor'])){const _0x1e75a0=this[_0x5e61dc(0x414)]['indexOf'](this[_0x5e61dc(0x494)]);return this['forceSelect'](_0x1e75a0);}else return this['autoSelectPriority']();}}if(this[_0x5e61dc(0x329)]&&this[_0x5e61dc(0x414)][_0x5e61dc(0x982)](this[_0x5e61dc(0x329)])){const _0x21b452=this[_0x5e61dc(0x414)][_0x5e61dc(0x960)](this[_0x5e61dc(0x329)]);this['forceSelect'](_0x21b452);}else this[_0x5e61dc(0x8c0)]();},Window_BattleEnemy['prototype'][_0x478a06(0x8c0)]=function(){const _0x2dc43e=_0x478a06,_0x449a65=BattleManager[_0x2dc43e(0x11a)]();if(_0x449a65&&_0x449a65[_0x2dc43e(0x602)]()){const _0x2d0fb8=$gameParty[_0x2dc43e(0x7bb)]()[0x0];let _0x23146a=this[_0x2dc43e(0x414)]['indexOf'](_0x2d0fb8);const _0x1e4361=_0x449a65[_0x2dc43e(0x8dd)]()['scope'];if(_0x1e4361['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this['forceSelect'](_0x23146a);return;}else{if(_0x1e4361[_0x2dc43e(0x85a)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x2dc43e(0x97f)](_0x23146a-0x1);return;}}}const _0x38abad=VisuMZ['BattleCore'][_0x2dc43e(0x468)]['Enemy'];let _0x497140=![];$gameSystem[_0x2dc43e(0x787)]()?_0x497140=_0x38abad[_0x2dc43e(0x8a8)]:_0x497140=_0x38abad[_0x2dc43e(0xa7d)],this['forceSelect'](_0x497140?this[_0x2dc43e(0x4e0)]()-0x1:0x0);},Window_BattleEnemy[_0x478a06(0x9c5)][_0x478a06(0xa5e)]=function(){const _0x294cfb=_0x478a06;Window_Selectable[_0x294cfb(0x9c5)][_0x294cfb(0xa5e)][_0x294cfb(0x21e)](this);if(!this['enemy']())return;if(this[_0x294cfb(0x2f2)]()[_0x294cfb(0x8e3)]())this['_lastEnemy']=this[_0x294cfb(0x2f2)]();if(this['enemy']()[_0x294cfb(0x847)]())this[_0x294cfb(0x494)]=this['enemy']();},Window_BattleEnemy[_0x478a06(0x9c5)][_0x478a06(0x10a)]=function(_0x1e7959){const _0x2059dd=_0x478a06;Window_Selectable[_0x2059dd(0x9c5)][_0x2059dd(0x10a)][_0x2059dd(0x21e)](this,_0x1e7959),$gameTroop[_0x2059dd(0x10a)](this[_0x2059dd(0x2f2)]()),$gameParty[_0x2059dd(0x10a)](this[_0x2059dd(0x2f2)]());if(!this[_0x2059dd(0x2f2)]())return;if(this[_0x2059dd(0x3fb)]()){const _0x3d7a2f=SceneManager[_0x2059dd(0x143)][_0x2059dd(0xafe)];this[_0x2059dd(0x2f2)]()[_0x2059dd(0x847)]()?_0x3d7a2f[_0x2059dd(0x10a)](this[_0x2059dd(0x2f2)]()[_0x2059dd(0x5c6)]()):_0x3d7a2f[_0x2059dd(0x2f4)]();}},Window_BattleEnemy[_0x478a06(0x9c5)][_0x478a06(0x3fb)]=function(){const _0x552063=_0x478a06;if(!this[_0x552063(0xbbc)])return![];if($gameSystem[_0x552063(0x787)]())return![];const _0x5839fc=SceneManager[_0x552063(0x143)][_0x552063(0x716)](),_0x3dd2f5=[_0x552063(0x8e6),'list','xp',_0x552063(0x596),'border'];return _0x3dd2f5[_0x552063(0x982)](_0x5839fc);},Window_BattleEnemy[_0x478a06(0x9c5)]['openBattleActorWindow']=function(){const _0x1c26a9=_0x478a06,_0x4ee822=SceneManager[_0x1c26a9(0x143)][_0x1c26a9(0xafe)];_0x4ee822[_0x1c26a9(0x769)](),_0x4ee822[_0x1c26a9(0x86f)](!![]),_0x4ee822[_0x1c26a9(0x85c)](),_0x4ee822[_0x1c26a9(0x2f4)]();const _0x484114=SceneManager['_scene'][_0x1c26a9(0x716)](),_0x34cbdc=['xp',_0x1c26a9(0x596),_0x1c26a9(0x444)];if(_0x34cbdc[_0x1c26a9(0x982)](_0x484114)){const _0x2e535d=SceneManager[_0x1c26a9(0x143)]['_statusWindow'];_0x2e535d[_0x1c26a9(0x853)]['y']=0x0;}},Window_BattleEnemy['prototype'][_0x478a06(0x41d)]=function(){const _0x5212e3=_0x478a06,_0x15f767=SceneManager[_0x5212e3(0x143)][_0x5212e3(0xafe)];_0x15f767['hide'](),_0x15f767[_0x5212e3(0x86f)](![]),_0x15f767[_0x5212e3(0x2f4)]();const _0x3e9fcc=SceneManager['_scene']['_statusWindow'];_0x3e9fcc['scale']['y']=0x1;},Window_BattleEnemy[_0x478a06(0x9c5)][_0x478a06(0x2b2)]=function(){const _0x19913a=_0x478a06,_0x541597=BattleManager[_0x19913a(0x11a)]();if(_0x541597)_0x541597[_0x19913a(0xa4c)](_0x19913a(0x398));this['processOk']();},Window_BattleEnemy[_0x478a06(0x9c5)]['selectAllActors']=function(){const _0x467b5a=_0x478a06,_0x43546e=BattleManager[_0x467b5a(0x11a)]();if(_0x43546e)_0x43546e[_0x467b5a(0xa4c)](_0x467b5a(0x560));this[_0x467b5a(0x537)]();},Window_BattleEnemy['prototype'][_0x478a06(0x413)]=function(){const _0x7d862f=_0x478a06;return this[_0x7d862f(0x26c)]();},Window_BattleEnemy[_0x478a06(0x9c5)][_0x478a06(0x26c)]=function(){const _0x104d6a=_0x478a06,_0x591ff7=BattleManager['inputtingAction']();if(!_0x591ff7)return!![];if(!_0x591ff7['item']())return!![];const _0xacfb65=this[_0x104d6a(0x2f2)](),_0x555282=_0x591ff7['item']()['note'];if(_0x591ff7[_0x104d6a(0x8ea)]()){if(_0xacfb65===BattleManager['actor']())return![];}return!![];},Window_BattleItem[_0x478a06(0x9c5)][_0x478a06(0x982)]=function(_0x32c78c){const _0x43a087=_0x478a06;if(!_0x32c78c)return![];return _0x32c78c[_0x43a087(0x519)]===0x0||_0x32c78c[_0x43a087(0x519)]===0x1;};function Window_AutoBattleCancel(){this['initialize'](...arguments);}Window_AutoBattleCancel['prototype']=Object[_0x478a06(0x47b)](Window_Base[_0x478a06(0x9c5)]),Window_AutoBattleCancel['prototype'][_0x478a06(0x930)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x478a06(0x9c5)][_0x478a06(0x552)]=function(_0x444a60){const _0x345aa7=_0x478a06;Window_Base[_0x345aa7(0x9c5)][_0x345aa7(0x552)]['call'](this,_0x444a60),this[_0x345aa7(0x92b)](this['bgType']()),this[_0x345aa7(0x85c)]();},Window_AutoBattleCancel[_0x478a06(0x9c5)][_0x478a06(0x925)]=function(){const _0x58bb08=_0x478a06;return VisuMZ['BattleCore'][_0x58bb08(0x468)][_0x58bb08(0xa58)][_0x58bb08(0x61b)];},Window_AutoBattleCancel[_0x478a06(0x9c5)][_0x478a06(0x85c)]=function(){const _0x6a7353=_0x478a06;this[_0x6a7353(0x2b9)][_0x6a7353(0x87d)]();const _0x171f6d=VisuMZ[_0x6a7353(0x1a5)][_0x6a7353(0x468)][_0x6a7353(0xa58)]['AutoBattleMsg'],_0xe48fb1=_0x171f6d[_0x6a7353(0x177)](this[_0x6a7353(0x32b)](),this['cancelButtonText']()),_0x2abc95=this[_0x6a7353(0x799)](_0xe48fb1)[_0x6a7353(0xaad)],_0x595d47=Math[_0x6a7353(0xa76)]((this[_0x6a7353(0x25f)]-_0x2abc95)/0x2);this['drawTextEx'](_0xe48fb1,_0x595d47,0x0,_0x2abc95);},Window_AutoBattleCancel['prototype'][_0x478a06(0x32b)]=function(){const _0x12fd33=_0x478a06;return Imported['VisuMZ_0_CoreEngine']?TextManager[_0x12fd33(0x31d)]('ok'):VisuMZ[_0x12fd33(0x1a5)][_0x12fd33(0x468)][_0x12fd33(0xa58)][_0x12fd33(0x822)];},Window_AutoBattleCancel['prototype'][_0x478a06(0x4e4)]=function(){const _0x3b2d7c=_0x478a06;return Imported['VisuMZ_0_CoreEngine']?TextManager[_0x3b2d7c(0x31d)](_0x3b2d7c(0x28a)):VisuMZ['BattleCore']['Settings'][_0x3b2d7c(0xa58)][_0x3b2d7c(0xb12)];},Window_AutoBattleCancel[_0x478a06(0x9c5)][_0x478a06(0x865)]=function(){const _0x580198=_0x478a06;Window_Base[_0x580198(0x9c5)][_0x580198(0x865)][_0x580198(0x21e)](this),this[_0x580198(0x435)](),this[_0x580198(0x389)]();},Window_AutoBattleCancel['prototype']['updateVisibility']=function(){const _0x309c50=_0x478a06;this[_0x309c50(0xbbc)]=BattleManager[_0x309c50(0x3b4)];},Window_AutoBattleCancel[_0x478a06(0x9c5)][_0x478a06(0x389)]=function(){const _0x5993bd=_0x478a06;if(!BattleManager[_0x5993bd(0x3b4)])return;(Input[_0x5993bd(0x45d)]('ok')||Input[_0x5993bd(0x45d)]('cancel')||TouchInput[_0x5993bd(0x246)]()||TouchInput[_0x5993bd(0x86e)]())&&(SoundManager['playCancel'](),BattleManager[_0x5993bd(0x3b4)]=![],Input[_0x5993bd(0x87d)](),TouchInput[_0x5993bd(0x87d)]());};function Window_EnemyName(){const _0x3a727f=_0x478a06;this[_0x3a727f(0x552)](...arguments);}Window_EnemyName[_0x478a06(0x9c5)]=Object['create'](Window_StatusBase['prototype']),Window_EnemyName[_0x478a06(0x9c5)][_0x478a06(0x930)]=Window_EnemyName,Window_EnemyName[_0x478a06(0x9c5)][_0x478a06(0x552)]=function(_0x1693e4){const _0x16d7f9=_0x478a06;this[_0x16d7f9(0x49a)]=_0x1693e4,this['_text']='';const _0x2a9444=new Rectangle(0x0,0x0,Graphics[_0x16d7f9(0xb0a)],this[_0x16d7f9(0xef)]()*0x4);Window_StatusBase['prototype']['initialize'][_0x16d7f9(0x21e)](this,_0x2a9444),this['setBackgroundType'](0x2),this[_0x16d7f9(0x68d)]=0x0;},Window_EnemyName['prototype'][_0x478a06(0x32f)]=function(){const _0x29041f=_0x478a06;this[_0x29041f(0x12f)]=0x0;},Window_EnemyName['prototype'][_0x478a06(0x2f2)]=function(){const _0x57c27c=_0x478a06;return $gameTroop[_0x57c27c(0x645)]()[this['_enemyID']];},Window_EnemyName[_0x478a06(0x9c5)][_0x478a06(0x865)]=function(){const _0x13e4ab=_0x478a06;Window_StatusBase[_0x13e4ab(0x9c5)][_0x13e4ab(0x865)][_0x13e4ab(0x21e)](this),this[_0x13e4ab(0x2f2)]()&&this[_0x13e4ab(0x2f2)]()[_0x13e4ab(0x8ff)]()!==this[_0x13e4ab(0x1f3)]&&(this['_text']=this[_0x13e4ab(0x2f2)]()[_0x13e4ab(0x8ff)](),this[_0x13e4ab(0x85c)]()),this[_0x13e4ab(0x2df)](),this[_0x13e4ab(0x7b4)]();},Window_EnemyName[_0x478a06(0x9c5)][_0x478a06(0x2df)]=function(){const _0x10e614=_0x478a06;if(!this[_0x10e614(0x2f2)]()){if(this[_0x10e614(0x68d)]>0x0)this[_0x10e614(0x68d)]-=0x10;}else{if(this[_0x10e614(0x2f2)]()[_0x10e614(0x9c0)]()){if(this[_0x10e614(0x68d)]>0x0)this[_0x10e614(0x68d)]-=0x10;}else{if(SceneManager[_0x10e614(0x143)][_0x10e614(0x9ef)]&&SceneManager[_0x10e614(0x143)][_0x10e614(0x9ef)][_0x10e614(0x4cb)]&&SceneManager[_0x10e614(0x143)][_0x10e614(0x9ef)]['_enemies'][_0x10e614(0x982)](this[_0x10e614(0x2f2)]())){if(this['contentsOpacity']<0xff)this[_0x10e614(0x68d)]+=0x10;}else this[_0x10e614(0x68d)]>0x0&&(this[_0x10e614(0x68d)]-=0x10);}}},Window_EnemyName[_0x478a06(0x9c5)]['updatePosition']=function(){const _0x2dce17=_0x478a06;if(!this[_0x2dce17(0x2f2)]())return;SceneManager[_0x2dce17(0x746)]()?this['x']=Graphics[_0x2dce17(0xb0a)]-this[_0x2dce17(0x2f2)]()[_0x2dce17(0x244)]()[_0x2dce17(0x392)]:this['x']=this[_0x2dce17(0x2f2)]()['battler']()[_0x2dce17(0x392)];this['x']-=Math[_0x2dce17(0x801)](this[_0x2dce17(0xaad)]/0x2),this['y']=this['enemy']()[_0x2dce17(0x244)]()['_baseY']-Math['round'](this[_0x2dce17(0xef)]()*1.5);const _0x30d006=VisuMZ[_0x2dce17(0x1a5)][_0x2dce17(0x468)]['Enemy'];this['x']+=_0x30d006['NameOffsetX']||0x0,this['y']+=_0x30d006['NameOffsetY']||0x0;},Window_EnemyName['prototype'][_0x478a06(0x140)]=function(){const _0x5183d2=_0x478a06;Window_Base['prototype'][_0x5183d2(0x140)][_0x5183d2(0x21e)](this),this[_0x5183d2(0x2b9)]['fontSize']=VisuMZ[_0x5183d2(0x1a5)][_0x5183d2(0x468)]['Enemy'][_0x5183d2(0x4bb)];},Window_EnemyName[_0x478a06(0x9c5)][_0x478a06(0x85c)]=function(){const _0xe6e507=_0x478a06;Window_StatusBase[_0xe6e507(0x9c5)][_0xe6e507(0x85c)]['call'](this),this[_0xe6e507(0x2b9)][_0xe6e507(0x87d)]();if(!this['enemy']())return;this[_0xe6e507(0xa5b)]();},Window_EnemyName[_0x478a06(0x9c5)]['drawEnemyName']=function(){const _0x217136=_0x478a06;this[_0x217136(0x1f3)]=this['enemy']()[_0x217136(0x8ff)]();const _0x4a727b=this[_0x217136(0x799)](this[_0x217136(0x1f3)])[_0x217136(0xaad)],_0x530e87=Math['round']((this['innerWidth']-_0x4a727b)/0x2);this['drawTextEx'](this[_0x217136(0x1f3)],_0x530e87,0x0,_0x4a727b+0x8);},Window_BattleLog['prototype']['maxLines']=function(){const _0x1e4911=_0x478a06;return VisuMZ[_0x1e4911(0x1a5)][_0x1e4911(0x468)]['BattleLog'][_0x1e4911(0x403)];},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x463)]=function(){const _0x496ca4=_0x478a06;return VisuMZ[_0x496ca4(0x1a5)][_0x496ca4(0x468)][_0x496ca4(0x5c5)][_0x496ca4(0xb88)];},Window_BattleLog['prototype'][_0x478a06(0x54c)]=function(){const _0x195eb9=_0x478a06;return VisuMZ['BattleCore']['Settings']['BattleLog'][_0x195eb9(0x997)];},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x7c0)]=function(){return![];},Window_BattleLog['prototype'][_0x478a06(0x4a4)]=function(_0x4af0e0,_0x17aa68){const _0x1b63d9=_0x478a06;this['unshift'](_0x1b63d9(0x522)),BattleManager['invokeAction'](_0x4af0e0,_0x17aa68),this[_0x1b63d9(0x9d3)]();},Window_BattleLog['prototype'][_0x478a06(0xbf4)]=function(_0x19a63e,_0x323162,_0x78db9){const _0x13a674=_0x478a06;this['unshift'](_0x13a674(0x522)),BattleManager[_0x13a674(0x844)](_0x19a63e,_0x323162,_0x78db9),this[_0x13a674(0x9d3)]();},Window_BattleLog[_0x478a06(0x9c5)]['actionSplicePoint']=function(){this['callNextMethod']();},Window_BattleLog['prototype'][_0x478a06(0x6b3)]=function(_0x160719){const _0x18eedf=_0x478a06,_0x38289f=Array[_0x18eedf(0x9c5)][_0x18eedf(0x144)][_0x18eedf(0x21e)](arguments,0x1),_0x2d5aae={'name':_0x160719,'params':_0x38289f},_0x13b0d3=this[_0x18eedf(0x9a6)][_0x18eedf(0x77a)](_0x2e05de=>_0x2e05de[_0x18eedf(0x8ff)])[_0x18eedf(0x960)](_0x18eedf(0x522));_0x13b0d3>=0x0?this[_0x18eedf(0x9a6)]['splice'](_0x13b0d3,0x0,_0x2d5aae):this['_methods'][_0x18eedf(0x6b3)](_0x2d5aae);},Window_BattleLog[_0x478a06(0x9c5)]['unshift']=function(_0x41a73f){const _0x1c49ec=_0x478a06,_0x2b19d3=Array['prototype'][_0x1c49ec(0x144)]['call'](arguments,0x1);this[_0x1c49ec(0x9a6)]['unshift']({'name':_0x41a73f,'params':_0x2b19d3});},Window_BattleLog[_0x478a06(0x9c5)]['logActionList']=function(){const _0x26c2db=_0x478a06;if(!$gameTemp[_0x26c2db(0x42a)]())return;console['log'](this[_0x26c2db(0x9a6)]['map'](_0x3ff8d1=>_0x3ff8d1[_0x26c2db(0x8ff)])[_0x26c2db(0xae7)]('\x0a'));},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xa8c)]=Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x85c)],Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x85c)]=function(){const _0x15d9ef=_0x478a06;this[_0x15d9ef(0xbe0)]=!![];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x2ea)]=Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x865)],Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x865)]=function(){const _0x25fd00=_0x478a06;VisuMZ[_0x25fd00(0x1a5)][_0x25fd00(0x2ea)][_0x25fd00(0x21e)](this);if(this[_0x25fd00(0xbe0)])this[_0x25fd00(0xb75)]();},Window_BattleLog[_0x478a06(0x9c5)]['processRefresh']=function(){const _0x1a3200=_0x478a06;this[_0x1a3200(0xbe0)]=![],VisuMZ[_0x1a3200(0x1a5)][_0x1a3200(0xa8c)][_0x1a3200(0x21e)](this);},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x261)]=function(_0x3dcad5){const _0x36c112=_0x478a06;let _0x15e778=VisuMZ[_0x36c112(0x1a5)][_0x36c112(0x468)]['BattleLog']['TextAlign'][_0x36c112(0xbd5)]()[_0x36c112(0xb7d)](),_0x2ca7f9=this[_0x36c112(0x6a4)][_0x3dcad5];if(_0x2ca7f9[_0x36c112(0x85a)](/<LEFT>/i))_0x15e778=_0x36c112(0x78a);else{if(_0x2ca7f9['match'](/<CENTER>/i))_0x15e778='center';else _0x2ca7f9[_0x36c112(0x85a)](/<RIGHT>/i)&&(_0x15e778=_0x36c112(0x58d));}_0x2ca7f9=_0x2ca7f9[_0x36c112(0xaa3)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x2ca7f9=_0x2ca7f9[_0x36c112(0xaa3)](/\\I\[0\]/gi,'');const _0x5c11f7=this[_0x36c112(0xa72)](_0x3dcad5);this[_0x36c112(0x2b9)][_0x36c112(0x4e9)](_0x5c11f7['x'],_0x5c11f7['y'],_0x5c11f7[_0x36c112(0xaad)],_0x5c11f7[_0x36c112(0x15a)]);const _0x3e7190=this[_0x36c112(0x799)](_0x2ca7f9)[_0x36c112(0xaad)];let _0x6b462=_0x5c11f7['x'];if(_0x15e778===_0x36c112(0x11d))_0x6b462+=(_0x5c11f7[_0x36c112(0xaad)]-_0x3e7190)/0x2;else _0x15e778==='right'&&(_0x6b462+=_0x5c11f7[_0x36c112(0xaad)]-_0x3e7190);this['drawTextEx'](_0x2ca7f9,_0x6b462,_0x5c11f7['y'],_0x3e7190+0x8);},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x6d1)]=function(_0x1c18bb){const _0x2e3217=_0x478a06;this[_0x2e3217(0x6a4)][_0x2e3217(0x6b3)](_0x1c18bb),this[_0x2e3217(0x85c)](),this[_0x2e3217(0x9d3)]();},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x4b3)]=function(){const _0x2460bb=_0x478a06;let _0x3cb4f0=![];switch(this['_waitMode']){case'effect':_0x3cb4f0=this[_0x2460bb(0x526)][_0x2460bb(0x27f)]();break;case _0x2460bb(0x922):_0x3cb4f0=this[_0x2460bb(0x526)][_0x2460bb(0x264)]();break;case _0x2460bb(0xa29):_0x3cb4f0=this[_0x2460bb(0x526)][_0x2460bb(0x63e)]();break;case'float':_0x3cb4f0=this[_0x2460bb(0x526)][_0x2460bb(0x94c)]();break;case _0x2460bb(0x6b0):_0x3cb4f0=this[_0x2460bb(0x526)][_0x2460bb(0x6d6)]();break;case _0x2460bb(0x6d0):_0x3cb4f0=this[_0x2460bb(0x526)][_0x2460bb(0x24d)]();break;}return!_0x3cb4f0&&(this[_0x2460bb(0xa2e)]=''),_0x3cb4f0;},Window_BattleLog['prototype'][_0x478a06(0xbf2)]=function(){const _0x6e5cfc=_0x478a06;this['setWaitMode'](_0x6e5cfc(0xa29));},Window_BattleLog['prototype']['waitForFloat']=function(){const _0x9d79=_0x478a06;this[_0x9d79(0x2d6)](_0x9d79(0x798));},Window_BattleLog[_0x478a06(0x9c5)]['waitForJump']=function(){const _0x4d7e5b=_0x478a06;this['setWaitMode'](_0x4d7e5b(0x6b0));},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x3f0)]=function(){const _0x52472a=_0x478a06;this[_0x52472a(0x2d6)](_0x52472a(0x6d0));},Window_BattleLog['prototype']['startTurn']=function(){const _0x134836=_0x478a06,_0x1ba9e8=VisuMZ[_0x134836(0x1a5)][_0x134836(0x468)][_0x134836(0x5c5)];if(!_0x1ba9e8[_0x134836(0x479)])return;this[_0x134836(0x6b3)]('addText',_0x1ba9e8[_0x134836(0x1d6)]['format']($gameTroop['turnCount']())),this['push'](_0x134836(0xa9e),_0x1ba9e8[_0x134836(0x5d1)]),this[_0x134836(0x6b3)](_0x134836(0x87d));};var $subject,$action,$targets;Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x256)]=function(_0x36dbca,_0x537457,_0xa5f1b6){const _0x562e85=_0x478a06;$subject=_0x36dbca,$action=_0x537457,$targets=_0xa5f1b6,this[_0x562e85(0x53a)](_0x537457)?BattleManager[_0x562e85(0x529)]():this[_0x562e85(0x257)](_0x36dbca,_0x537457,_0xa5f1b6);},Window_BattleLog[_0x478a06(0x9c5)]['isCustomActionSequence']=function(_0x64e104){const _0x388a95=_0x478a06;if(!SceneManager['isSceneBattle']())return![];if(!_0x64e104)return![];if(!_0x64e104[_0x388a95(0x8dd)]())return![];if(_0x64e104[_0x388a95(0x8dd)]()[_0x388a95(0x39c)]['match'](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x388a95(0x666)](_0x64e104['item']()))return!![];return![];},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x257)]=function(_0x4abcf5,_0x1ce77d,_0x2a2c1a){const _0xf8527f=_0x478a06;this[_0xf8527f(0x8f3)](_0x4abcf5,_0x1ce77d,_0x2a2c1a),this[_0xf8527f(0x549)](_0x4abcf5,_0x1ce77d,_0x2a2c1a),this['finishActionSet'](_0x4abcf5,_0x1ce77d,_0x2a2c1a);},Window_BattleLog[_0x478a06(0x9c5)]['displayAction']=function(_0x488bd1,_0x51b278){const _0x394fad=_0x478a06,_0x1f9a1d=VisuMZ[_0x394fad(0x1a5)][_0x394fad(0x468)][_0x394fad(0x5c5)];_0x1f9a1d[_0x394fad(0x6aa)]&&this[_0x394fad(0x6b3)](_0x394fad(0x6d1),_0x394fad(0xbbe)[_0x394fad(0x177)](DataManager[_0x394fad(0x603)](_0x51b278)));if(DataManager[_0x394fad(0xbbd)](_0x51b278)){if(_0x1f9a1d['ActionSkillMsg1'])this['displayItemMessage'](_0x51b278[_0x394fad(0xca)],_0x488bd1,_0x51b278);if(_0x1f9a1d[_0x394fad(0x9fc)])this[_0x394fad(0x7a5)](_0x51b278['message2'],_0x488bd1,_0x51b278);}else{if(_0x1f9a1d[_0x394fad(0x6eb)])this['displayItemMessage'](TextManager[_0x394fad(0x954)],_0x488bd1,_0x51b278);}},Window_BattleLog['prototype'][_0x478a06(0x8f3)]=function(_0x531612,_0x17072d,_0x51749a){const _0x5a40f3=_0x478a06,_0x5596ca=_0x17072d[_0x5a40f3(0x8dd)]();this['displayAction'](_0x531612,_0x5596ca),this[_0x5a40f3(0x6b3)](_0x5a40f3(0x703),_0x531612,_0x51749a,!![]),this['push'](_0x5a40f3(0xb97),_0x531612,_0x17072d),this['push']('waitForMovement'),this[_0x5a40f3(0x6b3)]('performCastAnimation',_0x531612,_0x17072d),this[_0x5a40f3(0x6b3)]('waitForAnimation');},Window_BattleLog['prototype']['createEffectActionSet']=function(_0x2bb89c,_0x353474,_0x9e747a){const _0x5caebe=_0x478a06;if(this[_0x5caebe(0x24c)](_0x353474))this[_0x5caebe(0xaab)](_0x2bb89c,_0x353474,_0x9e747a);else{if(this['isMeleeMultiTargetAction'](_0x353474))this[_0x5caebe(0x2d3)](_0x2bb89c,_0x353474,_0x9e747a);else _0x353474['isForRandom']()?this[_0x5caebe(0x2da)](_0x2bb89c,_0x353474,_0x9e747a):this['wholeActionSet'](_0x2bb89c,_0x353474,_0x9e747a);}},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x640)]=function(_0xa3e315,_0x5a752c,_0x424601,_0x30490b){const _0x5aba87=_0x478a06;if(_0x5a752c){const _0xbc2a39=_0xa3e315[_0x5aba87(0x244)]();this['push'](_0x5aba87(0xb4e),[_0xa3e315],_0x424601,_0x30490b),this['push'](_0x5aba87(0x93c),_0xa3e315,_0xbc2a39[_0x5aba87(0xb22)],_0xbc2a39[_0x5aba87(0xaca)],_0x30490b,![],_0x5aba87(0x4df)),this[_0x5aba87(0x6b3)]('requestMotion',[_0xa3e315],'evade'),this[_0x5aba87(0x6b3)](_0x5aba87(0x81a)),this['push'](_0x5aba87(0x3ee),[_0xa3e315],'walk');}},Window_BattleLog['prototype'][_0x478a06(0x24c)]=function(_0xd2e72a){const _0xd6d149=_0x478a06;if(!_0xd2e72a[_0xd6d149(0xaa5)]())return![];if(!_0xd2e72a[_0xd6d149(0x3a9)]())return![];if(!_0xd2e72a[_0xd6d149(0x77c)]())return![];return VisuMZ[_0xd6d149(0x1a5)][_0xd6d149(0x468)][_0xd6d149(0xaef)]['AutoMeleeSolo'];},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0xaab)]=function(_0x15efa1,_0x3f1897,_0xc6fe84){const _0x15d71c=_0x478a06,_0x2b29ce=_0x15efa1[_0x15d71c(0xdc)]()[_0x15d71c(0x47c)]<0x2,_0x4690c9=0x14,_0x5f570c=0x30;let _0x5dff0b=!![];_0xc6fe84[_0x15d71c(0x496)]>0x0&&_0x15efa1[_0x15d71c(0x847)]()===_0xc6fe84[0x0][_0x15d71c(0x847)]()&&(_0x5dff0b=![]);_0x2b29ce&&_0x5dff0b&&(this[_0x15d71c(0x6b3)]('performJump',[_0x15efa1],_0x5f570c,_0x4690c9),this['push'](_0x15d71c(0x503),_0x15efa1,_0xc6fe84,_0x15d71c(0xb5f),_0x4690c9,!![],'Linear',!![]),this[_0x15d71c(0x6b3)]('requestMotion',[_0x15efa1],_0x15d71c(0x3bd)),this[_0x15d71c(0x6b3)]('waitForMovement'));let _0x1028a3=_0x3f1897[_0x15d71c(0x56d)]()?this[_0x15d71c(0xb8d)](_0x15efa1):0x1;for(let _0x22398f=0x0;_0x22398f<_0x1028a3;_0x22398f++){_0x3f1897[_0x15d71c(0x56d)]()&&_0x15efa1['isActor']()&&this[_0x15d71c(0x6b3)](_0x15d71c(0x260),_0x15efa1,_0x22398f),_0x3f1897[_0x15d71c(0x8dd)]()['animationId']<0x0?this['targetActionSet'](_0x15efa1,_0x3f1897,_0xc6fe84):this[_0x15d71c(0xb6d)](_0x15efa1,_0x3f1897,_0xc6fe84);}_0x3f1897[_0x15d71c(0x56d)]()&&_0x15efa1[_0x15d71c(0x847)]()&&this[_0x15d71c(0x6b3)]('clearActiveWeaponSet',_0x15efa1),this['push'](_0x15d71c(0x703),_0x15efa1,_0xc6fe84,![]),this['addMeleeReturnActionSet'](_0x15efa1,_0x2b29ce,_0x5f570c,_0x4690c9);},Window_BattleLog['prototype']['isMeleeMultiTargetAction']=function(_0x1e1ff0){const _0x47e164=_0x478a06;if(!_0x1e1ff0[_0x47e164(0xaa5)]())return![];if(!_0x1e1ff0[_0x47e164(0x540)]())return![];if(!_0x1e1ff0[_0x47e164(0x77c)]())return![];return VisuMZ[_0x47e164(0x1a5)][_0x47e164(0x468)]['ActionSequence'][_0x47e164(0x34b)];},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x2d3)]=function(_0x1fbbb3,_0xabe451,_0x331254){const _0x28a4ec=_0x478a06,_0x48edf0=_0x1fbbb3[_0x28a4ec(0xdc)]()[_0x28a4ec(0x47c)]<0x2,_0x3750cf=0x14,_0x1e4055=0x30;if(_0x48edf0){this[_0x28a4ec(0x6b3)](_0x28a4ec(0xb4e),[_0x1fbbb3],_0x1e4055,_0x3750cf);const _0x57528d=_0x331254[_0x28a4ec(0x496)]>0x1?_0x28a4ec(0x3d9):_0x28a4ec(0xb5f);this[_0x28a4ec(0x6b3)](_0x28a4ec(0x503),_0x1fbbb3,_0x331254,_0x57528d,_0x3750cf,!![],_0x28a4ec(0x4df),!![]),this['push'](_0x28a4ec(0x3ee),[_0x1fbbb3],_0x28a4ec(0x3bd)),this[_0x28a4ec(0x6b3)](_0x28a4ec(0x81a));}let _0x3fccd9=_0xabe451[_0x28a4ec(0x56d)]()?this[_0x28a4ec(0xb8d)](_0x1fbbb3):0x1;for(let _0x526d05=0x0;_0x526d05<_0x3fccd9;_0x526d05++){_0xabe451['isAttack']()&&_0x1fbbb3['isActor']()&&this[_0x28a4ec(0x6b3)]('setActiveWeaponSet',_0x1fbbb3,_0x526d05),this[_0x28a4ec(0xb6d)](_0x1fbbb3,_0xabe451,_0x331254);}_0xabe451['isAttack']()&&_0x1fbbb3[_0x28a4ec(0x847)]()&&this[_0x28a4ec(0x6b3)](_0x28a4ec(0x8d4),_0x1fbbb3),this['push'](_0x28a4ec(0x703),_0x1fbbb3,_0x331254,![]),this[_0x28a4ec(0x640)](_0x1fbbb3,_0x48edf0,_0x1e4055,_0x3750cf);},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x2da)]=function(_0x36638f,_0x558f4b,_0x35e9b){const _0x58a85=_0x478a06,_0x59e089=_0x558f4b['item']();for(const _0x497a46 of _0x35e9b){if(!_0x497a46)continue;this['push'](_0x58a85(0x661),_0x36638f,_0x558f4b),this[_0x58a85(0x6b3)](_0x58a85(0xa9e),Sprite_Battler[_0x58a85(0x846)]),this[_0x58a85(0x6b3)](_0x58a85(0x736),_0x36638f,[_0x497a46],_0x59e089[_0x58a85(0x1a3)]),this['push'](_0x58a85(0xa9e),0x18),this[_0x58a85(0x6b3)](_0x58a85(0x4a4),_0x36638f,_0x497a46);}},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0xb6d)]=function(_0x45515e,_0x223c5,_0x156efd){const _0x51c8e4=_0x478a06,_0x47148f=_0x223c5['item']();let _0x31b060=_0x223c5[_0x51c8e4(0x56d)]()?0x1+_0x45515e[_0x51c8e4(0x91c)]():0x1;while(_0x31b060--){this[_0x51c8e4(0x6b3)](_0x51c8e4(0x661),_0x45515e,_0x223c5),this['push']('waitCount',Sprite_Battler[_0x51c8e4(0x846)]),this[_0x51c8e4(0x6b3)]('showAnimation',_0x45515e,_0x156efd['clone'](),_0x47148f[_0x51c8e4(0x1a3)]),this[_0x51c8e4(0x6b3)]('waitForAnimation');}for(const _0x5e4798 of _0x156efd){if(!_0x5e4798)continue;this[_0x51c8e4(0x6b3)]('actionEffect',_0x45515e,_0x5e4798);}},Window_BattleLog[_0x478a06(0x9c5)]['finishActionSet']=function(_0x216b57,_0x82754,_0x487d96){const _0xbf90a2=_0x478a06,_0x7ec6ba=_0x82754[_0xbf90a2(0x8dd)]();this['push'](_0xbf90a2(0x703),_0x216b57,_0x487d96,![]),this[_0xbf90a2(0x6b3)](_0xbf90a2(0x39f)),this[_0xbf90a2(0x6b3)]('waitForEffect'),this[_0xbf90a2(0x6b3)](_0xbf90a2(0x87d)),this[_0xbf90a2(0x6b3)](_0xbf90a2(0x7d3),_0x216b57),this[_0xbf90a2(0x6b3)](_0xbf90a2(0x81a));},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x793)]=function(_0x456a8d){$subject=null,$action=null,$targets=[];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x7c4)]=Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x6cf)],Window_BattleLog[_0x478a06(0x9c5)]['displayCurrentState']=function(_0x55a311){const _0x207693=_0x478a06;if(!VisuMZ[_0x207693(0x1a5)][_0x207693(0x468)][_0x207693(0x5c5)][_0x207693(0x65e)])return;VisuMZ['BattleCore'][_0x207693(0x7c4)][_0x207693(0x21e)](this,_0x55a311);},Window_BattleLog[_0x478a06(0x9c5)]['displayCounter']=function(_0x56a1e2){const _0x367098=_0x478a06;this[_0x367098(0x6b3)](_0x367098(0x375),_0x56a1e2);VisuMZ['BattleCore'][_0x367098(0x468)]['ActionSequence']['CounterPlayback']&&this[_0x367098(0x6b3)]('showAnimation',_0x56a1e2,[BattleManager['_subject']],-0x1);if(!VisuMZ[_0x367098(0x1a5)][_0x367098(0x468)]['BattleLog']['ShowCounter'])return;this['push']('addText',TextManager[_0x367098(0xb5e)][_0x367098(0x177)](_0x56a1e2[_0x367098(0x8ff)]()));const _0x490fa1=VisuMZ['BattleCore']['Settings'][_0x367098(0x5c5)][_0x367098(0xc3)]??0x0;if(_0x490fa1>0x0)this[_0x367098(0x6b3)](_0x367098(0xa9e),_0x490fa1);;},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x2b5)]=function(_0xfeb844){const _0x1fbf98=_0x478a06;this[_0x1fbf98(0x6b3)](_0x1fbf98(0x7f9),_0xfeb844);if(!VisuMZ[_0x1fbf98(0x1a5)]['Settings'][_0x1fbf98(0x5c5)][_0x1fbf98(0x66f)])return;this[_0x1fbf98(0x6b3)]('addText',TextManager[_0x1fbf98(0x910)][_0x1fbf98(0x177)](_0xfeb844[_0x1fbf98(0x8ff)]()));const _0x2cc675=VisuMZ['BattleCore'][_0x1fbf98(0x468)]['BattleLog'][_0x1fbf98(0xacc)]??0x0;if(_0x2cc675>0x0)this[_0x1fbf98(0x6b3)](_0x1fbf98(0xa9e),_0x2cc675);;},Window_BattleLog['prototype'][_0x478a06(0x84a)]=function(_0x215000,_0xffeed5){const _0x3d4dd3=_0x478a06;if(VisuMZ[_0x3d4dd3(0x1a5)][_0x3d4dd3(0x468)][_0x3d4dd3(0xaef)][_0x3d4dd3(0xb77)]){const _0x5f3242=_0xffeed5[_0x3d4dd3(0x8dd)]();this[_0x3d4dd3(0x6b3)](_0x3d4dd3(0x736),_0x215000,[_0x215000],_0x5f3242['animationId']);}},Window_BattleLog['prototype'][_0x478a06(0x680)]=function(_0x542feb,_0x2675be){const _0x5ef553=_0x478a06;this[_0x5ef553(0x6b3)](_0x5ef553(0x43b),_0x542feb,_0x2675be);if(!VisuMZ[_0x5ef553(0x1a5)][_0x5ef553(0x468)][_0x5ef553(0x5c5)]['ShowSubstitute'])return;const _0x36a07a=_0x542feb[_0x5ef553(0x8ff)](),_0x508a85=TextManager[_0x5ef553(0x461)][_0x5ef553(0x177)](_0x36a07a,_0x2675be[_0x5ef553(0x8ff)]());this[_0x5ef553(0x6b3)]('addText',_0x508a85);const _0x2baee2=VisuMZ[_0x5ef553(0x1a5)][_0x5ef553(0x468)][_0x5ef553(0x5c5)][_0x5ef553(0x32c)]??0x0;if(_0x2baee2>0x0)this[_0x5ef553(0x6b3)]('waitCount',_0x2baee2);;},VisuMZ[_0x478a06(0x1a5)]['Window_BattleLog_displayActionResults']=Window_BattleLog['prototype'][_0x478a06(0x816)],Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x816)]=function(_0x30affc,_0x38fd7c){const _0x1eee54=_0x478a06;VisuMZ[_0x1eee54(0x1a5)][_0x1eee54(0x24a)][_0x1eee54(0x21e)](this,_0x30affc,_0x38fd7c);},VisuMZ['BattleCore'][_0x478a06(0x37e)]=Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x6c0)],Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x6c0)]=function(_0x391c62){const _0x37a3fe=_0x478a06;if(!VisuMZ[_0x37a3fe(0x1a5)][_0x37a3fe(0x468)][_0x37a3fe(0x5c5)][_0x37a3fe(0x7e3)])return;VisuMZ[_0x37a3fe(0x1a5)][_0x37a3fe(0x37e)][_0x37a3fe(0x21e)](this,_0x391c62);},VisuMZ[_0x478a06(0x1a5)]['Window_BattleLog_displayCritical']=Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x34c)],Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x34c)]=function(_0x4c9b4e){const _0x4a066a=_0x478a06;if(!VisuMZ['BattleCore'][_0x4a066a(0x468)][_0x4a066a(0x5c5)]['ShowCritical'])return;VisuMZ[_0x4a066a(0x1a5)][_0x4a066a(0xa8b)][_0x4a066a(0x21e)](this,_0x4c9b4e);},VisuMZ[_0x478a06(0x1a5)]['Window_BattleLog_displayMiss']=Window_BattleLog['prototype'][_0x478a06(0x1bc)],Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x1bc)]=function(_0x440b75){const _0x16cbe2=_0x478a06;!VisuMZ['BattleCore'][_0x16cbe2(0x468)][_0x16cbe2(0x5c5)][_0x16cbe2(0x580)]?this[_0x16cbe2(0x6b3)](_0x16cbe2(0x243),_0x440b75):VisuMZ[_0x16cbe2(0x1a5)][_0x16cbe2(0x1af)][_0x16cbe2(0x21e)](this,_0x440b75);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x48e)]=Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x497)],Window_BattleLog[_0x478a06(0x9c5)]['displayEvasion']=function(_0x38b984){const _0x579417=_0x478a06;!VisuMZ[_0x579417(0x1a5)]['Settings'][_0x579417(0x5c5)][_0x579417(0x580)]?_0x38b984['result']()['physical']?this[_0x579417(0x6b3)]('performEvasion',_0x38b984):this['push']('performMagicEvasion',_0x38b984):VisuMZ[_0x579417(0x1a5)][_0x579417(0x48e)][_0x579417(0x21e)](this,_0x38b984);},Window_BattleLog['prototype'][_0x478a06(0xa86)]=function(_0x47eef9){const _0x3c6229=_0x478a06;_0x47eef9[_0x3c6229(0x15f)]()[_0x3c6229(0x6a5)]&&(_0x47eef9[_0x3c6229(0x6f5)]=0x0,_0x47eef9[_0x3c6229(0x15f)]()['hpDamage']>0x0&&!_0x47eef9['result']()[_0x3c6229(0xb4a)]&&(_0x47eef9[_0x3c6229(0x6f5)]=_0x47eef9[_0x3c6229(0x15f)]()[_0x3c6229(0x837)],this[_0x3c6229(0x6b3)](_0x3c6229(0x6e3),_0x47eef9)),_0x47eef9[_0x3c6229(0x15f)]()['hpDamage']<0x0&&this[_0x3c6229(0x6b3)](_0x3c6229(0x449),_0x47eef9),VisuMZ[_0x3c6229(0x1a5)]['Settings'][_0x3c6229(0x5c5)][_0x3c6229(0x107)]&&this[_0x3c6229(0x6b3)]('addText',this[_0x3c6229(0x5fd)](_0x47eef9)));},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x366)]=Window_BattleLog['prototype'][_0x478a06(0x45c)],Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x45c)]=function(_0x61c3ac){const _0x3be4c2=_0x478a06;if(!VisuMZ[_0x3be4c2(0x1a5)][_0x3be4c2(0x468)][_0x3be4c2(0x5c5)][_0x3be4c2(0x7ee)])return;VisuMZ[_0x3be4c2(0x1a5)][_0x3be4c2(0x366)]['call'](this,_0x61c3ac);},VisuMZ[_0x478a06(0x1a5)]['Window_BattleLog_displayTpDamage']=Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0xec)],Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0xec)]=function(_0x5d5f5c){const _0x3b4cf2=_0x478a06;if(!VisuMZ[_0x3b4cf2(0x1a5)][_0x3b4cf2(0x468)][_0x3b4cf2(0x5c5)][_0x3b4cf2(0x790)])return;VisuMZ[_0x3b4cf2(0x1a5)][_0x3b4cf2(0x6c8)]['call'](this,_0x5d5f5c);},Window_BattleLog['prototype'][_0x478a06(0xa00)]=function(_0x51fd05){const _0x423f88=_0x478a06;_0x51fd05[_0x423f88(0x15f)]()[_0x423f88(0x892)]()&&(this['push'](_0x423f88(0x9aa)),this[_0x423f88(0x753)](_0x51fd05),this[_0x423f88(0x38f)](_0x51fd05),this[_0x423f88(0x6b3)](_0x423f88(0x39f)));},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x981)]=function(_0x132bb1){const _0x50d765=_0x478a06,_0x343eb5=_0x132bb1[_0x50d765(0x15f)](),_0x3d1372=_0x343eb5['addedStateObjects']();for(const _0x181389 of _0x3d1372){const _0x57ee5a=_0x132bb1[_0x50d765(0x847)]()?_0x181389[_0x50d765(0xca)]:_0x181389['message2'];_0x57ee5a&&VisuMZ['BattleCore'][_0x50d765(0x468)]['BattleLog'][_0x50d765(0x5d8)]&&(this[_0x50d765(0x6b3)](_0x50d765(0x92d)),this['push']('pushBaseLine'),this[_0x50d765(0x6b3)](_0x50d765(0x6d1),_0x57ee5a['format'](_0x132bb1[_0x50d765(0x8ff)]())),this[_0x50d765(0x6b3)](_0x50d765(0xe3))),_0x181389['id']===_0x132bb1['deathStateId']()&&this['push'](_0x50d765(0xa74),_0x132bb1);}},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x98e)]=function(_0x12dfc5){const _0x16d58f=_0x478a06;if(!VisuMZ[_0x16d58f(0x1a5)][_0x16d58f(0x468)][_0x16d58f(0x5c5)][_0x16d58f(0x9b9)])return;const _0x4aaec2=_0x12dfc5[_0x16d58f(0x15f)](),_0x1bd174=_0x4aaec2[_0x16d58f(0x202)]();for(const _0x2ba2b4 of _0x1bd174){_0x2ba2b4[_0x16d58f(0xb0f)]&&(this['push']('popBaseLine'),this[_0x16d58f(0x6b3)](_0x16d58f(0x9aa)),this[_0x16d58f(0x6b3)](_0x16d58f(0x6d1),_0x2ba2b4[_0x16d58f(0xb0f)][_0x16d58f(0x177)](_0x12dfc5['name']())),this['push'](_0x16d58f(0xe3)));}},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x38f)]=function(_0x299bb2){const _0x56c4cd=_0x478a06,_0x24465d=VisuMZ[_0x56c4cd(0x1a5)][_0x56c4cd(0x468)][_0x56c4cd(0x5c5)],_0x5296b8=_0x299bb2['result']();if(_0x24465d[_0x56c4cd(0x453)])this[_0x56c4cd(0x9dc)](_0x299bb2,_0x5296b8[_0x56c4cd(0x50b)],TextManager[_0x56c4cd(0x431)]);if(_0x24465d[_0x56c4cd(0x72c)])this[_0x56c4cd(0x9dc)](_0x299bb2,_0x5296b8[_0x56c4cd(0x5d7)],TextManager[_0x56c4cd(0x4ec)]);if(_0x24465d[_0x56c4cd(0x7ed)])this[_0x56c4cd(0x9dc)](_0x299bb2,_0x5296b8[_0x56c4cd(0xa48)],TextManager[_0x56c4cd(0x7b6)]);},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x9dc)]=function(_0x5f1cd6,_0x28d981,_0x1076ac){const _0x5ca0f0=_0x478a06;for(const _0x2b0683 of _0x28d981){const _0x3e8e15=_0x1076ac[_0x5ca0f0(0x177)](_0x5f1cd6['name'](),TextManager[_0x5ca0f0(0xe1)](_0x2b0683));this[_0x5ca0f0(0x6b3)](_0x5ca0f0(0x92d)),this[_0x5ca0f0(0x6b3)]('pushBaseLine'),this['push'](_0x5ca0f0(0x6d1),_0x3e8e15),this[_0x5ca0f0(0x6b3)](_0x5ca0f0(0xe3));}},VisuMZ[_0x478a06(0x1a5)]['Window_BattleLog_clear']=Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x87d)],Window_BattleLog['prototype']['clear']=function(){const _0x457719=_0x478a06;VisuMZ[_0x457719(0x1a5)]['Window_BattleLog_clear'][_0x457719(0x21e)](this),this[_0x457719(0x9d3)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x867)]=Window_BattleLog['prototype'][_0x478a06(0x9aa)],Window_BattleLog[_0x478a06(0x9c5)]['pushBaseLine']=function(){const _0x1cf8d7=_0x478a06;VisuMZ[_0x1cf8d7(0x1a5)]['Window_BattleLog_pushBaseLine'][_0x1cf8d7(0x21e)](this),this[_0x1cf8d7(0x9d3)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x182)]=Window_BattleLog[_0x478a06(0x9c5)]['popBaseLine'],Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x92d)]=function(){const _0x57dacf=_0x478a06;VisuMZ[_0x57dacf(0x1a5)][_0x57dacf(0x182)][_0x57dacf(0x21e)](this),this['processRefresh'](),this[_0x57dacf(0x9d3)]();},VisuMZ[_0x478a06(0x1a5)]['Window_BattleLog_popupDamage']=Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x87e)],Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x87e)]=function(_0x17c20a){const _0xd174dd=_0x478a06;VisuMZ[_0xd174dd(0x1a5)][_0xd174dd(0xbe4)][_0xd174dd(0x21e)](this,_0x17c20a),this['callNextMethod']();},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x39f)]=function(){const _0x4ba72c=_0x478a06;let _0x51290b=0x0;this[_0x4ba72c(0x302)][_0x4ba72c(0x496)]>0x0&&(_0x51290b=this[_0x4ba72c(0x302)][this[_0x4ba72c(0x302)][_0x4ba72c(0x496)]-0x1]),this[_0x4ba72c(0x6a4)][_0x4ba72c(0x496)]>_0x51290b?this[_0x4ba72c(0xe3)]():this[_0x4ba72c(0x9d3)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x157)]=Window_BattleLog['prototype'][_0x478a06(0xb97)],Window_BattleLog[_0x478a06(0x9c5)]['performActionStart']=function(_0x31b3c7,_0x7b9eb0){const _0x47cad7=_0x478a06;VisuMZ[_0x47cad7(0x1a5)][_0x47cad7(0x157)][_0x47cad7(0x21e)](this,_0x31b3c7,_0x7b9eb0),this[_0x47cad7(0x9d3)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x223)]=Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x661)],Window_BattleLog['prototype']['performAction']=function(_0x474f0b,_0x4932bb){const _0xbd328a=_0x478a06;VisuMZ['BattleCore'][_0xbd328a(0x223)]['call'](this,_0x474f0b,_0x4932bb),this[_0xbd328a(0x9d3)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xba8)]=Window_BattleLog['prototype'][_0x478a06(0x7d3)],Window_BattleLog['prototype'][_0x478a06(0x7d3)]=function(_0x252030){const _0x54e994=_0x478a06;VisuMZ['BattleCore']['Window_BattleLog_performActionEnd'][_0x54e994(0x21e)](this,_0x252030);for(const _0x433e48 of BattleManager[_0x54e994(0x3df)]()){if(!_0x433e48)continue;if(_0x433e48[_0x54e994(0x9c0)]())continue;_0x433e48[_0x54e994(0x343)]();}this[_0x54e994(0x9d3)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xbd4)]=Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x6e3)],Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x6e3)]=function(_0x15574f){const _0x288f0d=_0x478a06;VisuMZ[_0x288f0d(0x1a5)][_0x288f0d(0xbd4)][_0x288f0d(0x21e)](this,_0x15574f),this[_0x288f0d(0x9d3)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x456)]=Window_BattleLog[_0x478a06(0x9c5)]['performMiss'],Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x243)]=function(_0x4cd1a8){const _0x56a561=_0x478a06;VisuMZ[_0x56a561(0x1a5)][_0x56a561(0x456)][_0x56a561(0x21e)](this,_0x4cd1a8),this[_0x56a561(0x9d3)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x59f)]=Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x449)],Window_BattleLog['prototype']['performRecovery']=function(_0xca2c97){const _0x42b150=_0x478a06;VisuMZ[_0x42b150(0x1a5)][_0x42b150(0x59f)][_0x42b150(0x21e)](this,_0xca2c97),this[_0x42b150(0x9d3)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x81d)]=Window_BattleLog['prototype'][_0x478a06(0x4ef)],Window_BattleLog[_0x478a06(0x9c5)]['performEvasion']=function(_0x1891d9){const _0x1201e8=_0x478a06;VisuMZ[_0x1201e8(0x1a5)][_0x1201e8(0x81d)][_0x1201e8(0x21e)](this,_0x1891d9),this[_0x1201e8(0x9d3)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x4b1)]=Window_BattleLog['prototype']['performMagicEvasion'],Window_BattleLog['prototype'][_0x478a06(0x80c)]=function(_0x1ee13b){const _0x35d98c=_0x478a06;VisuMZ[_0x35d98c(0x1a5)][_0x35d98c(0x4b1)][_0x35d98c(0x21e)](this,_0x1ee13b),this[_0x35d98c(0x9d3)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x611)]=Window_BattleLog[_0x478a06(0x9c5)]['performCounter'],Window_BattleLog[_0x478a06(0x9c5)]['performCounter']=function(_0x8aa22e){const _0x1170c7=_0x478a06;VisuMZ['BattleCore'][_0x1170c7(0x611)]['call'](this,_0x8aa22e),this[_0x1170c7(0x9d3)]();},VisuMZ['BattleCore'][_0x478a06(0x131)]=Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x7f9)],Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x7f9)]=function(_0x100715){const _0x48aaf0=_0x478a06;VisuMZ[_0x48aaf0(0x1a5)][_0x48aaf0(0x131)][_0x48aaf0(0x21e)](this,_0x100715),this[_0x48aaf0(0x9d3)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xb0e)]=Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x43b)],Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x43b)]=function(_0x612c3c,_0x345475){const _0x203272=_0x478a06;VisuMZ['BattleCore'][_0x203272(0xb0e)]['call'](this,_0x612c3c,_0x345475),this[_0x203272(0x9d3)]();},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xbca)]=Window_BattleLog['prototype'][_0x478a06(0xa74)],Window_BattleLog['prototype'][_0x478a06(0xa74)]=function(_0x74e244){const _0x361c85=_0x478a06;VisuMZ[_0x361c85(0x1a5)][_0x361c85(0xbca)][_0x361c85(0x21e)](this,_0x74e244),this['callNextMethod']();},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x880)]=function(_0x191e56,_0x45e368){const _0x37dbc5=_0x478a06;_0x191e56[_0x37dbc5(0x880)](_0x45e368),this['callNextMethod']();},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x91d)]=function(_0x205cbc,_0x286278){const _0x2f2661=_0x478a06,_0xe5c50a=_0x205cbc['attackAnimationId1']();_0xe5c50a<=0x0?SoundManager[_0x2f2661(0x6de)]():this['showNormalAnimation'](_0x286278,_0xe5c50a);},Window_BattleLog[_0x478a06(0x9c5)]['applyImmortal']=function(_0x215de7,_0x16b3cb,_0x4960c2){const _0x2ea1d0=_0x478a06,_0x33d29b=[_0x215de7][_0x2ea1d0(0x74a)](_0x16b3cb);for(const _0x310e34 of _0x33d29b){if(!_0x310e34)continue;_0x310e34[_0x2ea1d0(0x600)](_0x4960c2);}this[_0x2ea1d0(0x9d3)]();},Window_BattleLog[_0x478a06(0x9c5)]['waitCount']=function(_0x2dc20a){const _0x482fa0=_0x478a06;this[_0x482fa0(0x999)]=_0x2dc20a;},Window_BattleLog[_0x478a06(0x9c5)]['requestMotion']=function(_0xa6a16b,_0x2b381d){const _0x5f37ce=_0x478a06;for(const _0x2522ae of _0xa6a16b){if(!_0x2522ae)continue;_0x2522ae[_0x5f37ce(0x3ee)](_0x2b381d);}this[_0x5f37ce(0x9d3)]();},Window_BattleLog[_0x478a06(0x9c5)]['performMoveToPoint']=function(_0x2f7449,_0x28ebaf,_0x14d045,_0x1f7ac8,_0x354ffd,_0x582d1b){_0x2f7449['moveBattlerToPoint'](_0x28ebaf,_0x14d045,_0x1f7ac8,_0x354ffd,_0x582d1b,-0x1),this['callNextMethod']();},Window_BattleLog[_0x478a06(0x9c5)][_0x478a06(0x503)]=function(_0x5336de,_0x1b1691,_0x3c89ee,_0x4c9976,_0x37c389,_0x2fbfa9,_0x535b31){const _0x14b7cf=_0x478a06,_0x4e5a2e=Math[_0x14b7cf(0x7a1)](..._0x1b1691[_0x14b7cf(0x77a)](_0x271ab8=>_0x271ab8[_0x14b7cf(0x244)]()['_baseX']-_0x271ab8[_0x14b7cf(0x244)]()['mainSpriteWidth']()/0x2)),_0x42cb08=Math['max'](..._0x1b1691[_0x14b7cf(0x77a)](_0x389230=>_0x389230[_0x14b7cf(0x244)]()['_baseX']+_0x389230['battler']()['mainSpriteWidth']()/0x2)),_0x477c6b=Math[_0x14b7cf(0x7a1)](..._0x1b1691[_0x14b7cf(0x77a)](_0x58bf50=>_0x58bf50[_0x14b7cf(0x244)]()['_baseY']-_0x58bf50['battler']()[_0x14b7cf(0x4c9)]())),_0x10c497=Math[_0x14b7cf(0x896)](..._0x1b1691[_0x14b7cf(0x77a)](_0xae52c7=>_0xae52c7['battler']()['_baseY'])),_0x17a80e=_0x1b1691['filter'](_0x2a636a=>_0x2a636a['isActor']())[_0x14b7cf(0x496)],_0x138124=_0x1b1691[_0x14b7cf(0x4d3)](_0x1d5f5c=>_0x1d5f5c[_0x14b7cf(0x8e3)]())['length'];let _0x5055bf=0x0,_0x4865c3=0x0;if(_0x3c89ee[_0x14b7cf(0x85a)](/front/i))_0x5055bf=_0x17a80e>=_0x138124?_0x4e5a2e:_0x42cb08;else{if(_0x3c89ee[_0x14b7cf(0x85a)](/middle/i))_0x5055bf=(_0x4e5a2e+_0x42cb08)/0x2,_0x535b31=-0x1;else _0x3c89ee['match'](/back/i)&&(_0x5055bf=_0x17a80e>=_0x138124?_0x42cb08:_0x4e5a2e);}if(_0x3c89ee[_0x14b7cf(0x85a)](/head/i))_0x4865c3=_0x477c6b;else{if(_0x3c89ee['match'](/center/i)){_0x4865c3=(_0x477c6b+_0x10c497)/0x2;if(_0x5336de[_0x14b7cf(0x244)]())_0x4865c3+=_0x5336de[_0x14b7cf(0x244)]()[_0x14b7cf(0x15a)]/0x2;}else _0x3c89ee[_0x14b7cf(0x85a)](/base/i)&&(_0x4865c3=_0x10c497);}_0x5336de[_0x14b7cf(0xa53)](_0x5055bf,_0x4865c3,_0x4c9976,_0x37c389,_0x2fbfa9,_0x535b31),this[_0x14b7cf(0x9d3)]();},Window_BattleLog[_0x478a06(0x9c5)]['performJump']=function(_0x2852cd,_0x18c7cf,_0x4684f4){const _0x3a74d5=_0x478a06;for(const _0x173cf7 of _0x2852cd){if(!_0x173cf7)continue;_0x173cf7[_0x3a74d5(0x3d1)](_0x18c7cf,_0x4684f4);}this[_0x3a74d5(0x9d3)]();};function Window_BattleMultiTarget(){this['initialize'](...arguments);}Window_BattleMultiTarget[_0x478a06(0x9c5)]=Object['create'](Window_Command['prototype']),Window_BattleMultiTarget[_0x478a06(0x9c5)][_0x478a06(0x930)]=Window_BattleMultiTarget,VisuMZ[_0x478a06(0x1a5)]['Settings'][_0x478a06(0x44d)]=VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x44d)]||{},Window_BattleMultiTarget['WIDTH']=VisuMZ[_0x478a06(0x1a5)]['Settings'][_0x478a06(0x44d)][_0x478a06(0xa0c)]??0x118,Window_BattleMultiTarget[_0x478a06(0x4e3)]=VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x44d)][_0x478a06(0x745)]??0x2,Window_BattleMultiTarget['SHOW_BUTTON']=VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)]['MultiTarget']['ShowButton']??!![],Window_BattleMultiTarget['ALL_ACTORS']=VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)]['MultiTarget'][_0x478a06(0xab1)]??_0x478a06(0x810),Window_BattleMultiTarget['ALL_ENEMIES']=VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x44d)]['AllEnemiesText']??'All\x20Enemies',Window_BattleMultiTarget['ACTOR_OFFSET_X']=VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)]['MultiTarget']['ActorOffsetX']??0x0,Window_BattleMultiTarget['ACTOR_OFFSET_Y']=VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x44d)]['ActorOffsetY']??0x0,Window_BattleMultiTarget[_0x478a06(0x938)]=VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x44d)][_0x478a06(0x34a)]??0x0,Window_BattleMultiTarget['ENEMY_OFFSET_Y']=VisuMZ['BattleCore'][_0x478a06(0x468)][_0x478a06(0x44d)][_0x478a06(0x33f)]??0x0,Window_BattleMultiTarget['prototype'][_0x478a06(0x552)]=function(_0x273736,_0x497f5a){const _0x5ae2a3=_0x478a06;this[_0x5ae2a3(0x205)]=_0x497f5a,Window_Command[_0x5ae2a3(0x9c5)]['initialize'][_0x5ae2a3(0x21e)](this,_0x273736),this[_0x5ae2a3(0x92b)](Window_BattleMultiTarget[_0x5ae2a3(0x4e3)]),this[_0x5ae2a3(0x3c3)](),this[_0x5ae2a3(0x4be)](),this[_0x5ae2a3(0x2f4)]();},Window_BattleMultiTarget[_0x478a06(0x9c5)]['forActor']=function(){const _0x3b9d71=_0x478a06;return this[_0x3b9d71(0x205)];},Window_BattleMultiTarget[_0x478a06(0x9c5)][_0x478a06(0x313)]=function(){const _0x102d93=_0x478a06;let _0x3d3e7a=this[_0x102d93(0xd4)]()?Window_BattleMultiTarget['ALL_ACTORS']:Window_BattleMultiTarget[_0x102d93(0x8ca)];if(Imported[_0x102d93(0x1a1)]&&Window_BattleMultiTarget[_0x102d93(0x2f6)]){this[_0x102d93(0x617)]=this[_0x102d93(0xd4)]()?'pagedown':_0x102d93(0xaa8),this[_0x102d93(0x626)]=TextManager[_0x102d93(0x31d)](this[_0x102d93(0x617)]);const _0x499d9b=VisuMZ[_0x102d93(0x71a)][_0x102d93(0x468)]['ButtonAssist'][_0x102d93(0x73f)];_0x3d3e7a=_0x499d9b[_0x102d93(0x177)](this[_0x102d93(0x626)],_0x3d3e7a);}this['addCommand'](_0x3d3e7a,_0x102d93(0x249));},Window_BattleMultiTarget['prototype'][_0x478a06(0x817)]=function(_0x4b9868){const _0x1085aa=_0x478a06,_0x48a207=this[_0x1085aa(0x372)](_0x4b9868);this['resetTextColor'](),this[_0x1085aa(0x1a7)](this[_0x1085aa(0xde)](_0x4b9868));const _0x2df0a0=this[_0x1085aa(0xaf1)](_0x4b9868),_0x48029f=this[_0x1085aa(0x799)](_0x2df0a0)['width'],_0x21fe5f=_0x48a207['x']+Math[_0x1085aa(0xa76)]((_0x48a207[_0x1085aa(0xaad)]-_0x48029f)/0x2);this[_0x1085aa(0x31a)](_0x2df0a0,_0x21fe5f,_0x48a207['y'],_0x48a207[_0x1085aa(0xaad)]);},Window_BattleMultiTarget[_0x478a06(0x9c5)][_0x478a06(0x865)]=function(){const _0xb0dbc6=_0x478a06;Window_Command[_0xb0dbc6(0x9c5)][_0xb0dbc6(0x865)][_0xb0dbc6(0x21e)](this),this[_0xb0dbc6(0x435)](),this[_0xb0dbc6(0x3e1)]();},Window_BattleMultiTarget[_0x478a06(0x9c5)]['updateVisibility']=function(){const _0x320947=_0x478a06;this[_0x320947(0xbbc)]=this[_0x320947(0xb5c)]();},Window_BattleMultiTarget['prototype'][_0x478a06(0xb5c)]=function(){const _0x54c660=_0x478a06,_0x7969e9=BattleManager[_0x54c660(0x11a)](),_0x35e46f=_0x7969e9&&_0x7969e9[_0x54c660(0x5e4)]();if(!_0x35e46f)return![];const _0x1024ca=SceneManager[_0x54c660(0x143)];if(this[_0x54c660(0xd4)]()){if(_0x1024ca[_0x54c660(0xafe)]['active']&&_0x1024ca[_0x54c660(0xafe)]['_handlers'][_0x54c660(0x1c1)])return!![];if(_0x1024ca['_enemyWindow']['active']&&_0x1024ca[_0x54c660(0x9ef)]['_handlers']['pagedown'])return!![];}else{if(_0x1024ca[_0x54c660(0x9ef)][_0x54c660(0x4cb)]&&_0x1024ca[_0x54c660(0x9ef)][_0x54c660(0x394)][_0x54c660(0xaa8)])return!![];}return![];},Window_BattleMultiTarget['prototype']['updateKeyboardKeys']=function(){const _0x23b5fe=_0x478a06;if(!Imported[_0x23b5fe(0x1a1)])return;this['_buttonText']!==TextManager[_0x23b5fe(0x31d)](this[_0x23b5fe(0x617)])&&this[_0x23b5fe(0x85c)]();},Window_BattleMultiTarget[_0x478a06(0x9c5)][_0x478a06(0x215)]=function(){const _0x351307=_0x478a06;if(this['visible']&&TouchInput[_0x351307(0x246)]()){const _0x992ee2=this[_0x351307(0x16e)]();if(_0x992ee2>=0x0){const _0xd94036=this['forActor']()?_0x351307(0x1c1):_0x351307(0xaa8);Input['virtualClick'](_0xd94036);}}};function Window_DamageCounter(){const _0x44fff6=_0x478a06;this[_0x44fff6(0x552)](...arguments);}Window_DamageCounter[_0x478a06(0x9c5)]=Object['create'](Window_Base[_0x478a06(0x9c5)]),Window_DamageCounter['prototype']['constructor']=Window_DamageCounter,Window_DamageCounter[_0x478a06(0xb9d)]={'enabled':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0xbba)][_0x478a06(0x35f)]??!![],'customFontFace':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)]['ComboWindow'][_0x478a06(0x1ab)]??'','textAlign':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0xbba)][_0x478a06(0x4bf)]??_0x478a06(0x78a),'hitsDmgFmt':VisuMZ['BattleCore'][_0x478a06(0x468)][_0x478a06(0xbba)]['hitsDmgFmt']??_0x478a06(0x5f5),'hitsHealFmt':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0xbba)]['hitsHealFmt']??'\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','totalDmgFmt':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0xbba)][_0x478a06(0x839)]??_0x478a06(0x708),'totalHealFmt':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0xbba)][_0x478a06(0x10e)]??_0x478a06(0x541),'fadeShiftX':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0xbba)][_0x478a06(0x5ed)]??-0x2,'fadeShiftY':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0xbba)]['fadeShiftY']??0x0,'positionOffsetX':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0xbba)]['PosOffsetX']??0x0,'positionOffsetY':VisuMZ[_0x478a06(0x1a5)]['Settings'][_0x478a06(0xbba)][_0x478a06(0x42e)]??0x0,'updateDuration':VisuMZ['BattleCore'][_0x478a06(0x468)]['ComboWindow']['updateDuration']??0x14,'minimumStayDuration':VisuMZ[_0x478a06(0x1a5)]['Settings'][_0x478a06(0xbba)]['minimumStayDuration']??0x28,'minimumHits':VisuMZ['BattleCore'][_0x478a06(0x468)][_0x478a06(0xbba)][_0x478a06(0x955)]??0x1,'opacitySpeed':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)]['ComboWindow'][_0x478a06(0xa8d)]??0x10},Window_DamageCounter['prototype']['initialize']=function(_0x2a5680){const _0x3015fc=_0x478a06;this['_visibleDuration']=0x0,Window_Base['prototype'][_0x3015fc(0x552)][_0x3015fc(0x21e)](this,_0x2a5680),this[_0x3015fc(0x70b)]=_0x2a5680['x'],this[_0x3015fc(0x2a1)]=_0x2a5680['y'],this['resetCounter'](),this[_0x3015fc(0x92b)](0x2);},Window_DamageCounter[_0x478a06(0x9c5)]['resetCounter']=function(){const _0xe4649=_0x478a06;this[_0xe4649(0xbb6)]=0x0,this['_totalHits']=0x0,this[_0xe4649(0x936)]=0x0,this[_0xe4649(0x818)]=0x0,this[_0xe4649(0x214)]=0x0;},Window_DamageCounter['prototype'][_0x478a06(0x140)]=function(){const _0x4016dd=_0x478a06;Window_Base[_0x4016dd(0x9c5)][_0x4016dd(0x140)]['call'](this);const _0x341a77=Window_DamageCounter[_0x4016dd(0xb9d)];_0x341a77['customFontFace']?this[_0x4016dd(0x2b9)][_0x4016dd(0x451)]=_0x341a77[_0x4016dd(0xa8f)]:this[_0x4016dd(0x2b9)]['fontFace']=$gameSystem[_0x4016dd(0x961)]();};var $comboWindowReset=function(){const _0x194edb=_0x478a06;if(!SceneManager[_0x194edb(0x785)]())return;const _0x36b282=SceneManager[_0x194edb(0x143)]['_damageCounterWindow'];if(_0x36b282)_0x36b282[_0x194edb(0x6c1)]();};Window_DamageCounter[_0x478a06(0x9c5)][_0x478a06(0xa6f)]=function(_0x3ff322){const _0x51d16f=_0x478a06;this['_targetHits']+=Math[_0x51d16f(0x801)](_0x3ff322);const _0x2717d1=Window_DamageCounter[_0x51d16f(0xb9d)];this['_updateDuration']=_0x2717d1[_0x51d16f(0x606)],this[_0x51d16f(0x818)]>=_0x2717d1[_0x51d16f(0x955)]&&(this[_0x51d16f(0x168)]=_0x2717d1[_0x51d16f(0x752)]);};var $comboWindowIncreaseHits=function(_0x4ca0db){const _0x3d2bae=_0x478a06;if(!SceneManager['isSceneBattle']())return;const _0x4ae7fa=SceneManager[_0x3d2bae(0x143)]['_damageCounterWindow'];if(_0x4ae7fa)_0x4ae7fa[_0x3d2bae(0xa6f)](_0x4ca0db);};Window_DamageCounter[_0x478a06(0x9c5)]['increaseTotal']=function(_0xbcd0f4){const _0x5be8d8=_0x478a06;this['_targetDamage']+=Math['round'](_0xbcd0f4);const _0x5c34ef=Window_DamageCounter[_0x5be8d8(0xb9d)];this[_0x5be8d8(0xbb6)]=_0x5c34ef[_0x5be8d8(0x606)],this[_0x5be8d8(0x818)]>=_0x5c34ef['minimumHits']&&(this[_0x5be8d8(0x168)]=_0x5c34ef[_0x5be8d8(0x752)]);};var $comboWindowIncreaseDamage=function(_0x246c71){const _0x275fcc=_0x478a06;if(!SceneManager[_0x275fcc(0x785)]())return;const _0x1ed95c=SceneManager['_scene'][_0x275fcc(0x99a)];if(_0x1ed95c)_0x1ed95c[_0x275fcc(0x28e)](_0x246c71);},$comboWindowIncreaseHealing=function(_0x3fdacb){const _0x305ce5=_0x478a06;if(!SceneManager[_0x305ce5(0x785)]())return;const _0x1d71b8=SceneManager[_0x305ce5(0x143)]['_damageCounterWindow'];if(_0x1d71b8)_0x1d71b8[_0x305ce5(0x28e)](-_0x3fdacb);};VisuMZ[_0x478a06(0x1a5)]['Scene_Battle_createAllWindows_ComboWindow']=Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x5c1)],Scene_Battle[_0x478a06(0x9c5)]['createAllWindows']=function(){const _0xe3dce2=_0x478a06;this[_0xe3dce2(0x893)](),VisuMZ['BattleCore'][_0xe3dce2(0x1c4)]['call'](this);},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0x893)]=function(){const _0x5b6e06=_0x478a06;if(!Window_DamageCounter['SETTINGS'][_0x5b6e06(0x66d)])return;const _0x3d2e2a=this[_0x5b6e06(0xb67)](),_0x1b31d2=new Window_DamageCounter(_0x3d2e2a);this[_0x5b6e06(0x530)](_0x1b31d2),this[_0x5b6e06(0x99a)]=_0x1b31d2;},Scene_Battle[_0x478a06(0x9c5)][_0x478a06(0xb67)]=function(){const _0x5c0874=_0x478a06;if(VisuMZ['BattleCore']['Settings'][_0x5c0874(0xbba)][_0x5c0874(0x891)])return VisuMZ[_0x5c0874(0x1a5)]['Settings'][_0x5c0874(0xbba)][_0x5c0874(0x891)][_0x5c0874(0x21e)](this);const _0x3fc4bf=Math[_0x5c0874(0x4f5)](Graphics['width']/0x4),_0x371591=this[_0x5c0874(0x9a1)](0x2,!![]),_0x17eb2b=0x0+this['comboWindowOffsetX'](),_0x33e7cb=Math[_0x5c0874(0x801)](Graphics[_0x5c0874(0xb21)]*0x1/0x3)+this['comboWindowOffsetY']();return new Rectangle(_0x17eb2b,_0x33e7cb,_0x3fc4bf,_0x371591);},Scene_Battle['prototype'][_0x478a06(0x70a)]=function(){const _0x3a4386=_0x478a06;return Window_DamageCounter[_0x3a4386(0xb9d)][_0x3a4386(0x232)];},Scene_Battle['prototype'][_0x478a06(0xb58)]=function(){const _0x5df4df=_0x478a06;return Window_DamageCounter[_0x5df4df(0xb9d)]['positionOffsetY'];},Window_DamageCounter[_0x478a06(0x9c5)][_0x478a06(0x865)]=function(){const _0x553c97=_0x478a06;Window_Base[_0x553c97(0x9c5)]['update'][_0x553c97(0x21e)](this),this[_0x553c97(0x849)](),this[_0x553c97(0x2df)]();},Window_DamageCounter[_0x478a06(0x9c5)][_0x478a06(0x849)]=function(){const _0x237533=_0x478a06;if(this[_0x237533(0xbb6)]<=0x0)return;const _0x427c43=this[_0x237533(0xbb6)];this[_0x237533(0xaee)]=this[_0x237533(0x818)],this[_0x237533(0x936)]=(this['_totalDamage']*(_0x427c43-0x1)+this[_0x237533(0x214)])/_0x427c43,this['_updateDuration']--,this['_updateDuration']<=0x0&&(this['_totalHits']=this['_targetHits'],this[_0x237533(0x936)]=this[_0x237533(0x214)]),this[_0x237533(0x85c)]();},Window_DamageCounter['prototype'][_0x478a06(0x2df)]=function(){const _0x103559=_0x478a06,_0x132c77=Window_DamageCounter[_0x103559(0xb9d)],_0x1a6c84=this[_0x103559(0xb5c)](),_0x2b679a=_0x132c77[_0x103559(0xa8d)]||0x1;if(_0x1a6c84&&this['contentsOpacity']<0xff)this[_0x103559(0x68d)]+=_0x2b679a;else!_0x1a6c84&&this[_0x103559(0x68d)]>0x0&&(this[_0x103559(0x68d)]-=_0x2b679a,this['x']+=_0x132c77['fadeShiftX']||0x0,this['y']+=_0x132c77[_0x103559(0x788)]||0x0);},Window_DamageCounter[_0x478a06(0x9c5)][_0x478a06(0xb5c)]=function(){const _0x291aa6=_0x478a06,_0x12421b=Window_DamageCounter['SETTINGS'];if(this[_0x291aa6(0x818)]>=_0x12421b[_0x291aa6(0x955)])return!![];if(this[_0x291aa6(0x168)]-->0x0)return!![];return![];},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x8de)]=Game_Action[_0x478a06(0x9c5)][_0x478a06(0x316)],Game_Action[_0x478a06(0x9c5)][_0x478a06(0x316)]=function(_0xd035f1,_0x408b70){const _0x46dc22=_0x478a06;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x408b70),VisuMZ['BattleCore'][_0x46dc22(0x8de)]['call'](this,_0xd035f1,_0x408b70);},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x616)]=BattleManager[_0x478a06(0x793)],BattleManager[_0x478a06(0x793)]=function(){const _0x3c5896=_0x478a06;$comboWindowReset(),VisuMZ[_0x3c5896(0x1a5)][_0x3c5896(0x616)][_0x3c5896(0x21e)](this);},Window_DamageCounter[_0x478a06(0x9c5)][_0x478a06(0x85c)]=function(){const _0x530b30=_0x478a06;this[_0x530b30(0x2b9)][_0x530b30(0x87d)](),this['drawComboText'](),this['x']=this[_0x530b30(0x70b)],this['y']=this[_0x530b30(0x2a1)];},Window_DamageCounter['prototype'][_0x478a06(0xf6)]=function(){const _0x505dbe=_0x478a06,_0x4d4f39=Window_DamageCounter[_0x505dbe(0xb9d)];return _0x4d4f39[_0x505dbe(0xada)]||_0x505dbe(0x78a);},Window_DamageCounter['prototype']['hitText']=function(){const _0xd0fa1d=_0x478a06,_0x14e67c=Window_DamageCounter[_0xd0fa1d(0xb9d)];let _0x167255=this[_0xd0fa1d(0x936)]>=0x0?_0x14e67c[_0xd0fa1d(0x505)]:_0x14e67c['hitsHealFmt'];return _0x167255[_0xd0fa1d(0x177)](Math[_0xd0fa1d(0x42d)](Math[_0xd0fa1d(0x4f5)](this[_0xd0fa1d(0xaee)])));},Window_DamageCounter[_0x478a06(0x9c5)][_0x478a06(0x15e)]=function(){const _0x14c76c=_0x478a06,_0x85f5ed=Window_DamageCounter['SETTINGS'];let _0x1b1c52=this['_totalDamage']>=0x0?_0x85f5ed[_0x14c76c(0x839)]:_0x85f5ed[_0x14c76c(0x10e)];return _0x1b1c52[_0x14c76c(0x177)](Math[_0x14c76c(0x42d)](Math[_0x14c76c(0x801)](this[_0x14c76c(0x936)])));},Window_DamageCounter[_0x478a06(0x9c5)][_0x478a06(0x845)]=function(){const _0xb77196=_0x478a06;if(VisuMZ[_0xb77196(0x1a5)]['Settings'][_0xb77196(0xbba)][_0xb77196(0x3e6)])return VisuMZ[_0xb77196(0x1a5)][_0xb77196(0x468)][_0xb77196(0xbba)]['ComboWindow_DrawJS'][_0xb77196(0x21e)](this);let _0x26135d=0x0,_0x41b140=0x0;const _0x4153cd=this[_0xb77196(0x7a0)](),_0x74fc7f=this['textSizeEx'](_0x4153cd);if(this[_0xb77196(0xf6)]()===_0xb77196(0x58d))_0x26135d=this[_0xb77196(0x25f)]-this['itemPadding']()-_0x74fc7f[_0xb77196(0xaad)];else this[_0xb77196(0xf6)]()===_0xb77196(0x11d)?_0x26135d=Math[_0xb77196(0xa76)]((this[_0xb77196(0x25f)]-_0x74fc7f['width'])/0x2):_0x26135d=this['itemPadding']();this[_0xb77196(0x31a)](_0x4153cd,_0x26135d,_0x41b140),_0x41b140+=Math['ceil'](this[_0xb77196(0xef)]()*0x2/0x3);const _0x3f0a27=this[_0xb77196(0x15e)](),_0x28be74=this[_0xb77196(0x799)](_0x3f0a27);if(this['textAlignment']()==='right')_0x26135d=this[_0xb77196(0x25f)]-this[_0xb77196(0x2b3)]()-_0x28be74[_0xb77196(0xaad)];else this[_0xb77196(0xf6)]()===_0xb77196(0x11d)?_0x26135d=Math[_0xb77196(0xa76)]((this[_0xb77196(0x25f)]-_0x28be74[_0xb77196(0xaad)])/0x2):_0x26135d=this[_0xb77196(0x2b3)]();this[_0xb77196(0x31a)](_0x3f0a27,_0x26135d,_0x41b140);};function Window_InBattleStatus(){const _0x396583=_0x478a06;this[_0x396583(0x552)](...arguments);}Window_InBattleStatus[_0x478a06(0x9c5)]=Object[_0x478a06(0x47b)](Window_StatusBase['prototype']),Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x930)]=Window_InBattleStatus,Window_InBattleStatus[_0x478a06(0xb9d)]={'bgType':VisuMZ['BattleCore'][_0x478a06(0x468)][_0x478a06(0x99d)][_0x478a06(0x48c)]??0x0,'statusGraphic':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x99d)]['StatusGraphic']??_0x478a06(0x657),'statusHelpDesc':VisuMZ['BattleCore']['Settings']['InBattleStatus'][_0x478a06(0x1cb)]??_0x478a06(0x885),'pageButtons':VisuMZ[_0x478a06(0x1a5)]['Settings'][_0x478a06(0x99d)][_0x478a06(0xb89)]??!![],'pageButtonPosition':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x99d)][_0x478a06(0xa6b)]??'left','pageOffsetX':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x99d)][_0x478a06(0x1cc)]??0x0,'pageOffsetY':VisuMZ[_0x478a06(0x1a5)]['Settings'][_0x478a06(0x99d)][_0x478a06(0x7ca)]??0x0,'buffValueFmt':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x99d)][_0x478a06(0xa97)]??_0x478a06(0xfb),'debuffValueFmt':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x99d)][_0x478a06(0xac9)]??'▼%1','enemyStatus':VisuMZ['BattleCore'][_0x478a06(0x468)][_0x478a06(0x99d)]['enemyStatus']??!![],'enemyShowLevel':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x99d)]['enemyShowLevel']??!![],'enemyHpGaugeRate':!![],'enemyMpGaugeRate':!![],'enemyTpGaugeRate':!![],'enemyHiddenParameter':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x99d)][_0x478a06(0x835)]??_0x478a06(0xa55),'enemyShowParametersAlways':VisuMZ[_0x478a06(0x1a5)]['Settings']['InBattleStatus'][_0x478a06(0x5b0)]??![],'enemyShowParametersIfBattleTest':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x99d)]['enemyShowParametersIfBattleTest']??!![],'enemyShowParametersIfDefeated':VisuMZ[_0x478a06(0x1a5)]['Settings'][_0x478a06(0x99d)][_0x478a06(0x952)]??!![]},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x552)]=function(_0x14b9f5){const _0x59faaa=_0x478a06;Window_StatusBase[_0x59faaa(0x9c5)][_0x59faaa(0x552)][_0x59faaa(0x21e)](this,_0x14b9f5),this[_0x59faaa(0x92b)](Window_InBattleStatus[_0x59faaa(0xb9d)]['bgType']),this[_0x59faaa(0x8b8)](),this[_0x59faaa(0x9e7)](),this[_0x59faaa(0x41b)]();},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x1c9)]=function(_0x346f5e){const _0x17321d=_0x478a06;this[_0x17321d(0xbe5)]=_0x346f5e,this[_0x17321d(0x85c)](),this[_0x17321d(0x87c)]&&this[_0x17321d(0x87c)][_0x17321d(0x1c9)](_0x346f5e);},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x1fe)]=function(){const _0x31c310=_0x478a06;Window_StatusBase['prototype'][_0x31c310(0x1fe)][_0x31c310(0x21e)](this);if(this[_0x31c310(0x87c)])this[_0x31c310(0x87c)][_0x31c310(0x1fe)]();this[_0x31c310(0x9ad)](),Imported[_0x31c310(0x719)]&&SceneManager[_0x31c310(0x6a7)](null);},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x3ed)]=function(){const _0xdfdf28=_0x478a06;Window_StatusBase[_0xdfdf28(0x9c5)][_0xdfdf28(0x3ed)][_0xdfdf28(0x21e)](this);if(this[_0xdfdf28(0x87c)])this['_statesWindow']['close']();},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x67a)]=function(_0x10f352){this['_returnWindow']=_0x10f352;},Window_InBattleStatus['prototype'][_0x478a06(0x40a)]=function(){const _0x3a1081=_0x478a06;return this[_0x3a1081(0xb36)]||SceneManager[_0x3a1081(0x143)][_0x3a1081(0xac6)];},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x211)]=function(){const _0x475748=_0x478a06;Window_StatusBase[_0x475748(0x9c5)][_0x475748(0x211)][_0x475748(0x21e)](this),this[_0x475748(0x1f2)]();},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x1f2)]=function(){const _0x1ca1f2=_0x478a06;for(const _0x502dcf of $gameParty[_0x1ca1f2(0x645)]()){if(!_0x502dcf)continue;_0x502dcf[_0x1ca1f2(0x9fd)]()&&ImageManager[_0x1ca1f2(0x82c)](_0x502dcf[_0x1ca1f2(0x9fd)]()),_0x502dcf[_0x1ca1f2(0x676)]()&&ImageManager[_0x1ca1f2(0xa81)](_0x502dcf[_0x1ca1f2(0x676)]()),_0x502dcf[_0x1ca1f2(0x254)]&&ImageManager[_0x1ca1f2(0xbc4)](_0x502dcf[_0x1ca1f2(0x254)]());}},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x8b8)]=function(){const _0x3d50fa=_0x478a06;this[_0x3d50fa(0x6dc)]=new Sprite(),this['_enemySprite'][_0x3d50fa(0x488)]['x']=0.5,this[_0x3d50fa(0x6dc)][_0x3d50fa(0x488)]['y']=0x1,this['addChild'](this[_0x3d50fa(0x6dc)]);},Window_InBattleStatus['prototype'][_0x478a06(0x9e7)]=function(){const _0x2ed8c7=_0x478a06,_0x580629=this[_0x2ed8c7(0x515)](),_0x1d2760=new Window_InBattleStatusStates(_0x580629);this['addChild'](_0x1d2760),_0x1d2760[_0x2ed8c7(0x627)](SceneManager[_0x2ed8c7(0x143)][_0x2ed8c7(0x91f)]),this[_0x2ed8c7(0x87c)]=_0x1d2760;},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x515)]=function(){const _0x405856=_0x478a06,_0x2350ea=Window_InBattleStatusStates[_0x405856(0xb9d)][_0x405856(0x30f)],_0x28a348=Math[_0x405856(0x7a1)](_0x2350ea,Math[_0x405856(0xa76)](this[_0x405856(0xaad)]/0x2)),_0x425c81=Graphics[_0x405856(0xb0a)]>0x44c?this[_0x405856(0x15a)]:this[_0x405856(0xef)]()*0x4+this[_0x405856(0x12f)]*0x2,_0x185428=this[_0x405856(0xaad)]-_0x28a348,_0x29327a=this['height']-_0x425c81;return new Rectangle(_0x185428,_0x29327a,_0x28a348,_0x425c81);},Window_InBattleStatus[_0x478a06(0x9c5)]['createPageButtons']=function(){const _0x19b84e=_0x478a06;if(!ConfigManager[_0x19b84e(0x85e)])return;if(!Window_InBattleStatus[_0x19b84e(0xb9d)][_0x19b84e(0xb89)])return;this[_0x19b84e(0xa85)]=new Sprite_Button(_0x19b84e(0xaa8)),this['_pageupButton']['x']=this[_0x19b84e(0xb28)]()+Window_InBattleStatus['SETTINGS'][_0x19b84e(0x1cc)],this[_0x19b84e(0xa85)]['y']=this[_0x19b84e(0x92c)]()+Window_InBattleStatus['SETTINGS'][_0x19b84e(0x7ca)];const _0x1b68f7=this[_0x19b84e(0xa85)]['x']+this[_0x19b84e(0xa85)][_0x19b84e(0xaad)];this['_pagedownButton']=new Sprite_Button(_0x19b84e(0x1c1)),this['_pagedownButton']['x']=_0x1b68f7+0x4,this[_0x19b84e(0xbd9)]['y']=this[_0x19b84e(0xa85)]['y'],this['addChild'](this[_0x19b84e(0xa85)]),this['addChild'](this[_0x19b84e(0xbd9)]),this[_0x19b84e(0xa85)][_0x19b84e(0x97d)](this[_0x19b84e(0xaf0)]['bind'](this)),this[_0x19b84e(0xbd9)]['setClickHandler'](this[_0x19b84e(0xb09)][_0x19b84e(0x543)](this));},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0xb28)]=function(){const _0x5ee85d=_0x478a06;if(Graphics['boxWidth']>0x44c&&Graphics[_0x5ee85d(0xb21)]>0x2bc){if(Window_InBattleStatus[_0x5ee85d(0xb9d)][_0x5ee85d(0xa6b)]===_0x5ee85d(0x78a)){let _0x33f7fd=Math[_0x5ee85d(0x4f5)]((-this['x']-0x64)/0x2);if(_0x33f7fd>=-0x64)_0x33f7fd=this[_0x5ee85d(0x12f)];return _0x33f7fd;}else{const _0x45c896=Graphics[_0x5ee85d(0xb0a)]-this['x']-this[_0x5ee85d(0xaad)];let _0x11fa27=Math[_0x5ee85d(0xa76)]((_0x45c896-0x64)/0x2)+this['width'];return _0x11fa27;}}else return this[_0x5ee85d(0xaad)]-0x64-this[_0x5ee85d(0x12f)]/0x2;},Window_InBattleStatus[_0x478a06(0x9c5)]['pageButtonY']=function(){const _0x53bfb9=_0x478a06;return Graphics['boxWidth']>0x44c&&Graphics[_0x53bfb9(0xb21)]>0x2bc?this[_0x53bfb9(0x15a)]-0x30-this['padding']:0x30+this[_0x53bfb9(0x12f)];},Window_InBattleStatus[_0x478a06(0x9c5)]['previousActor']=function(){const _0x532456=_0x478a06;let _0xb674b3=this[_0x532456(0x9c6)]();if(_0xb674b3[_0x532456(0x496)]<=0x1&&!Window_InBattleStatus[_0x532456(0xb9d)][_0x532456(0x63a)])return;let _0x223e38=_0xb674b3[_0x532456(0x960)](this[_0x532456(0xbe5)]);_0x223e38--;_0x223e38<0x0&&(Window_InBattleStatus[_0x532456(0xb9d)][_0x532456(0x63a)]&&(_0xb674b3=this[_0x532456(0x9c6)](!![])),_0x223e38=_0xb674b3[_0x532456(0x496)]-0x1);const _0x3d9adc=_0xb674b3[_0x223e38];this[_0x532456(0x1c9)](_0x3d9adc),SoundManager['playCursor']();},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0xb09)]=function(){const _0x31c3ed=_0x478a06;let _0x2cd3a4=this[_0x31c3ed(0x9c6)]();if(_0x2cd3a4[_0x31c3ed(0x496)]<=0x1&&!Window_InBattleStatus['SETTINGS'][_0x31c3ed(0x63a)])return;let _0x5a8be7=_0x2cd3a4[_0x31c3ed(0x960)](this['_battler']);_0x5a8be7++;_0x5a8be7>=_0x2cd3a4[_0x31c3ed(0x496)]&&(Window_InBattleStatus[_0x31c3ed(0xb9d)][_0x31c3ed(0x63a)]&&(_0x2cd3a4=this[_0x31c3ed(0x9c6)](!![])),_0x5a8be7=0x0);const _0x483fa9=_0x2cd3a4[_0x5a8be7];this['setBattler'](_0x483fa9),SoundManager[_0x31c3ed(0x59c)]();},Window_InBattleStatus['prototype'][_0x478a06(0x9c6)]=function(_0x44f470){const _0x2115af=_0x478a06;let _0x15888d=[];const _0x36570c=_0x44f470?this[_0x2115af(0xbe5)][_0x2115af(0x2fb)]():this[_0x2115af(0xbe5)]['friendsUnit']();return _0x36570c===$gameParty?_0x15888d=$gameParty[_0x2115af(0x6dd)]():_0x15888d=$gameTroop[_0x2115af(0x7bb)](),_0x15888d[_0x2115af(0x553)](null);},Window_InBattleStatus[_0x478a06(0x9c5)]['update']=function(){const _0xec7472=_0x478a06;Window_Base[_0xec7472(0x9c5)][_0xec7472(0x865)][_0xec7472(0x21e)](this),this[_0xec7472(0xb44)]();},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0xb44)]=function(){const _0x514bee=_0x478a06;if(this[_0x514bee(0x920)]()){if(this['isCancelTriggered']())return this['processCancel']();if(Input[_0x514bee(0x668)](_0x514bee(0x58d)))return this[_0x514bee(0xb09)]();if(Input[_0x514bee(0x668)]('left'))return this[_0x514bee(0xaf0)]();}},SoundManager[_0x478a06(0x59c)]=function(){const _0x2e3cdb=_0x478a06;this[_0x2e3cdb(0x63d)](0x0);},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x920)]=function(){return this['isOpen']()&&this['visible'];},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x9b0)]=function(){const _0x2d6e63=_0x478a06;if(Input[_0x2d6e63(0x45d)](_0x2d6e63(0x28a)))return!![];if(TouchInput[_0x2d6e63(0x86e)]())return!![];return![];},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x24e)]=function(){const _0x3f2f8f=_0x478a06;SoundManager[_0x3f2f8f(0x819)](),this[_0x3f2f8f(0x3c3)](),this[_0x3f2f8f(0x87c)]&&(this[_0x3f2f8f(0x87c)][_0x3f2f8f(0x2f4)](),this[_0x3f2f8f(0x87c)][_0x3f2f8f(0x3c3)]()),SceneManager[_0x3f2f8f(0x143)][_0x3f2f8f(0xa44)]();},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x9ad)]=function(){const _0x221dd8=_0x478a06;if(!this[_0x221dd8(0xa85)])return;if(!this[_0x221dd8(0xbd9)])return;const _0x19b3f1=$gameParty[_0x221dd8(0x6dd)]()['length']>0x0||Window_InBattleStatus[_0x221dd8(0xb9d)][_0x221dd8(0x63a)];this[_0x221dd8(0xa85)]['visible']=_0x19b3f1,this[_0x221dd8(0xbd9)][_0x221dd8(0xbbc)]=_0x19b3f1;},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x85c)]=function(){const _0x293c64=_0x478a06;Window_StatusBase[_0x293c64(0x9c5)][_0x293c64(0x85c)][_0x293c64(0x21e)](this);if(this[_0x293c64(0x6dc)])this[_0x293c64(0x6dc)][_0x293c64(0x4be)]();this[_0x293c64(0x2b9)][_0x293c64(0x87d)](),this[_0x293c64(0x789)][_0x293c64(0x87d)]();if(!this['_battler'])return;this[_0x293c64(0x65c)]();},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x65c)]=function(){const _0x3f7559=_0x478a06;if(VisuMZ[_0x3f7559(0x1a5)]['Settings'][_0x3f7559(0x99d)][_0x3f7559(0xa3c)])return VisuMZ[_0x3f7559(0x1a5)][_0x3f7559(0x468)][_0x3f7559(0x99d)]['StatusWindow_DrawJS'][_0x3f7559(0x21e)](this);{const _0x34d433=this[_0x3f7559(0x5ca)]()/0x2,_0x3407ba=ImageManager['faceHeight'],_0x5c8c03=_0x3407ba/0x2-this[_0x3f7559(0xef)]()*1.5;this[_0x3f7559(0x276)](this['_battler'],_0x34d433+0x1,0x0,ImageManager['faceWidth'],_0x3407ba),this[_0x3f7559(0x2fe)](this[_0x3f7559(0xbe5)],_0x34d433+0xb4,_0x5c8c03);}{let _0x28d99f=this[_0x3f7559(0xa35)](),_0x198eb4=0x0,_0x57c5c1=Math[_0x3f7559(0x4f5)](this[_0x3f7559(0xa35)]()/0x2),_0x4f2c13=0x0;const _0x36106d=this[_0x3f7559(0x191)]();let _0x234da5=_0x198eb4;const _0x31ca06=this[_0x3f7559(0x983)]-ImageManager['faceHeight'],_0x19e89a=Math[_0x3f7559(0x4f5)](_0x36106d['length']/0x2)*this['lineHeight']();let _0x3302bc=Math['ceil']((_0x31ca06-_0x19e89a)/0x2)+ImageManager[_0x3f7559(0x8cc)],_0x307432=Math[_0x3f7559(0xa76)](_0x28d99f/0x2);this['_statesWindow']['y']!==0x0&&(this[_0x3f7559(0x87c)]['y']=_0x3302bc);for(const _0x1d95b2 of _0x36106d){this[_0x3f7559(0xb85)](_0x234da5,_0x3302bc,_0x307432,this['lineHeight']()),this[_0x3f7559(0x6b8)](_0x1d95b2,_0x234da5,_0x3302bc,_0x307432),_0x4f2c13++,_0x4f2c13%0x2===0x0?(_0x234da5=_0x198eb4,_0x3302bc+=this[_0x3f7559(0xef)]()):_0x234da5=_0x57c5c1;}}},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x13e)]=function(){const _0x20cab7=_0x478a06;return VisuMZ['BattleCore'][_0x20cab7(0x468)][_0x20cab7(0x99d)][_0x20cab7(0x78e)];},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x276)]=function(_0x59cd3c,_0x202edf,_0x5bd67d,_0x1f8e75,_0x453095){const _0x26c40b=_0x478a06;if(_0x59cd3c[_0x26c40b(0x847)]())switch(this[_0x26c40b(0x13e)]()){case _0x26c40b(0x884):break;case'sprite':this[_0x26c40b(0x63c)](_0x59cd3c,_0x202edf,_0x5bd67d+0x1,_0x1f8e75,_0x453095-0x2);break;case _0x26c40b(0x8a3):this['drawItemActorSvBattler'](_0x59cd3c,_0x202edf,_0x5bd67d+0x1,_0x1f8e75,_0x453095-0x2);break;default:this['drawItemActorFace'](_0x59cd3c,_0x202edf,_0x5bd67d,_0x1f8e75,_0x453095);break;}else this[_0x26c40b(0x295)](_0x59cd3c,_0x202edf,_0x5bd67d,_0x1f8e75,_0x453095);},Window_InBattleStatus['prototype'][_0x478a06(0xb05)]=function(_0xf4f271,_0x2c81e2,_0x3926b9,_0x46afa6,_0x288507){const _0x46e1c9=_0x478a06;_0x46afa6=_0x46afa6||ImageManager['faceWidth'],_0x288507=_0x288507||ImageManager[_0x46e1c9(0x8cc)];const _0x40b362=ImageManager[_0x46e1c9(0x22a)],_0x3fb386=_0x288507-0x2,_0x497675=_0x2c81e2+Math[_0x46e1c9(0xa76)]((_0x46afa6-_0x40b362)/0x2);this['constructor']===Window_MenuStatus&&this['changePaintOpacity'](_0xf4f271[_0x46e1c9(0x5f4)]()),this[_0x46e1c9(0x485)](_0xf4f271,_0x497675,_0x3926b9,_0x40b362,_0x3fb386),this['changePaintOpacity'](!![]);},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x63c)]=function(_0x15008d,_0x175a4b,_0x350461,_0x5f2ce2,_0x18c053){const _0xb917f9=_0x478a06;_0x5f2ce2=_0x5f2ce2||ImageManager[_0xb917f9(0x22a)],_0x18c053=_0x18c053||ImageManager['faceHeight'];const _0x56b451=_0x15008d[_0xb917f9(0x9fd)](),_0x2bc7c2=_0x15008d['characterIndex'](),_0x95c2ea=ImageManager['loadCharacter'](_0x56b451),_0x2ec5b4=ImageManager[_0xb917f9(0x53b)](_0x56b451),_0xf35b6f=_0x95c2ea[_0xb917f9(0xaad)]/(_0x2ec5b4?0x3:0xc),_0x30e96f=_0x95c2ea['height']/(_0x2ec5b4?0x4:0x8),_0x4f269e=_0x5f2ce2,_0x2c016f=_0x18c053-0x2,_0x2decda=_0x175a4b+Math['floor'](_0x4f269e/0x2),_0x424a7e=_0x350461+Math['ceil']((_0x18c053+_0x30e96f)/0x2);this[_0xb917f9(0x930)]===Window_MenuStatus&&this[_0xb917f9(0x1a7)](_0x15008d[_0xb917f9(0x5f4)]());const _0x7dc4f3=Math['min'](_0x5f2ce2,_0xf35b6f),_0x214a7d=Math[_0xb917f9(0x7a1)](_0x18c053,_0x30e96f),_0x19022a=Math[_0xb917f9(0xa76)](_0x175a4b+Math[_0xb917f9(0x896)](_0x5f2ce2-_0xf35b6f,0x0)/0x2),_0x4dd139=Math['floor'](_0x350461+Math['max'](_0x18c053-_0x30e96f,0x0)/0x2),_0x53ba74=_0x2ec5b4?0x0:_0x2bc7c2,_0x446bb2=(_0x53ba74%0x4*0x3+0x1)*_0xf35b6f,_0x5da447=Math[_0xb917f9(0xa76)](_0x53ba74/0x4)*0x4*_0x30e96f;this[_0xb917f9(0x2b9)]['blt'](_0x95c2ea,_0x446bb2,_0x5da447,_0x7dc4f3,_0x214a7d,_0x19022a,_0x4dd139),this[_0xb917f9(0x1a7)](!![]);},Window_InBattleStatus['prototype'][_0x478a06(0x45e)]=function(_0xd9410e,_0x395bdc,_0x89ae3,_0xc000b8,_0x4b8977,_0x1f934e){const _0x3361dc=_0x478a06;_0xc000b8=_0xc000b8||ImageManager['faceWidth'],_0x4b8977=_0x4b8977||ImageManager[_0x3361dc(0x8cc)];const _0x2136cb=ImageManager[_0x3361dc(0xa81)](_0x1f934e?_0xd9410e[_0x3361dc(0x9f6)]():_0xd9410e[_0x3361dc(0x676)]()),_0x34769a=_0x2136cb['width']/ImageManager[_0x3361dc(0xb13)],_0x13ae70=_0x2136cb[_0x3361dc(0x15a)]/ImageManager[_0x3361dc(0x4d4)],_0x59277f=_0xc000b8,_0x2559cd=_0x4b8977-0x2,_0xbe2082=_0x395bdc+Math[_0x3361dc(0xa76)](_0x59277f/0x2),_0x235f24=_0x89ae3+Math[_0x3361dc(0x4f5)]((_0x4b8977+_0x13ae70)/0x2);this[_0x3361dc(0x930)]===Window_MenuStatus&&this['changePaintOpacity'](_0xd9410e[_0x3361dc(0x5f4)]());const _0xe9409a=_0xd9410e[_0x3361dc(0x346)]&&_0xd9410e[_0x3361dc(0x346)](),_0x5f22b8=0x0,_0x4c9c47=0x0,_0x5392ed=_0xe9409a?_0x2136cb[_0x3361dc(0xaad)]:_0x34769a,_0x548de1=_0xe9409a?_0x2136cb['height']:_0x13ae70,_0x25588b=Math['min'](0x1,_0xc000b8/_0x5392ed,_0x4b8977/_0x548de1),_0x1ea14f=_0x25588b*_0x5392ed,_0x6fc479=_0x25588b*_0x548de1,_0x53910c=Math['floor'](_0x395bdc+Math[_0x3361dc(0x896)](_0xc000b8-_0x1ea14f,0x0)/0x2),_0x33afe1=Math['floor'](_0x89ae3+Math[_0x3361dc(0x896)](_0x4b8977-_0x6fc479,0x0)/0x2);this[_0x3361dc(0x2b9)]['blt'](_0x2136cb,_0x5f22b8,_0x4c9c47,_0x5392ed,_0x548de1,_0x53910c,_0x33afe1,_0x1ea14f,_0x6fc479),this[_0x3361dc(0x1a7)](!![]);},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x295)]=function(_0x22ef75,_0xbb67fd,_0x24d374,_0x4739d4,_0x4d7182){const _0xe0b130=_0x478a06;if(_0x22ef75[_0xe0b130(0x296)]()){this[_0xe0b130(0x45e)](_0x22ef75,_0xbb67fd,_0x24d374+0x1,_0x4739d4,_0x4d7182-0x2,!![]);return;}const _0x119a74=_0x22ef75[_0xe0b130(0x676)](),_0x21c00d=$gameSystem[_0xe0b130(0x787)]()?ImageManager[_0xe0b130(0x9f5)](_0x119a74):ImageManager['loadEnemy'](_0x119a74);_0x21c00d['addLoadListener'](this[_0xe0b130(0xac8)][_0xe0b130(0x543)](this,_0x22ef75,_0x21c00d,_0xbb67fd,_0x24d374,_0x4739d4,_0x4d7182));},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0xac8)]=function(_0x5c908d,_0x16ee6e,_0x4cceba,_0x1cf8e1,_0x16184f,_0x21e94c){const _0x21481d=_0x478a06;if(this[_0x21481d(0xbe5)]!==_0x5c908d)return;this[_0x21481d(0x6dc)][_0x21481d(0x769)](),this[_0x21481d(0x6dc)]['bitmap']=new Bitmap(_0x16184f,_0x21e94c);const _0x553c6d=_0x16184f,_0x4bf153=_0x21e94c,_0x541fdf=Math['min'](_0x553c6d,_0x4bf153),_0x50a6b9=this[_0x21481d(0x6dc)][_0x21481d(0x410)],_0xc9bc79=Math[_0x21481d(0x7a1)](0x1,_0x541fdf/_0x16ee6e[_0x21481d(0xaad)],_0x541fdf/_0x16ee6e['height']),_0x417bd5=_0x16ee6e[_0x21481d(0xaad)]*_0xc9bc79,_0x53ffb=_0x16ee6e[_0x21481d(0x15a)]*_0xc9bc79,_0x3435c2=Math[_0x21481d(0x801)]((_0x553c6d-_0x417bd5)/0x2),_0x230111=Math['round']((_0x4bf153-_0x53ffb)/0x2);_0x50a6b9[_0x21481d(0x77d)](_0x16ee6e,0x0,0x0,_0x16ee6e[_0x21481d(0xaad)],_0x16ee6e[_0x21481d(0x15a)],_0x3435c2,_0x230111,_0x417bd5,_0x53ffb),this[_0x21481d(0x6dc)][_0x21481d(0x488)]['x']=0.5,this[_0x21481d(0x6dc)]['anchor']['y']=0x1,this[_0x21481d(0x6dc)]['x']=_0x4cceba+_0x16184f/0x2+this[_0x21481d(0x12f)],this[_0x21481d(0x6dc)]['y']=_0x1cf8e1+_0x21e94c+this[_0x21481d(0x12f)],this['_enemySprite'][_0x21481d(0x2a4)](this[_0x21481d(0xbe5)][_0x21481d(0x63b)]());},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x3d7)]=function(_0x3621e8,_0x4fa27b,_0x5e28e8,_0x1427cd){const _0x5a545a=_0x478a06;if(_0x3621e8[_0x5a545a(0x8e3)]())_0x1427cd=this[_0x5a545a(0x25f)]-_0x4fa27b;Window_StatusBase['prototype'][_0x5a545a(0x3d7)]['call'](this,_0x3621e8,_0x4fa27b,_0x5e28e8,_0x1427cd);},Window_InBattleStatus['prototype'][_0x478a06(0x84e)]=function(_0x3ad6e8,_0x12ec6b,_0x57295d,_0x3c7a70){const _0x522b29=_0x478a06;if(!_0x3ad6e8[_0x522b29(0x847)]())return;Window_StatusBase['prototype'][_0x522b29(0x84e)][_0x522b29(0x21e)](this,_0x3ad6e8,_0x12ec6b,_0x57295d,_0x3c7a70);},Window_InBattleStatus['prototype'][_0x478a06(0x198)]=function(_0x3e70a5,_0x3a5b96,_0x23195c){const _0xc29a4a=_0x478a06;if(_0x3e70a5['isEnemy']()&&!Window_InBattleStatus[_0xc29a4a(0xb9d)][_0xc29a4a(0x6ef)])return;Window_StatusBase['prototype'][_0xc29a4a(0x198)][_0xc29a4a(0x21e)](this,_0x3e70a5,_0x3a5b96,_0x23195c);},Window_InBattleStatus['prototype'][_0x478a06(0x1e0)]=function(_0x4970fa,_0x3ae9c1,_0x5aacdc,_0x3a5bbf){const _0x2d1458=_0x478a06;_0x4970fa['_hideAllIcons']=!![],Window_StatusBase[_0x2d1458(0x9c5)]['drawActorIcons']['call'](this,_0x4970fa,_0x3ae9c1,_0x5aacdc,_0x3a5bbf),_0x4970fa[_0x2d1458(0xaf9)]=undefined;},VisuMZ[_0x478a06(0x1a5)][_0x478a06(0xe4)]=Game_BattlerBase[_0x478a06(0x9c5)]['allIcons'],Game_BattlerBase['prototype'][_0x478a06(0x747)]=function(){const _0x4102e0=_0x478a06;if(this[_0x4102e0(0xaf9)])return[];return VisuMZ[_0x4102e0(0x1a5)][_0x4102e0(0xe4)][_0x4102e0(0x21e)](this);},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0x231)]=function(_0x551915,_0x3cdc06,_0x3b5593,_0x3c8ad8){const _0x187bb9=_0x478a06,_0x507e95='actor%1-gauge-%2'[_0x187bb9(0x177)](_0x551915[_0x187bb9(0x7bd)](),_0x3cdc06);let _0x36051a=![];if(_0x551915['isEnemy']()){const _0x10b64e=Window_InBattleStatus[_0x187bb9(0xb9d)];if(_0x3cdc06==='hp'&&_0x10b64e[_0x187bb9(0x6e5)])_0x36051a=!![];if(_0x3cdc06==='mp'&&_0x10b64e[_0x187bb9(0x5f8)])_0x36051a=!![];if(_0x3cdc06==='tp'&&_0x10b64e[_0x187bb9(0x64b)])_0x36051a=!![];}const _0x490725=this[_0x187bb9(0x68b)](_0x507e95,_0x36051a?Sprite_GaugeRate:Sprite_Gauge);_0x490725['setup'](_0x551915,_0x3cdc06),_0x490725[_0x187bb9(0x4da)](_0x3b5593,_0x3c8ad8),_0x490725['show']();},Window_InBattleStatus[_0x478a06(0x9c5)][_0x478a06(0xa35)]=function(){const _0x3a9d28=_0x478a06,_0x4a1f23=this[_0x3a9d28(0x87c)]?this[_0x3a9d28(0x87c)][_0x3a9d28(0xaad)]:0x0;return this[_0x3a9d28(0x25f)]-_0x4a1f23+this[_0x3a9d28(0x12f)]*0x2;},Window_InBattleStatus[_0x478a06(0x9c5)]['displayedParams']=function(){const _0x369685=_0x478a06;return Imported[_0x369685(0x1a1)]?VisuMZ[_0x369685(0x71a)][_0x369685(0x468)][_0x369685(0xb17)][_0x369685(0x336)]:[_0x369685(0x89e),_0x369685(0x3e3),_0x369685(0x649),_0x369685(0x74d),'MAT',_0x369685(0x720),_0x369685(0xb1b),_0x369685(0x76d)];},Window_InBattleStatus[_0x478a06(0x9c5)]['drawParamData']=function(_0x5c7d31,_0x58dd7a,_0x20cec5,_0x3b9ed4){const _0x5560fd=_0x478a06,_0x2b07cc=Window_InBattleStatus[_0x5560fd(0xb9d)],_0x1851c5=Imported['VisuMZ_0_CoreEngine'];this[_0x5560fd(0x140)]();let _0x5eb586='',_0x23613d=0x0,_0x2d9ca5=[_0x5560fd(0x663),'MAXMP',_0x5560fd(0x649),_0x5560fd(0x74d),_0x5560fd(0x811),_0x5560fd(0x720),_0x5560fd(0xb1b),_0x5560fd(0x76d)][_0x5560fd(0x960)](String(_0x5c7d31)[_0x5560fd(0xabf)]()[_0x5560fd(0xb7d)]());if(_0x1851c5)_0x5eb586=TextManager[_0x5560fd(0x85b)](_0x5c7d31),_0x23613d=VisuMZ[_0x5560fd(0x972)](_0x5c7d31);else{if(_0x2d9ca5>=0x0&&_0x2d9ca5<0x8)_0x5eb586=TextManager[_0x5560fd(0xe1)](_0x2d9ca5);}if(_0x2d9ca5>=0x0&&_0x2d9ca5<0x8){const _0x3b5b6b=this[_0x5560fd(0xbe5)]['_buffs'][_0x2d9ca5];this[_0x5560fd(0xbe5)][_0x5560fd(0x9d6)](_0x3b5b6b,_0x2d9ca5)!==0x0&&(_0x23613d=this[_0x5560fd(0xbe5)][_0x5560fd(0x9d6)](_0x3b5b6b,_0x2d9ca5));}if(_0x5eb586){let _0x36d707=_0x5560fd(0xb91)[_0x5560fd(0x177)](_0x5eb586,_0x23613d);_0x3b9ed4<=0xd4&&(_0x36d707='\x5cC[16]%1\x5cC[0]'[_0x5560fd(0x177)](_0x5eb586));const _0x36096f=_0x3b9ed4<=0xd4?'\x20':'\x20\x20';this[_0x5560fd(0x31a)](_0x36096f+_0x36d707,_0x58dd7a,_0x20cec5);}this['resetTextColor']();let _0x97fed='';_0x1851c5?_0x97fed=this['_battler']['paramValueByName'](_0x5c7d31,!![]):_0x97fed=String(this[_0x5560fd(0xbe5)][_0x5560fd(0xe1)](_0x2d9ca5));if(this[_0x5560fd(0xbe5)]['isEnemy']()){let _0x5363d1=!![];if(_0x2b07cc[_0x5560fd(0x5b0)])_0x5363d1=![];if(_0x2b07cc['enemyShowParametersIfBattleTest']&&BattleManager['isBattleTest']())_0x5363d1=![];if(_0x2b07cc[_0x5560fd(0x952)]&&$gameSystem[_0x5560fd(0x55c)]()[_0x5560fd(0x982)](this[_0x5560fd(0xbe5)][_0x5560fd(0xbd1)]()))_0x5363d1=![];_0x5363d1&&(_0x97fed=_0x2b07cc['enemyHiddenParameter']);}if(_0x2d9ca5>=0x0&&_0x2d9ca5<0x8){if(this['_battler'][_0x5560fd(0xa7b)](_0x2d9ca5)>0x1)_0x97fed=_0x2b07cc[_0x5560fd(0xa97)][_0x5560fd(0x177)](_0x97fed),Imported[_0x5560fd(0x7a6)]?this[_0x5560fd(0xb94)](ColorManager[_0x5560fd(0x450)]()):this['changeTextColor'](ColorManager[_0x5560fd(0x9bc)]());else this[_0x5560fd(0xbe5)][_0x5560fd(0xa7b)](_0x2d9ca5)<0x1&&(_0x97fed=_0x2b07cc[_0x5560fd(0xac9)][_0x5560fd(0x177)](_0x97fed),Imported[_0x5560fd(0x7a6)]?this[_0x5560fd(0xb94)](ColorManager['debuffColor']()):this['changeTextColor'](ColorManager[_0x5560fd(0x1b1)]()));}if(String(_0x97fed)){const _0x425b76=_0x3b9ed4<=0xd4?'\x20':'\x20\x20';this['drawText'](_0x97fed+_0x425b76,_0x58dd7a,_0x20cec5,_0x3b9ed4,_0x5560fd(0x58d));}},Window_InBattleStatus['prototype']['drawDarkRect']=function(_0x24e149,_0x4dfcee,_0x2c7eea,_0x50dfa2){const _0x4a7ba3=_0x478a06;_0x50dfa2=_0x50dfa2||this[_0x4a7ba3(0xef)](),this['contentsBack']['paintOpacity']=0xa0;const _0x24cbf5=ColorManager[_0x4a7ba3(0x21b)]();this['contentsBack']['fillRect'](_0x24e149+0x1,_0x4dfcee+0x1,_0x2c7eea-0x2,_0x50dfa2-0x2,_0x24cbf5),this[_0x4a7ba3(0x789)][_0x4a7ba3(0x6d9)]=0xff;},Game_BattlerBase[_0x478a06(0x9c5)][_0x478a06(0xa7b)]=function(_0x316d85){const _0x1f31ee=_0x478a06;let _0x1a15fb=0x1;_0x1a15fb*=this[_0x1f31ee(0x187)](_0x316d85);for(const _0xecb7c7 of this[_0x1f31ee(0x72d)]()){if(!_0xecb7c7)continue;for(const _0x242d66 of _0xecb7c7[_0x1f31ee(0x5d5)]){if(!_0x242d66)continue;if(_0x242d66[_0x1f31ee(0x8c5)]!==Game_BattlerBase[_0x1f31ee(0xcc)])continue;if(_0x242d66['dataId']!==_0x316d85)continue;_0x1a15fb*=_0x242d66['value'];}}return _0x1a15fb;};function Window_InBattleStatusStates(){const _0x2848fa=_0x478a06;this[_0x2848fa(0x552)](...arguments);}Window_InBattleStatusStates[_0x478a06(0x9c5)]=Object[_0x478a06(0x47b)](Window_Command[_0x478a06(0x9c5)]),Window_InBattleStatusStates[_0x478a06(0x9c5)][_0x478a06(0x930)]=Window_InBattleStatusStates,Window_InBattleStatusStates[_0x478a06(0xb9d)]={'maxWidth':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x99d)][_0x478a06(0x7c2)]??0x180,'drawStates':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)]['InBattleStatus'][_0x478a06(0x197)]??!![],'drawBuffs':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)]['InBattleStatus']['drawBuffs']??!![],'drawDebuffs':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)]['InBattleStatus']['drawDebuffs']??!![],'normalIcon':VisuMZ['BattleCore'][_0x478a06(0x468)][_0x478a06(0x99d)][_0x478a06(0xa83)]??0x54,'normalText':VisuMZ['BattleCore'][_0x478a06(0x468)][_0x478a06(0x99d)][_0x478a06(0xbb7)]??'Normal','normalHelp':VisuMZ[_0x478a06(0x1a5)]['Settings']['InBattleStatus'][_0x478a06(0x4f8)]??'Status\x20is\x20currently\x20normal.','stateHelpFmt':VisuMZ['BattleCore'][_0x478a06(0x468)][_0x478a06(0x99d)][_0x478a06(0x11c)]??_0x478a06(0xbb4),'buffNameFmt':VisuMZ[_0x478a06(0x1a5)]['Settings'][_0x478a06(0x99d)][_0x478a06(0xa51)]??_0x478a06(0x6da),'buffHelpFmt':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x99d)][_0x478a06(0x377)]??_0x478a06(0xac3),'debuffNameFmt':VisuMZ['BattleCore'][_0x478a06(0x468)][_0x478a06(0x99d)][_0x478a06(0x4e8)]??_0x478a06(0x27c),'debuffHelpFmt':VisuMZ[_0x478a06(0x1a5)][_0x478a06(0x468)][_0x478a06(0x99d)]['debuffHelpFmt']??'Decreases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','actionsFmt':VisuMZ['BattleCore'][_0x478a06(0x468)][_0x478a06(0x99d)][_0x478a06(0x613)]??_0x478a06(0x3a7),'turnsFmt':VisuMZ[_0x478a06(0x1a5)]['Settings'][_0x478a06(0x99d)][_0x478a06(0xad9)]??_0x478a06(0x725),'passiveText':VisuMZ['BattleCore'][_0x478a06(0x468)][_0x478a06(0x99d)][_0x478a06(0x7e7)]??_0x478a06(0x250)},Window_InBattleStatusStates[_0x478a06(0x9c5)]['initialize']=function(_0x577473){const _0x2c5d70=_0x478a06;this[_0x2c5d70(0xbe5)]=null,Window_Command[_0x2c5d70(0x9c5)][_0x2c5d70(0x552)][_0x2c5d70(0x21e)](this,_0x577473),this[_0x2c5d70(0x3c3)](),this[_0x2c5d70(0x2f4)](),this[_0x2c5d70(0x92b)](0x2);},Window_InBattleStatusStates[_0x478a06(0x9c5)][_0x478a06(0x1c9)]=function(_0x462823){const _0x3bc732=_0x478a06;this[_0x3bc732(0xbe5)]=_0x462823||null,this[_0x3bc732(0x85c)](),this[_0x3bc732(0x8b7)](0x0),this[_0x3bc732(0x3d0)](0x0,0x0),this[_0x3bc732(0x901)]();},Window_InBattleStatusStates[_0x478a06(0x9c5)][_0x478a06(0x108)]=function(){},Window_InBattleStatusStates[_0x478a06(0x9c5)][_0x478a06(0x313)]=function(){const _0x1acf2a=_0x478a06;if(!this[_0x1acf2a(0xbe5)])return;this[_0x1acf2a(0x3e0)](),this['addBattlerStates'](),this[_0x1acf2a(0x58f)](),this[_0x1acf2a(0x4a3)]();},Window_InBattleStatusStates[_0x478a06(0x9c5)]['addBattlerAspect']=function(){const _0x101ed0=_0x478a06;if(!this[_0x101ed0(0xbe5)][_0x101ed0(0x8e3)]())return;if(!this[_0x101ed0(0xbe5)][_0x101ed0(0x4a2)]())return;const _0x50b645=this['_battler'][_0x101ed0(0xb29)]()[_0x101ed0(0x8ff)],_0x5bbed7=this[_0x101ed0(0xbe5)][_0x101ed0(0xb29)]()[_0x101ed0(0x4b7)],_0x4ba20f=this['_battler'][_0x101ed0(0xb29)]()[_0x101ed0(0xb46)];let _0x43cf6b='';_0x4ba20f[_0x101ed0(0x85a)](/#(.*?)/gi)&&Imported[_0x101ed0(0x13b)]?_0x43cf6b='\x5cI[%1]\x5cHEXCOLOR<%3>%2'['format'](_0x5bbed7,_0x50b645,_0x4ba20f):_0x43cf6b=_0x101ed0(0x4eb)[_0x101ed0(0x177)](_0x5bbed7,_0x50b645,_0x4ba20f),this['addCommand'](_0x43cf6b,_0x101ed0(0x12e),!![]);},Window_InBattleStatusStates[_0x478a06(0x9c5)][_0x478a06(0xf4)]=function(){const _0x28e482=_0x478a06;if(!Window_InBattleStatusStates['SETTINGS'][_0x28e482(0x197)])return;for(const _0x4c7e8b of this['_battler']['states']()){if(!this[_0x28e482(0x5b1)](_0x4c7e8b))continue;const _0x5dd79f=this['makeStateName'](_0x4c7e8b);this[_0x28e482(0x652)](_0x5dd79f,_0x28e482(0x948),!![],_0x4c7e8b['id']);}},Window_InBattleStatusStates[_0x478a06(0x9c5)]['includeState']=function(_0x16d562){const _0x23e148=_0x478a06;if(!_0x16d562)return![];if(_0x16d562['name'][_0x23e148(0xb7d)]()==='')return![];if(_0x16d562[_0x23e148(0x8ff)]['includes'](_0x23e148(0x60a)))return![];if(_0x16d562['iconIndex']<=0x0)return![];if(_0x16d562[_0x23e148(0x4f1)])return![];return!![];},Window_InBattleStatusStates[_0x478a06(0x9c5)][_0x478a06(0x2cd)]=function(_0x29c294){const _0x57a53d=_0x478a06;let _0x12bcbb=_0x29c294[_0x57a53d(0x4b7)],_0x3f3d75=_0x29c294[_0x57a53d(0x8ff)],_0x530c05='0';return Imported[_0x57a53d(0x7a6)]&&Imported['VisuMZ_1_MessageCore']&&(_0x530c05=String(ColorManager[_0x57a53d(0x6e6)](_0x29c294))),_0x530c05[_0x57a53d(0x85a)](/#(.*?)/gi)?_0x57a53d(0x2ec)['format'](_0x12bcbb,_0x3f3d75,_0x530c05):_0x57a53d(0x4eb)['format'](_0x12bcbb,_0x3f3d75,_0x530c05);},Window_InBattleStatusStates[_0x478a06(0x9c5)][_0x478a06(0x58f)]=function(){const _0x250511=_0x478a06;for(let _0x169d23=0x0;_0x169d23<0x8;_0x169d23++){const _0xff228d=this[_0x250511(0x1dd)](_0x169d23);if(!_0xff228d)continue;this[_0x250511(0x652)](_0xff228d,_0x250511(0x369),!![],_0x169d23);}},Window_InBattleStatusStates[_0x478a06(0x9c5)][_0x478a06(0x1dd)]=function(_0x4764ce){const _0x4a1e28=_0x478a06;if(!this[_0x4a1e28(0xbe5)][_0x4a1e28(0xa25)](_0x4764ce)&&!this['_battler'][_0x4a1e28(0x875)](_0x4764ce))return'';const _0x27faa3=Window_InBattleStatusStates[_0x4a1e28(0xb9d)];if(this[_0x4a1e28(0xbe5)]['isBuffAffected'](_0x4764ce)&&!_0x27faa3['drawBuffs'])return'';if(this[_0x4a1e28(0xbe5)][_0x4a1e28(0x875)](_0x4764ce)&&!_0x27faa3[_0x4a1e28(0x37b)])return'';const _0xd3e002=this['_battler']['_buffs'][_0x4764ce];let _0x34fee7=this[_0x4a1e28(0xbe5)][_0x4a1e28(0x9d6)](_0xd3e002,_0x4764ce),_0x4c0021=TextManager[_0x4a1e28(0xe1)](_0x4764ce);_0xd3e002>0x0?_0x4c0021=_0x27faa3[_0x4a1e28(0xa51)][_0x4a1e28(0x177)](_0x4c0021):_0x4c0021=_0x27faa3[_0x4a1e28(0x4e8)]['format'](_0x4c0021);let _0x56cce4=0x0;return Imported[_0x4a1e28(0x7a6)]&&(_0x56cce4=_0xd3e002>0x0?ColorManager['buffColor']():ColorManager[_0x4a1e28(0x2c4)]()),String(_0x56cce4)[_0x4a1e28(0x85a)](/#(.*?)/gi)?_0x4a1e28(0x2ec)[_0x4a1e28(0x177)](_0x34fee7,_0x4c0021,_0x56cce4):_0x4a1e28(0x4eb)['format'](_0x34fee7,_0x4c0021,_0x56cce4);},Window_InBattleStatusStates[_0x478a06(0x9c5)][_0x478a06(0x4a3)]=function(){const _0x4630fa=_0x478a06;if(this[_0x4630fa(0x514)][_0x4630fa(0x496)]>0x0)return;const _0x3e5283=Window_InBattleStatusStates[_0x4630fa(0xb9d)],_0x28e847=_0x3e5283[_0x4630fa(0xa83)],_0xd191d3=_0x3e5283[_0x4630fa(0xbb7)],_0x344eec=_0x4630fa(0x5c2)[_0x4630fa(0x177)](_0x28e847,_0xd191d3);this[_0x4630fa(0x652)](_0x344eec,_0x4630fa(0xb3f));},Window_InBattleStatusStates[_0x478a06(0x9c5)][_0x478a06(0x817)]=function(_0x479055){const _0x5f2f10=_0x478a06,_0x3756cd=this['itemLineRect'](_0x479055);this['changePaintOpacity'](0xff),this[_0x5f2f10(0x31a)](this[_0x5f2f10(0xaf1)](_0x479055),_0x3756cd['x'],_0x3756cd['y']),this[_0x5f2f10(0x4ea)](_0x479055,_0x3756cd);},Window_InBattleStatusStates[_0x478a06(0x9c5)][_0x478a06(0x4ea)]=function(_0x4f36ca,_0x3c6375){const _0x43716c=_0x478a06;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;const _0x31357b=this['commandSymbol'](_0x4f36ca),_0x4482f0=_0x3c6375['x']+0x2;if(_0x31357b===_0x43716c(0x948)){const _0x37e233=$dataStates[this[_0x43716c(0x514)][_0x4f36ca]['ext']||0x0];this[_0x43716c(0x1b2)](this['_battler'],_0x37e233,_0x4482f0,_0x3c6375['y']),this[_0x43716c(0xafd)](this[_0x43716c(0xbe5)],_0x37e233,_0x4482f0,_0x3c6375['y']);}else{if(_0x31357b==='buff'){const _0x41a5e9=this[_0x43716c(0x514)][_0x4f36ca]['ext'];this[_0x43716c(0x8cd)](this[_0x43716c(0xbe5)],_0x41a5e9,_0x4482f0,_0x3c6375['y']),this['drawActorBuffRates'](this['_battler'],_0x41a5e9,_0x4482f0,_0x3c6375['y']);}}},Window_InBattleStatusStates[_0x478a06(0x9c5)][_0x478a06(0xb93)]=function(){const _0x4283a3=_0x478a06,_0x2e495a=this[_0x4283a3(0x923)]();let _0x4c95c9='';if(_0x2e495a==='aspect')_0x4c95c9=this['_battler'][_0x4283a3(0xb29)]()[_0x4283a3(0x42b)];else{if(_0x2e495a===_0x4283a3(0x948))_0x4c95c9=this[_0x4283a3(0xd3)]();else{if(_0x2e495a===_0x4283a3(0x369))_0x4c95c9=this['makeBuffHelpText']();else _0x2e495a===_0x4283a3(0xb3f)&&(_0x4c95c9=Window_InBattleStatusStates[_0x4283a3(0xb9d)]['normalHelp']);}}_0x4c95c9?this[_0x4283a3(0x91f)][_0x4283a3(0x4f7)](_0x4c95c9):this[_0x4283a3(0x91f)][_0x4283a3(0x87d)]();},Window_InBattleStatusStates['prototype'][_0x478a06(0xd3)]=function(){const _0x307a47=_0x478a06,_0x1002c2=Window_InBattleStatusStates['SETTINGS'],_0x3545c7=this['currentExt']();let _0x5e1503='';const _0x12e47d=$dataStates[_0x3545c7]||null;if(_0x12e47d){const _0x2cb5f4=_0x1002c2[_0x307a47(0x11c)];let _0x5d5f38=_0x12e47d[_0x307a47(0x43f)]||_0x12e47d['description']||'';Imported['VisuMZ_1_SkillsStatesCore']&&(_0x5d5f38=_0x5d5f38[_0x307a47(0x177)](this['_battler'][_0x307a47(0x32e)](_0x3545c7)));let _0x20c8af='passive';if(this[_0x307a47(0xbe5)][_0x307a47(0x5d0)](_0x3545c7)){if(_0x12e47d['autoRemovalTiming']===0x0)_0x20c8af=_0x307a47(0x884);if(_0x12e47d['autoRemovalTiming']===0x1)_0x20c8af=_0x307a47(0x3fd);if(_0x12e47d['autoRemovalTiming']===0x2)_0x20c8af=_0x307a47(0x768);}const _0x13d34b=this[_0x307a47(0xbe5)][_0x307a47(0x941)][_0x3545c7]||0x0;let _0x1ff12f=_0x307a47(0x4ee);Imported[_0x307a47(0x7a6)]&&Imported['VisuMZ_1_MessageCore']&&(_0x1ff12f=ColorManager[_0x307a47(0x6e6)](_0x12e47d),_0x1ff12f[_0x307a47(0x85a)](/#(.*?)/gi)?_0x1ff12f=_0x307a47(0x1de)['format'](_0x1ff12f):_0x1ff12f='\x5cC[%1]'[_0x307a47(0x177)](_0x1ff12f)),_0x5e1503=_0x2cb5f4[_0x307a47(0x177)](_0x5d5f38,this[_0x307a47(0x470)](_0x20c8af,_0x13d34b,_0x1ff12f));}return _0x5e1503;},Window_InBattleStatusStates[_0x478a06(0x9c5)][_0x478a06(0x2ac)]=function(){const _0x254075=_0x478a06,_0x5b247e=Window_InBattleStatusStates[_0x254075(0xb9d)],_0x479289=this['currentExt']();let _0x209333='';const _0x2a9609=this['_battler']['isBuffAffected'](_0x479289),_0x2f6c54=_0x2a9609?_0x254075(0x377):_0x254075(0x1ec),_0x592d49=_0x5b247e[_0x2f6c54];let _0x2b94d3=_0x254075(0x4ee);Imported[_0x254075(0x7a6)]&&Imported[_0x254075(0x13b)]&&(_0x2b94d3=_0x2a9609?ColorManager['buffColor']():ColorManager[_0x254075(0x2c4)](),_0x2b94d3[_0x254075(0x85a)](/#(.*?)/gi)?_0x2b94d3=_0x254075(0x1de)[_0x254075(0x177)](_0x2b94d3):_0x2b94d3=_0x254075(0x21f)[_0x254075(0x177)](_0x2b94d3));const _0x4154ba=this[_0x254075(0xbe5)][_0x254075(0x631)][_0x479289]||0x0;return _0x209333=_0x592d49['format'](TextManager[_0x254075(0xe1)](_0x479289),Math['floor'](this[_0x254075(0xbe5)][_0x254075(0x187)](_0x479289)*0x64)+'%',_0x2b94d3,this['makeTurnsText'](_0x254075(0x768),_0x4154ba,_0x2b94d3)),_0x209333;},Window_InBattleStatusStates[_0x478a06(0x9c5)][_0x478a06(0x470)]=function(_0x469380,_0x4cc263,_0x3a8eb9){const _0x4bd48a=_0x478a06,_0x1c0145=Window_InBattleStatusStates[_0x4bd48a(0xb9d)];let _0x50c33b=_0x1c0145['passiveText'];if(_0x469380===_0x4bd48a(0x3fd))_0x50c33b=_0x1c0145['actionsFmt'];if(_0x469380===_0x4bd48a(0x768))_0x50c33b=_0x1c0145[_0x4bd48a(0xe8)];if(_0x469380===_0x4bd48a(0x884))return'';return _0x50c33b[_0x4bd48a(0x177)](_0x4cc263,_0x3a8eb9);};