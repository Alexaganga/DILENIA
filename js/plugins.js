// Generated by RPG Maker.
// Do not edit this file directly.
var $plugins =
[
{"name":"FOSSIL","status":true,"description":"Fossil is an interoperability layer for RMMZ, designed to make MV plugins work in MZ. \r\nSo far, we support over 300 plugins.  You can help!","parameters":{}},
{"name":"SRD_SuperToolsEngine","status":true,"description":"The heart of all maker-style plugins; it adds a playtesting editor that can be opened with F12.","parameters":{"Connect Editor":"true","Auto Open Window":"false","Auto Move Window":"true","Menu Editor Exempt List":"[\"Window_BattleLog\",\"Window_MapName\"]"}},
{"name":"SRD_HUDMaker","status":true,"description":"Allows developers to create their own map-based HUD through an in-game GUI window!","parameters":{"Active Updating":"false","Show During Events":"transparent","Map Global Condition":"","Battle Global Condition":"","Disable Delete Key":"true"}},
{"name":"animationeditbattle","status":true,"description":"[v2.0] Controla la duraci√≥n individual de cada frame en animaciones SV de actores. Compatible y prioritario sobre otros plugins. [por ChatGPT]","parameters":{"walk":"8,8,8,8,8,8","idle":"8,8,8,8,8,8","attack":"8,8,8,8,8,8","thrust":"8,8,8,8,8,8","swing":"1,1,1,1","skill":"8,8,8,8,8,8","spell":"8,8,8,8,8,8","guard":"8,8,8,8,8,8","damage":"8,8,8,8,8,8"}},
{"name":"VisuMZ_0_CoreEngine","status":true,"description":"[RPG Maker MZ] [Tier 0] [Version 1.85] [CoreEngine]","parameters":{"BreakHead":"----------------------------------","CoreEngine":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","QoL:struct":"{\"PlayTest\":\"\",\"NewGameBoot:eval\":\"false\",\"ForceNoPlayTest:eval\":\"false\",\"OpenConsole:eval\":\"false\",\"F6key:eval\":\"true\",\"F7key:eval\":\"true\",\"CtrlQuickLoad:eval\":\"true\",\"NewGameCommonEvent:num\":\"0\",\"BattleTest\":\"\",\"BTestItems:eval\":\"true\",\"BTestWeapons:eval\":\"true\",\"BTestArmors:eval\":\"true\",\"BTestAddedQuantity:num\":\"90\",\"ShiftR_Toggle:eval\":\"true\",\"ShiftT_Toggle:eval\":\"true\",\"DigitGrouping\":\"\",\"DigitGroupingStandardText:eval\":\"true\",\"DigitGroupingExText:eval\":\"true\",\"DigitGroupingDamageSprites:eval\":\"true\",\"DigitGroupingGaugeSprites:eval\":\"true\",\"DigitGroupingLocale:str\":\"en-US\",\"PlayerBenefit\":\"\",\"EncounterRateMinimum:num\":\"10\",\"EscapeAlways:eval\":\"false\",\"ImprovedAccuracySystem:eval\":\"true\",\"AccuracyBoost:eval\":\"true\",\"LevelUpFullHp:eval\":\"true\",\"LevelUpFullMp:eval\":\"true\",\"Pictures\":\"\",\"AntiZoomPictures:eval\":\"true\",\"PictureContainers\":\"\",\"DetachBattlePictureContainer:eval\":\"false\",\"DetachMapPictureContainer:eval\":\"false\",\"Misc\":\"\",\"AnimationMirrorOffset:eval\":\"false\",\"AutoStretch:str\":\"default\",\"FontShadows:eval\":\"true\",\"FontSmoothing:eval\":\"false\",\"FontWidthFix:eval\":\"true\",\"KeyItemProtect:eval\":\"true\",\"MapNameTextCode:eval\":\"true\",\"ModernControls:eval\":\"true\",\"MvAnimationRate:num\":\"4\",\"NewGameCommonEventAll:num\":\"0\",\"NoTileShadows:eval\":\"true\",\"PixelateImageRendering:eval\":\"true\",\"RequireFocus:eval\":\"false\",\"ShortcutScripts:eval\":\"true\",\"SmartEventCollisionPriority:eval\":\"true\",\"SubfolderParse:eval\":\"true\"}","BattleSystem:str":"database","Color:struct":"{\"BasicColors\":\"\",\"ColorNormal:str\":\"0\",\"ColorSystem:str\":\"16\",\"ColorCrisis:str\":\"17\",\"ColorDeath:str\":\"18\",\"ColorGaugeBack:str\":\"19\",\"ColorHPGauge1:str\":\"20\",\"ColorHPGauge2:str\":\"21\",\"ColorMPGauge1:str\":\"22\",\"ColorMPGauge2:str\":\"23\",\"ColorMPCost:str\":\"23\",\"ColorPowerUp:str\":\"24\",\"ColorPowerDown:str\":\"25\",\"ColorCTGauge1:str\":\"26\",\"ColorCTGauge2:str\":\"27\",\"ColorTPGauge1:str\":\"28\",\"ColorTPGauge2:str\":\"29\",\"ColorTPCost:str\":\"29\",\"ColorPending:str\":\"#2a847d\",\"ColorExpGauge1:str\":\"30\",\"ColorExpGauge2:str\":\"31\",\"ColorMaxLvGauge1:str\":\"14\",\"ColorMaxLvGauge2:str\":\"6\",\"AlphaColors\":\"\",\"OutlineColor:str\":\"rgba(0, 0, 0, 0.6)\",\"OutlineColorGauge:str\":\"rgba(0, 0, 0, 1.0)\",\"DimColor1:str\":\"rgba(0, 0, 0, 0.6)\",\"DimColor2:str\":\"rgba(0, 0, 0, 0)\",\"ItemBackColor1:str\":\"rgba(32, 32, 32, 0.5)\",\"ItemBackColor2:str\":\"rgba(0, 0, 0, 0.5)\",\"ConditionalColors\":\"\",\"ActorHPColor:func\":\"\\\"// Set the variables used in this function.\\\\nlet actor = arguments[0];\\\\n\\\\n// Check if the actor exists. If not, return normal.\\\\nif (!actor) {\\\\n    return this.normalColor();\\\\n\\\\n// If the actor is dead, return death color.\\\\n} else if (actor.isDead()) {\\\\n    return this.deathColor();\\\\n\\\\n// If the actor is dying, return crisis color.\\\\n} else if (actor.isDying()) {\\\\n    return this.crisisColor();\\\\n\\\\n// Otherwise, return the normal color.\\\\n} else {\\\\n    return this.normalColor();\\\\n}\\\"\",\"ActorMPColor:func\":\"\\\"// Set the variables used in this function.\\\\nlet actor = arguments[0];\\\\n\\\\n// Check if the actor exists. If not, return normal.\\\\nif (!actor) {\\\\n    return this.normalColor();\\\\n\\\\n// If MP rate is below 25%, return crisis color.\\\\n} else if (actor.mpRate() < 0.25) {\\\\n    return this.crisisColor();\\\\n\\\\n// Otherwise, return the normal color.\\\\n} else {\\\\n    return this.normalColor();\\\\n}\\\"\",\"ActorTPColor:func\":\"\\\"// Set the variables used in this function.\\\\nlet actor = arguments[0];\\\\n\\\\n// Check if the actor exists. If not, return normal.\\\\nif (!actor) {\\\\n    return this.normalColor();\\\\n\\\\n// If TP rate is below 25%, return crisis color.\\\\n} else if (actor.tpRate() < 0.25) {\\\\n    return this.crisisColor();\\\\n\\\\n// Otherwise, return the normal color.\\\\n} else {\\\\n    return this.normalColor();\\\\n}\\\"\",\"ParamChange:func\":\"\\\"// Set the variables used in this function.\\\\nlet change = arguments[0];\\\\n\\\\n// If a positive change, use power up color.\\\\nif (change > 0) {\\\\n    return this.powerUpColor();\\\\n\\\\n// If a negative change, use power down color.\\\\n} else if (change < 0) {\\\\n    return this.powerDownColor();\\\\n\\\\n// Otherwise, return the normal color.\\\\n} else {\\\\n    return this.normalColor();\\\\n}\\\"\",\"DamageColor:func\":\"\\\"// Set the variables used in this function.\\\\nlet colorType = arguments[0];\\\\n\\\\n// Check the value of the color type\\\\n// and return an appropriate color.\\\\nswitch (colorType) {\\\\n\\\\n    case 0: // HP damage\\\\n        return \\\\\\\"#ffffff\\\\\\\";\\\\n\\\\n    case 1: // HP recover\\\\n        return \\\\\\\"#b9ffb5\\\\\\\";\\\\n\\\\n    case 2: // MP damage\\\\n        return \\\\\\\"#bb88bb\\\\\\\";\\\\n\\\\n    case 3: // MP recover\\\\n        return \\\\\\\"#80b0ff\\\\\\\";\\\\n\\\\n    default:\\\\n        return \\\\\\\"#808080\\\\\\\";\\\\n}\\\"\"}","Gold:struct":"{\"GoldMax:num\":\"999999999\",\"GoldFontSize:num\":\"24\",\"GoldIcon:num\":\"314\",\"GoldOverlap:str\":\"A Lot\",\"ItemStyle:eval\":\"true\"}","ImgLoad:struct":"{\"animations:arraystr\":\"[]\",\"battlebacks1:arraystr\":\"[]\",\"battlebacks2:arraystr\":\"[]\",\"characters:arraystr\":\"[]\",\"enemies:arraystr\":\"[]\",\"faces:arraystr\":\"[]\",\"parallaxes:arraystr\":\"[]\",\"pictures:arraystr\":\"[]\",\"sv_actors:arraystr\":\"[]\",\"sv_enemies:arraystr\":\"[]\",\"system:arraystr\":\"[\\\"Balloon\\\",\\\"IconSet\\\"]\",\"tilesets:arraystr\":\"[]\",\"titles1:arraystr\":\"[]\",\"titles2:arraystr\":\"[]\"}","KeyboardInput:struct":"{\"Controls\":\"\",\"WASD:eval\":\"false\",\"DashToggleR:eval\":\"false\",\"NameInput\":\"\",\"EnableNameInput:eval\":\"true\",\"DefaultMode:str\":\"keyboard\",\"QwertyLayout:eval\":\"true\",\"NameInputMessage:eval\":\"\\\"Type in this character's name.\\\\nPress \\\\\\\\c[5]ENTER\\\\\\\\c[0] when you're done.\\\\n\\\\n-or-\\\\n\\\\nPress \\\\\\\\c[5]arrow keys\\\\\\\\c[0]/\\\\\\\\c[5]TAB\\\\\\\\c[0] to switch\\\\nto manual character entry.\\\\n\\\\nPress \\\\\\\\c[5]ESC\\\\\\\\c[0]/\\\\\\\\c[5]TAB\\\\\\\\c[0] to use to keyboard.\\\"\",\"NumberInput\":\"\",\"EnableNumberInput:eval\":\"true\",\"ButtonAssist\":\"\",\"Keyboard:str\":\"Keyboard\",\"Manual:str\":\"Manual\"}","MenuBg:struct":"{\"BlurStrength:num\":\"8\",\"Scene_Menu:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Item:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Skill:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Equip:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Status:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Options:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Save:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Load:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_GameEnd:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"128\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Shop:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Name:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Unlisted:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\"}","ButtonAssist:struct":"{\"General\":\"\",\"Enable:eval\":\"false\",\"Location:str\":\"bottom\",\"BgType:num\":\"0\",\"SplitEscape:eval\":\"false\",\"Text\":\"\",\"TextFmt:str\":\"%1:%2\",\"MultiKeyFmt:str\":\"%1/%2\",\"OkText:str\":\"Select\",\"CancelText:str\":\"Back\",\"SwitchActorText:str\":\"Switch Ally\",\"Keys\":\"\",\"KeyUnlisted:str\":\"\\\\}‚ù™%1‚ù´\\\\{\",\"KeyUP:str\":\"^\",\"KeyDOWN:str\":\"v\",\"KeyLEFT:str\":\"<<\",\"KeyRIGHT:str\":\">>\",\"KeySHIFT:str\":\"\\\\}‚ù™SHIFT‚ù´\\\\{\",\"KeyTAB:str\":\"\\\\}‚ù™TAB‚ù´\\\\{\",\"KeyA:str\":\"A\",\"KeyB:str\":\"B\",\"KeyC:str\":\"C\",\"KeyD:str\":\"D\",\"KeyE:str\":\"E\",\"KeyF:str\":\"F\",\"KeyG:str\":\"G\",\"KeyH:str\":\"H\",\"KeyI:str\":\"I\",\"KeyJ:str\":\"J\",\"KeyK:str\":\"K\",\"KeyL:str\":\"L\",\"KeyM:str\":\"M\",\"KeyN:str\":\"N\",\"KeyO:str\":\"O\",\"KeyP:str\":\"P\",\"KeyQ:str\":\"Q\",\"KeyR:str\":\"R\",\"KeyS:str\":\"S\",\"KeyT:str\":\"T\",\"KeyU:str\":\"U\",\"KeyV:str\":\"V\",\"KeyW:str\":\"W\",\"KeyX:str\":\"X\",\"KeyY:str\":\"Y\",\"KeyZ:str\":\"Z\"}","ControllerButtons:arraystruct":"[]","MenuLayout:struct":"{\"Title:struct\":\"{\\\"TitleScreen\\\":\\\"\\\",\\\"DocumentTitleFmt:str\\\":\\\"%1: %2 - Version %3\\\",\\\"Subtitle:str\\\":\\\"Subtitle\\\",\\\"Version:str\\\":\\\"0.00\\\",\\\"drawGameTitle:func\\\":\\\"\\\\\\\"const x = 20;\\\\\\\\nconst y = Graphics.height / 4;\\\\\\\\nconst maxWidth = Graphics.width - x * 2;\\\\\\\\nconst text = $dataSystem.gameTitle;\\\\\\\\nconst bitmap = this._gameTitleSprite.bitmap;\\\\\\\\nbitmap.fontFace = $gameSystem.mainFontFace();\\\\\\\\nbitmap.outlineColor = \\\\\\\\\\\\\\\"black\\\\\\\\\\\\\\\";\\\\\\\\nbitmap.outlineWidth = 8;\\\\\\\\nbitmap.fontSize = 72;\\\\\\\\nbitmap.drawText(text, x, y, maxWidth, 48, \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\");\\\\\\\"\\\",\\\"drawGameSubtitle:func\\\":\\\"\\\\\\\"const x = 20;\\\\\\\\nconst y = Graphics.height / 4 + 72;\\\\\\\\nconst maxWidth = Graphics.width - x * 2;\\\\\\\\nconst text = Scene_Title.subtitle;\\\\\\\\nconst bitmap = this._gameTitleSprite.bitmap;\\\\\\\\nbitmap.fontFace = $gameSystem.mainFontFace();\\\\\\\\nbitmap.outlineColor = \\\\\\\\\\\\\\\"black\\\\\\\\\\\\\\\";\\\\\\\\nbitmap.outlineWidth = 6;\\\\\\\\nbitmap.fontSize = 48;\\\\\\\\nbitmap.drawText(text, x, y, maxWidth, 48, \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\");\\\\\\\"\\\",\\\"drawGameVersion:func\\\":\\\"\\\\\\\"const bitmap = this._gameTitleSprite.bitmap;\\\\\\\\nconst x = 0;\\\\\\\\nconst y = Graphics.height - 20;\\\\\\\\nconst width = Math.round(Graphics.width / 4);\\\\\\\\nconst height = 20;\\\\\\\\nconst c1 = ColorManager.dimColor1();\\\\\\\\nconst c2 = ColorManager.dimColor2();\\\\\\\\nconst text = 'Version ' + Scene_Title.version;\\\\\\\\nbitmap.gradientFillRect(x, y, width, height, c1, c2);\\\\\\\\nbitmap.fontFace = $gameSystem.mainFontFace();\\\\\\\\nbitmap.outlineColor = \\\\\\\\\\\\\\\"black\\\\\\\\\\\\\\\";\\\\\\\\nbitmap.outlineWidth = 3;\\\\\\\\nbitmap.fontSize = 16;\\\\\\\\nbitmap.drawText(text, x + 4, y, Graphics.width, height, \\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\");\\\\\\\"\\\",\\\"CommandRect:func\\\":\\\"\\\\\\\"const offsetX = $dataSystem.titleCommandWindow.offsetX;\\\\\\\\nconst offsetY = $dataSystem.titleCommandWindow.offsetY;\\\\\\\\nconst rows = this.commandWindowRows();\\\\\\\\nconst width = this.mainCommandWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nconst x = (Graphics.boxWidth - width) / 2 + offsetX;\\\\\\\\nconst y = Graphics.boxHeight - height - 96 + offsetY;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ButtonFadeSpeed:num\\\":\\\"4\\\"}\",\"MainMenu:struct\":\"{\\\"CommandWindow\\\":\\\"\\\",\\\"CommandBgType:num\\\":\\\"0\\\",\\\"CommandRect:func\\\":\\\"\\\\\\\"const width = this.mainCommandWidth();\\\\\\\\nconst height = this.mainAreaHeight() - this.goldWindowRect().height;\\\\\\\\nconst x = this.isRightInputMode() ? Graphics.boxWidth - width : 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"GoldWindow\\\":\\\"\\\",\\\"GoldBgType:num\\\":\\\"0\\\",\\\"GoldRect:func\\\":\\\"\\\\\\\"const rows = 1;\\\\\\\\nconst width = this.mainCommandWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nconst x = this.isRightInputMode() ? Graphics.boxWidth - width : 0;\\\\\\\\nconst y = this.mainAreaBottom() - height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusWindow\\\":\\\"\\\",\\\"StatusBgType:num\\\":\\\"0\\\",\\\"StatusRect:func\\\":\\\"\\\\\\\"const width = Graphics.boxWidth - this.mainCommandWidth();\\\\\\\\nconst height = this.mainAreaHeight();\\\\\\\\nconst x = this.isRightInputMode() ? 0 : Graphics.boxWidth - width;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"ItemMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"0\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.helpAreaTop();\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.helpAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"CategoryWindow\\\":\\\"\\\",\\\"CategoryBgType:num\\\":\\\"0\\\",\\\"CategoryRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ItemWindow\\\":\\\"\\\",\\\"ItemBgType:num\\\":\\\"0\\\",\\\"ItemRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._categoryWindow.y + this._categoryWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaBottom() - y;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ActorWindow\\\":\\\"\\\",\\\"ActorBgType:num\\\":\\\"0\\\",\\\"ActorRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"SkillMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"0\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.helpAreaTop();\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.helpAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"SkillTypeWindow\\\":\\\"\\\",\\\"SkillTypeBgType:num\\\":\\\"0\\\",\\\"SkillTypeRect:func\\\":\\\"\\\\\\\"const rows = 3;\\\\\\\\nconst width = this.mainCommandWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nconst x = this.isRightInputMode() ? Graphics.boxWidth - width : 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusWindow\\\":\\\"\\\",\\\"StatusBgType:num\\\":\\\"0\\\",\\\"StatusRect:func\\\":\\\"\\\\\\\"const width = Graphics.boxWidth - this.mainCommandWidth();\\\\\\\\nconst height = this._skillTypeWindow.height;\\\\\\\\nconst x = this.isRightInputMode() ? 0 : Graphics.boxWidth - width;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ItemWindow\\\":\\\"\\\",\\\"ItemBgType:num\\\":\\\"0\\\",\\\"ItemRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._statusWindow.y + this._statusWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight() - this._statusWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ActorWindow\\\":\\\"\\\",\\\"ActorBgType:num\\\":\\\"0\\\",\\\"ActorRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"EquipMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"0\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.helpAreaTop();\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.helpAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusWindow\\\":\\\"\\\",\\\"StatusBgType:num\\\":\\\"0\\\",\\\"StatusRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst width = this.statusWidth();\\\\\\\\nconst height = this.mainAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"CommandWindow\\\":\\\"\\\",\\\"CommandBgType:num\\\":\\\"0\\\",\\\"CommandRect:func\\\":\\\"\\\\\\\"const x = this.statusWidth();\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = Graphics.boxWidth - this.statusWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"SlotWindow\\\":\\\"\\\",\\\"SlotBgType:num\\\":\\\"0\\\",\\\"SlotRect:func\\\":\\\"\\\\\\\"const commandWindowRect = this.commandWindowRect();\\\\\\\\nconst x = this.statusWidth();\\\\\\\\nconst y = commandWindowRect.y + commandWindowRect.height;\\\\\\\\nconst width = Graphics.boxWidth - this.statusWidth();\\\\\\\\nconst height = this.mainAreaHeight() - commandWindowRect.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ItemWindow\\\":\\\"\\\",\\\"ItemBgType:num\\\":\\\"0\\\",\\\"ItemRect:func\\\":\\\"\\\\\\\"return this.slotWindowRect();\\\\\\\"\\\"}\",\"StatusMenu:struct\":\"{\\\"ProfileWindow\\\":\\\"\\\",\\\"ProfileBgType:num\\\":\\\"0\\\",\\\"ProfileRect:func\\\":\\\"\\\\\\\"const width = Graphics.boxWidth;\\\\\\\\nconst height = this.profileHeight();\\\\\\\\nconst x = 0;\\\\\\\\nconst y = this.mainAreaBottom() - height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusWindow\\\":\\\"\\\",\\\"StatusBgType:num\\\":\\\"0\\\",\\\"StatusRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.statusParamsWindowRect().y - y;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusParamsWindow\\\":\\\"\\\",\\\"StatusParamsBgType:num\\\":\\\"0\\\",\\\"StatusParamsRect:func\\\":\\\"\\\\\\\"const width = this.statusParamsWidth();\\\\\\\\nconst height = this.statusParamsHeight();\\\\\\\\nconst x = 0;\\\\\\\\nconst y = this.mainAreaBottom() - this.profileHeight() - height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusEquipWindow\\\":\\\"\\\",\\\"StatusEquipBgType:num\\\":\\\"0\\\",\\\"StatusEquipRect:func\\\":\\\"\\\\\\\"const width = Graphics.boxWidth - this.statusParamsWidth();\\\\\\\\nconst height = this.statusParamsHeight();\\\\\\\\nconst x = this.statusParamsWidth();\\\\\\\\nconst y = this.mainAreaBottom() - this.profileHeight() - height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"OptionsMenu:struct\":\"{\\\"OptionsWindow\\\":\\\"\\\",\\\"OptionsBgType:num\\\":\\\"0\\\",\\\"OptionsRect:func\\\":\\\"\\\\\\\"const n = Math.min(this.maxCommands(), this.maxVisibleCommands());\\\\\\\\nconst width = 400;\\\\\\\\nconst height = this.calcWindowHeight(n, true);\\\\\\\\nconst x = (Graphics.boxWidth - width) / 2;\\\\\\\\nconst y = (Graphics.boxHeight - height) / 2;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"SaveMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"0\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.calcWindowHeight(rows, false);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ListWindow\\\":\\\"\\\",\\\"ListBgType:num\\\":\\\"0\\\",\\\"ListRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop() + this._helpWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight() - this._helpWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"LoadMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"0\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.calcWindowHeight(rows, false);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ListWindow\\\":\\\"\\\",\\\"ListBgType:num\\\":\\\"0\\\",\\\"ListRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop() + this._helpWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight() - this._helpWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"GameEnd:struct\":\"{\\\"CommandList:arraystruct\\\":\\\"[\\\\\\\"{\\\\\\\\\\\\\\\"Symbol:str\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"toTitle\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"TextStr:str\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Untitled\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"TextJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return TextManager.toTitle;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"ShowJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return true;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"EnableJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return true;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"ExtJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return null;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"CallHandlerJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"SceneManager._scene.commandToTitle();\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"{\\\\\\\\\\\\\\\"Symbol:str\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"cancel\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"TextStr:str\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Untitled\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"TextJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return TextManager.cancel;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"ShowJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return true;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"EnableJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return true;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"ExtJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return null;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"CallHandlerJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"SceneManager._scene.popScene();\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\"]\\\",\\\"CommandBgType:num\\\":\\\"0\\\",\\\"CommandRect:func\\\":\\\"\\\\\\\"const rows = 2;\\\\\\\\nconst width = this.mainCommandWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nconst x = (Graphics.boxWidth - width) / 2;\\\\\\\\nconst y = (Graphics.boxHeight - height) / 2;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"ShopMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"0\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const wx = 0;\\\\\\\\nconst wy = this.helpAreaTop();\\\\\\\\nconst ww = Graphics.boxWidth;\\\\\\\\nconst wh = this.helpAreaHeight();\\\\\\\\nreturn new Rectangle(wx, wy, ww, wh);\\\\\\\"\\\",\\\"GoldWindow\\\":\\\"\\\",\\\"GoldBgType:num\\\":\\\"0\\\",\\\"GoldRect:func\\\":\\\"\\\\\\\"const rows = 1;\\\\\\\\nconst width = this.mainCommandWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nconst x = Graphics.boxWidth - width;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"CommandWindow\\\":\\\"\\\",\\\"CommandBgType:num\\\":\\\"0\\\",\\\"CommandRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = this._goldWindow.x;\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"DummyWindow\\\":\\\"\\\",\\\"DummyBgType:num\\\":\\\"0\\\",\\\"DummyRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._commandWindow.y + this._commandWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight() - this._commandWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"NumberWindow\\\":\\\"\\\",\\\"NumberBgType:num\\\":\\\"0\\\",\\\"NumberRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._dummyWindow.y;\\\\\\\\nconst width = Graphics.boxWidth - this.statusWidth();\\\\\\\\nconst height = this._dummyWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusWindow\\\":\\\"\\\",\\\"StatusBgType:num\\\":\\\"0\\\",\\\"StatusRect:func\\\":\\\"\\\\\\\"const width = this.statusWidth();\\\\\\\\nconst height = this._dummyWindow.height;\\\\\\\\nconst x = Graphics.boxWidth - width;\\\\\\\\nconst y = this._dummyWindow.y;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"BuyWindow\\\":\\\"\\\",\\\"BuyBgType:num\\\":\\\"0\\\",\\\"BuyRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._dummyWindow.y;\\\\\\\\nconst width = Graphics.boxWidth - this.statusWidth();\\\\\\\\nconst height = this._dummyWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"CategoryWindow\\\":\\\"\\\",\\\"CategoryBgType:num\\\":\\\"0\\\",\\\"CategoryRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._dummyWindow.y;\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"SellWindow\\\":\\\"\\\",\\\"SellBgType:num\\\":\\\"0\\\",\\\"SellRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._categoryWindow.y + this._categoryWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height =\\\\\\\\n    this.mainAreaHeight() -\\\\\\\\n    this._commandWindow.height -\\\\\\\\n    this._categoryWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"NameMenu:struct\":\"{\\\"EditWindow\\\":\\\"\\\",\\\"EditBgType:num\\\":\\\"0\\\",\\\"EditRect:func\\\":\\\"\\\\\\\"const rows = 9;\\\\\\\\nconst inputWindowHeight = this.calcWindowHeight(rows, true);\\\\\\\\nconst padding = $gameSystem.windowPadding();\\\\\\\\nconst width = 600;\\\\\\\\nconst height = Math.min(ImageManager.faceHeight + padding * 2, this.mainAreaHeight() - inputWindowHeight);\\\\\\\\nconst x = (Graphics.boxWidth - width) / 2;\\\\\\\\nconst y = (this.mainAreaHeight() - (height + inputWindowHeight)) / 2 + this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"InputWindow\\\":\\\"\\\",\\\"InputBgType:num\\\":\\\"0\\\",\\\"InputRect:func\\\":\\\"\\\\\\\"const x = this._editWindow.x;\\\\\\\\nconst y = this._editWindow.y + this._editWindow.height;\\\\\\\\nconst rows = 9;\\\\\\\\nconst width = this._editWindow.width;\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\"}","Param:struct":"{\"DisplayedParams:arraystr\":\"[\\\"ATK\\\",\\\"DEF\\\",\\\"MAT\\\",\\\"MDF\\\",\\\"AGI\\\",\\\"LUK\\\"]\",\"ExtDisplayedParams:arraystr\":\"[\\\"MaxHP\\\",\\\"MaxMP\\\",\\\"ATK\\\",\\\"DEF\\\",\\\"MAT\\\",\\\"MDF\\\",\\\"AGI\\\",\\\"LUK\\\"]\",\"BasicParameters\":\"\",\"CrisisRate:num\":\"0.25\",\"BasicParameterFormula:func\":\"\\\"// Determine the variables used in this calculation.\\\\nlet paramId = arguments[0];\\\\nlet base = this.paramBase(paramId);\\\\nlet plus = this.paramPlus(paramId);\\\\nlet paramRate = this.paramRate(paramId);\\\\nlet buffRate = this.paramBuffRate(paramId);\\\\nlet flatBonus = this.paramFlatBonus(paramId);\\\\n\\\\n// Formula to determine total parameter value.\\\\nlet value = (base + plus) * paramRate * buffRate + flatBonus;\\\\n\\\\n// Determine the limits\\\\nconst maxValue = this.paramMax(paramId);\\\\nconst minValue = this.paramMin(paramId);\\\\n\\\\n// Final value\\\\nreturn Math.round(value.clamp(minValue, maxValue));\\\"\",\"BasicParamCaps\":\"\",\"BasicActorParamCaps\":\"\",\"BasicActorParamMax0:str\":\"9999\",\"BasicActorParamMax1:str\":\"9999\",\"BasicActorParamMax2:str\":\"999\",\"BasicActorParamMax3:str\":\"999\",\"BasicActorParamMax4:str\":\"999\",\"BasicActorParamMax5:str\":\"999\",\"BasicActorParamMax6:str\":\"999\",\"BasicActorParamMax7:str\":\"999\",\"BasicEnemyParamCaps\":\"\",\"BasicEnemyParamMax0:str\":\"999999\",\"BasicEnemyParamMax1:str\":\"9999\",\"BasicEnemyParamMax2:str\":\"999\",\"BasicEnemyParamMax3:str\":\"999\",\"BasicEnemyParamMax4:str\":\"999\",\"BasicEnemyParamMax5:str\":\"999\",\"BasicEnemyParamMax6:str\":\"999\",\"BasicEnemyParamMax7:str\":\"999\",\"XParameters\":\"\",\"XParameterFormula:func\":\"\\\"// Determine the variables used in this calculation.\\\\nlet xparamId = arguments[0];\\\\nlet base = this.traitsSum(Game_BattlerBase.TRAIT_XPARAM, xparamId);\\\\nlet plus = this.xparamPlus(xparamId);\\\\nlet paramRate = this.xparamRate(xparamId);\\\\nlet flatBonus = this.xparamFlatBonus(xparamId);\\\\n\\\\n// Formula to determine total parameter value.\\\\nlet value = (base + plus) * paramRate + flatBonus;\\\\n\\\\n// Final value\\\\nreturn value;\\\"\",\"XParamVocab\":\"\",\"XParamVocab0:str\":\"Hit\",\"XParamVocab1:str\":\"Evasion\",\"XParamVocab2:str\":\"Critical Rate\",\"XParamVocab3:str\":\"Critical Evade\",\"XParamVocab4:str\":\"Magic Evade\",\"XParamVocab5:str\":\"Magic Reflect\",\"XParamVocab6:str\":\"Counter\",\"XParamVocab7:str\":\"HP Regen\",\"XParamVocab8:str\":\"MP Regen\",\"XParamVocab9:str\":\"TP Regen\",\"SParameters\":\"\",\"SParameterFormula:func\":\"\\\"// Determine the variables used in this calculation.\\\\nlet sparamId = arguments[0];\\\\nlet base = this.traitsPi(Game_BattlerBase.TRAIT_SPARAM, sparamId);\\\\nlet plus = this.sparamPlus(sparamId);\\\\nlet paramRate = this.sparamRate(sparamId);\\\\nlet flatBonus = this.sparamFlatBonus(sparamId);\\\\n\\\\n// Formula to determine total parameter value.\\\\nlet value = (base + plus) * paramRate + flatBonus;\\\\n\\\\n// Final value\\\\nreturn value;\\\"\",\"SParamVocab\":\"\",\"SParamVocab0:str\":\"Aggro\",\"SParamVocab1:str\":\"Guard\",\"SParamVocab2:str\":\"Recovery\",\"SParamVocab3:str\":\"Item Effect\",\"SParamVocab4:str\":\"MP Cost\",\"SParamVocab5:str\":\"TP Charge\",\"SParamVocab6:str\":\"Physical DMG\",\"SParamVocab7:str\":\"Magical DMG\",\"SParamVocab8:str\":\"Floor DMG\",\"SParamVocab9:str\":\"EXP Gain\",\"Icons\":\"\",\"DrawIcons:eval\":\"true\",\"IconParam0:str\":\"84\",\"IconParam1:str\":\"165\",\"IconParam2:str\":\"76\",\"IconParam3:str\":\"81\",\"IconParam4:str\":\"101\",\"IconParam5:str\":\"133\",\"IconParam6:str\":\"140\",\"IconParam7:str\":\"87\",\"IconXParam0:str\":\"102\",\"IconXParam1:str\":\"82\",\"IconXParam2:str\":\"78\",\"IconXParam3:str\":\"82\",\"IconXParam4:str\":\"171\",\"IconXParam5:str\":\"222\",\"IconXParam6:str\":\"77\",\"IconXParam7:str\":\"72\",\"IconXParam8:str\":\"72\",\"IconXParam9:str\":\"72\",\"IconSParam0:str\":\"5\",\"IconSParam1:str\":\"128\",\"IconSParam2:str\":\"72\",\"IconSParam3:str\":\"176\",\"IconSParam4:str\":\"165\",\"IconSParam5:str\":\"164\",\"IconSParam6:str\":\"76\",\"IconSParam7:str\":\"79\",\"IconSParam8:str\":\"141\",\"IconSParam9:str\":\"73\"}","CustomParam:arraystruct":"[\"{\\\"ParamName:str\\\":\\\"Strength\\\",\\\"Abbreviation:str\\\":\\\"str\\\",\\\"Icon:num\\\":\\\"77\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.atk * 0.75) + (user.def * 0.25);\\\\\\\"\\\"}\",\"{\\\"ParamName:str\\\":\\\"Dexterity\\\",\\\"Abbreviation:str\\\":\\\"dex\\\",\\\"Icon:num\\\":\\\"82\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.agi * 0.75) + (user.atk * 0.25);\\\\\\\"\\\"}\",\"{\\\"ParamName:str\\\":\\\"Constitution\\\",\\\"Abbreviation:str\\\":\\\"con\\\",\\\"Icon:num\\\":\\\"81\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.def * 0.75) + (user.mdf * 0.25);\\\\\\\"\\\"}\",\"{\\\"ParamName:str\\\":\\\"Intelligence\\\",\\\"Abbreviation:str\\\":\\\"int\\\",\\\"Icon:num\\\":\\\"79\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.mat * 0.75) + (user.mdf * 0.25);\\\\\\\"\\\"}\",\"{\\\"ParamName:str\\\":\\\"Wisdom\\\",\\\"Abbreviation:str\\\":\\\"wis\\\",\\\"Icon:num\\\":\\\"72\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.mdf * 0.75) + (user.luk * 0.25);\\\\\\\"\\\"}\",\"{\\\"ParamName:str\\\":\\\"Charisma\\\",\\\"Abbreviation:str\\\":\\\"cha\\\",\\\"Icon:num\\\":\\\"84\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.luk * 0.75) + (user.agi * 0.25);\\\\\\\"\\\"}\"]","ScreenResolution:struct":"{\"Maps\":\"\",\"AutoScrollLockX:eval\":\"true\",\"AutoScrollLockY:eval\":\"true\",\"DisplayLockX:num\":\"0.15625\",\"DisplayLockY:num\":\"0.00000\",\"Troops\":\"\",\"RepositionActors:eval\":\"true\",\"RepositionEnemies:eval\":\"true\",\"RepositionEnemies130:eval\":\"false\"}","ScreenShake:struct":"{\"DefaultStyle:str\":\"random\",\"originalJS:func\":\"\\\"// Calculation\\\\nthis.x += Math.round($gameScreen.shake());\\\"\",\"randomJS:func\":\"\\\"// Calculation\\\\n// Original Formula by Aries of Sheratan\\\\nconst power = $gameScreen._shakePower * 0.75;\\\\nconst speed = $gameScreen._shakeSpeed * 0.60;\\\\nconst duration = $gameScreen._shakeDuration;\\\\nthis.x += Math.round(Math.randomInt(power) - Math.randomInt(speed)) * (Math.min(duration, 30) * 0.5);\\\\nthis.y += Math.round(Math.randomInt(power) - Math.randomInt(speed)) * (Math.min(duration, 30) * 0.5);\\\"\",\"horzJS:func\":\"\\\"// Calculation\\\\n// Original Formula by Aries of Sheratan\\\\nconst power = $gameScreen._shakePower * 0.75;\\\\nconst speed = $gameScreen._shakeSpeed * 0.60;\\\\nconst duration = $gameScreen._shakeDuration;\\\\nthis.x += Math.round(Math.randomInt(power) - Math.randomInt(speed)) * (Math.min(duration, 30) * 0.5);\\\"\",\"vertJS:func\":\"\\\"// Calculation\\\\n// Original Formula by Aries of Sheratan\\\\nconst power = $gameScreen._shakePower * 0.75;\\\\nconst speed = $gameScreen._shakeSpeed * 0.60;\\\\nconst duration = $gameScreen._shakeDuration;\\\\nthis.y += Math.round(Math.randomInt(power) - Math.randomInt(speed)) * (Math.min(duration, 30) * 0.5);\\\"\"}","TitleCommandList:arraystruct":"[\"{\\\"Symbol:str\\\":\\\"newGame\\\",\\\"TextStr:str\\\":\\\"Untitled\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.newGame;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return true;\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return true;\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandNewGame();\\\\\\\"\\\"}\",\"{\\\"Symbol:str\\\":\\\"continue\\\",\\\"TextStr:str\\\":\\\"Untitled\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.continue_;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return true;\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return DataManager.isAnySavefileExists();\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandContinue();\\\\\\\"\\\"}\"]","TitlePicButtons:arraystruct":"[]","UI:struct":"{\"UIArea\":\"\",\"FadeSpeed:num\":\"24\",\"BoxMargin:num\":\"4\",\"CommandWidth:num\":\"240\",\"BottomHelp:eval\":\"false\",\"RightMenus:eval\":\"true\",\"ShowButtons:eval\":\"true\",\"cancelShowButton:eval\":\"true\",\"menuShowButton:eval\":\"true\",\"pagedownShowButton:eval\":\"true\",\"numberShowButton:eval\":\"true\",\"ButtonHeight:num\":\"52\",\"BottomButtons:eval\":\"false\",\"SideButtons:eval\":\"true\",\"StateIconsNonFrame:eval\":\"true\",\"MenuObjects\":\"\",\"LvExpGauge:eval\":\"true\",\"ParamArrow:str\":\"‚Üí\",\"TextCodeSupport\":\"\",\"TextCodeClassNames:eval\":\"true\",\"TextCodeNicknames:eval\":\"false\"}","Window:struct":"{\"WindowDefaults\":\"\",\"EnableMasking:eval\":\"false\",\"CorrectSkinBleeding:eval\":\"true\",\"LineHeight:num\":\"36\",\"ItemPadding:num\":\"8\",\"BackOpacity:num\":\"192\",\"TranslucentOpacity:num\":\"160\",\"OpenSpeed:num\":\"32\",\"ColSpacing:num\":\"8\",\"RowSpacing:num\":\"4\",\"ScrollBar\":\"\",\"ShowScrollBar:eval\":\"true\",\"BarThickness:num\":\"2\",\"BarOffset:num\":\"+2\",\"BarBodyColor:str\":\"0\",\"OffBarColor:str\":\"7\",\"OffBarOpacity:num\":\"128\",\"SelectableItems\":\"\",\"ShowItemBackground:eval\":\"true\",\"ItemHeight:num\":\"8\",\"DrawItemBackgroundJS:func\":\"\\\"const rect = arguments[0];\\\\nconst c1 = ColorManager.itemBackColor1();\\\\nconst c2 = ColorManager.itemBackColor2();\\\\nconst x = rect.x;\\\\nconst y = rect.y;\\\\nconst w = rect.width;\\\\nconst h = rect.height;\\\\nthis.contentsBack.gradientFillRect(x, y, w, h, c1, c2, true);\\\\nthis.contentsBack.strokeRect(x, y, w, h, c1);\\\"\",\"TextPopup\":\"\",\"DurationPerChat:num\":\"1.5\",\"MinDuration:num\":\"90\",\"MaxDuration:num\":\"300\"}","jsQuickFunc:arraystruct":"[\"{\\\"FunctionName:str\\\":\\\"Example\\\",\\\"CodeJS:json\\\":\\\"\\\\\\\"// Insert this as a function anywhere you can input code\\\\\\\\n// such as Script Calls or Conditional Branch Scripts.\\\\\\\\n\\\\\\\\n// Process Code\\\\\\\\nreturn 'Example';\\\\\\\"\\\"}\",\"{\\\"FunctionName:str\\\":\\\"Bad  Code  Name\\\",\\\"CodeJS:json\\\":\\\"\\\\\\\"// If a function name has spaces in them, the spaces will\\\\\\\\n// be removed. \\\\\\\\\\\\\\\"Bad  Code  Name\\\\\\\\\\\\\\\" becomes \\\\\\\\\\\\\\\"BadCodeName\\\\\\\\\\\\\\\".\\\\\\\\n\\\\\\\\n// Process Code\\\\\\\\nOhNoItsBadCode()\\\\\\\\n\\\\\\\\n// If a function has bad code, a fail safe will catch the\\\\\\\\n// error and display it in the console.\\\\\\\"\\\"}\",\"{\\\"FunctionName:str\\\":\\\"RandomNumber\\\",\\\"CodeJS:json\\\":\\\"\\\\\\\"// This generates a random number from 0 to itself.\\\\\\\\n// Example: RandomNumber(10)\\\\\\\\n\\\\\\\\n// Process Code\\\\\\\\nconst number = (arguments[0] || 0) + 1;\\\\\\\\nreturn Math.floor(number * Math.random());\\\\\\\"\\\"}\",\"{\\\"FunctionName:str\\\":\\\"RandomBetween\\\",\\\"CodeJS:json\\\":\\\"\\\\\\\"// This generates a random number between two arguments.\\\\\\\\n// Example: RandomBetween(5, 10)\\\\\\\\n\\\\\\\\n// Process Code\\\\\\\\nlet min = Math.min(arguments[0] || 0, arguments[1] || 0);\\\\\\\\nlet max = Math.max(arguments[0] || 0, arguments[1] || 0);\\\\\\\\nreturn Math.floor(Math.random() * (max - min + 1) + min);\\\\\\\"\\\"}\",\"{\\\"FunctionName:str\\\":\\\"RandomFrom\\\",\\\"CodeJS:json\\\":\\\"\\\\\\\"// Selects a number from the list of inserted numbers.\\\\\\\\n// Example: RandomFrom(5, 10, 15, 20)\\\\\\\\n\\\\\\\\n// Process Code\\\\\\\\nreturn arguments[Math.randomInt(arguments.length)];\\\\\\\"\\\"}\"]","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"VisuMZ_1_BattleCore","status":true,"description":"[RPG Maker MZ] [Tier 1] [Version 1.85] [BattleCore]","parameters":{"BreakHead":"----------------------------------","BattleCore":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","AutoBattle:struct":"{\"BattleDisplay\":\"\",\"AutoBattleMsg:str\":\"Press %1 or %2 to stop Auto Battle\",\"AutoBattleOK:str\":\"OK\",\"AutoBattleCancel:str\":\"Cancel\",\"AutoBattleBgType:num\":\"1\",\"AutoBattleRect:func\":\"\\\"const width = Graphics.width;\\\\nconst height = this.calcWindowHeight(1, false);\\\\nconst x = 0;\\\\nconst y = (Graphics.height - height) / 2;\\\\nreturn new Rectangle(x, y, width, height);\\\"\",\"Options\":\"\",\"AddOption:eval\":\"true\",\"AdjustRect:eval\":\"true\",\"StartName:str\":\"Auto Battle Start\",\"StyleName:str\":\"Auto Battle Style\",\"StyleOFF:str\":\"Attack\",\"StyleON:str\":\"Skills\"}","Damage:struct":"{\"DamageStyles\":\"\",\"DefaultDamageStyle:str\":\"Manual\",\"DamageStyleList:arraystruct\":\"[\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"Standard\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Declare Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Replace Formula\\\\\\\\\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"Armor Scaling\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Declare Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Replace Formula\\\\\\\\\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    // Calculate Base Armor\\\\\\\\\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    // Apply Armor to Damage\\\\\\\\\\\\\\\\n    if (armor >= 0) {\\\\\\\\\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"CT\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Multiplier\\\\\\\\\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Values\\\\\\\\\\\\\\\\nlet value = 0;\\\\\\\\\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\\\\\\\\\nlet attackStat = 0;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    attackStat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    attackStat =  a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    attackStat =  a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\\\\\\\\\nvalue = attackStat * 4;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\nvalue *= multiplier;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"D4\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Multiplier\\\\\\\\\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Values\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\nlet stat = 0;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.def;\\\\\\\\\\\\\\\\n    armor = 0;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.mdf;\\\\\\\\\\\\\\\\n    armor = 0;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage \\\\\\\\\\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"DQ\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Multiplier\\\\\\\\\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Get Primary Stats\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\\\\\\\\\nlet stat = 1;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Check for Recovery\\\\\\\\\\\\\\\\nif (this.isRecover()) {\\\\\\\\\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nlet value = 0;\\\\\\\\\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\\\\\\\\\n    // Plink Damage\\\\\\\\\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\\\\\\\\\n    value = baseline / 3;\\\\\\\\\\\\\\\\n} else {\\\\\\\\\\\\\\\\n    // Normal Damage\\\\\\\\\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\\\\\\\\\n    value = baseline / 2;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\nvalue *= multiplier;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"FF7\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Power\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare base Damage\\\\\\\\\\\\\\\\nlet baseDamage = 0;\\\\\\\\\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Final Damage\\\\\\\\\\\\\\\\nlet value = baseDamage;\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\nif (this.isRecover()) {\\\\\\\\\\\\\\\\n    value += 22 * power;\\\\\\\\\\\\\\\\n} else {\\\\\\\\\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"FF8\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Power\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Damage\\\\\\\\\\\\\\\\nlet Value = 0;\\\\\\\\\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\\\\\\\\\n    value *= power / 16;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = a.mat + power;\\\\\\\\\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\\\\\\\\\n    value *= power / 256;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"FF9\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Damage Constant\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Main Stats\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\\\\\\\\\nlet stat = 1;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Base Damage\\\\\\\\\\\\\\\\nlet baseDamage = power;\\\\\\\\\\\\\\\\nif (this.isPhysical()) {\\\\\\\\\\\\\\\\n    baseDamage += stat;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\\\\\\\\\n    baseDamage -= armor;\\\\\\\\\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Bonus Damage\\\\\\\\\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Final Damage\\\\\\\\\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"FF10\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Damage Constant\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Damage Offense Value\\\\\\\\\\\\\\\\nlet value = power;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Apply Damage Defense Value\\\\\\\\\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\\\\\\\\\n    value *= -1;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"MK\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Multiplier\\\\\\\\\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Values\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage \\\\\\\\\\\\\\\\nlet value = 0;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\nvalue *= multiplier;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"MOBA\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Damage Value\\\\\\\\\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value *= a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value *= a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value *= a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value *= a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    // Calculate Base Armor\\\\\\\\\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    // Apply Armor to Damage\\\\\\\\\\\\\\\\n    if (armor >= 0) {\\\\\\\\\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"PKMN\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Power\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Values\\\\\\\\\\\\\\\\nlet value = 0;\\\\\\\\\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\\\\\\\\\nlet attackStat = 0;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    attackStat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    attackStat =  a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    attackStat =  a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\"]\",\"Cap\":\"\",\"EnableDamageCap:eval\":\"false\",\"DefaultHardCap:num\":\"9999\",\"EnableSoftCap:eval\":\"false\",\"DefaultSoftCap:num\":\"0.80\",\"DefaultSoftScaler:num\":\"0.1275\",\"Popups\":\"\",\"PopupDuration:num\":\"130\",\"NewPopupBottom:eval\":\"true\",\"PopupPosition:str\":\"center\",\"EndBattlePopups:eval\":\"true\",\"PopupOffsetX:num\":\"-26\",\"PopupOffsetY:num\":\"0\",\"PopupShiftX:num\":\"8\",\"PopupShiftY:num\":\"-28\",\"hpDamageFmt:str\":\"-%1\",\"hpHealingFmt:str\":\"+%1\",\"mpDamageFmt:str\":\"-%1 %2\",\"mpHealingFmt:str\":\"+%1 %2\",\"CriticalColor:eval\":\"[255, 0, 0, 160]\",\"CriticalDuration:num\":\"128\",\"Formulas\":\"\",\"OverallFormulaJS:func\":\"\\\"// Declare Constants\\\\nconst target = arguments[0];\\\\nconst critical = arguments[1];\\\\nconst item = this.item();\\\\n\\\\n// Get Base Damage\\\\nconst baseValue = this.evalDamageFormula(target);\\\\n\\\\n// Calculate Element Modifiers\\\\nlet value = baseValue * this.calcElementRate(target);\\\\n\\\\n// Calculate Physical and Magical Modifiers\\\\nif (this.isPhysical()) {\\\\n    value *= target.pdr;\\\\n}\\\\nif (this.isMagical()) {\\\\n    value *= target.mdr;\\\\n}\\\\n\\\\n// Apply Healing Modifiers\\\\nif (baseValue < 0) {\\\\n    value *= target.rec;\\\\n}\\\\n\\\\n// Apply Critical Modifiers\\\\nif (critical) {\\\\n    value = this.applyCritical(value);\\\\n}\\\\n\\\\n// Apply Variance and Guard Modifiers\\\\nvalue = this.applyVariance(value, item.damage.variance);\\\\nvalue = this.applyGuard(value, target);\\\\n\\\\n// Finalize Damage\\\\nvalue = Math.round(value);\\\\nreturn value;\\\"\",\"VarianceFormulaJS:func\":\"\\\"// Declare Constants\\\\nconst damage = arguments[0];\\\\nconst variance = arguments[1];\\\\n\\\\n// Calculate Variance\\\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\\\n\\\\n// Return Damage\\\\nreturn damage >= 0 ? damage + v : damage - v;\\\"\",\"GuardFormulaJS:func\":\"\\\"// Declare Constants\\\\nconst damage = arguments[0];\\\\nconst target = arguments[1];\\\\n\\\\n// Return Damage Early\\\\nconst note = this.item().note;\\\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\\\nif (!target.isGuard()) return damage;\\\\nif (damage < 0) return damage;\\\\n\\\\n// Declare Guard Rate\\\\nlet guardRate = 0.5;\\\\nguardRate /= target.grd;\\\\n\\\\n// Return Damage\\\\nreturn damage * guardRate;\\\"\",\"Critical\":\"\",\"CriticalHitRateJS:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\n\\\\n// Create Base Critical Rate\\\\nlet rate = this.subject().cri * (1 - target.cev);\\\\n\\\\n// Apply Notetags\\\\nconst note = this.item().note;\\\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\\\n    return 1;\\\\n}\\\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\\\\\d+)([%ÔºÖ])>/i)) {\\\\n    return Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\\\\\d+)([%ÔºÖ])>/i)) {\\\\n    rate *= Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)([%ÔºÖ])>/i)) {\\\\n    rate += Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<JS CRITICAL RATE>\\\\\\\\s*([\\\\\\\\s\\\\\\\\S]*)\\\\\\\\s*<\\\\\\\\/JS CRITICAL RATE>/i)) {\\\\n    const code = String(RegExp.$1);\\\\n    try {\\\\n        eval(code);\\\\n    } catch (e) {\\\\n        if ($gameTemp.isPlaytest()) console.log(e);\\\\n    }\\\\n}\\\\n\\\\n// Apply LUK Buffs/Debuffs\\\\nconst lukStack = this.subject().buff(7);\\\\nrate *= 2 ** lukStack;\\\\n\\\\n// Return Rate\\\\nreturn rate;\\\"\",\"CriticalHitMultiplier:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nlet damage = arguments[0];\\\\nlet multiplier = 2.0;\\\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\\\nif (this.isHpRecover() || this.isMpRecover()) {\\\\n    bonusDamage *= -1;\\\\n}\\\\n\\\\n// Apply Notetags\\\\nconst note = this.item().note;\\\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\\\\\d+)([%ÔºÖ])>/i)) {\\\\n    multiplier = Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)([%ÔºÖ])>/i)) {\\\\n    multiplier += Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\\\\\d+)([%ÔºÖ])>/i)) {\\\\n    bonusDamage *= Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)([%ÔºÖ])>/i)) {\\\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\\\\\s*([\\\\\\\\s\\\\\\\\S]*)\\\\\\\\s*<\\\\\\\\/JS CRITICAL DAMAGE>/i)) {\\\\n    const code = String(RegExp.$1);\\\\n    try {\\\\n        eval(code);\\\\n    } catch (e) {\\\\n        if ($gameTemp.isPlaytest()) console.log(e);\\\\n    }\\\\n}\\\\n\\\\n// Return Damage\\\\nreturn damage * multiplier + bonusDamage;\\\"\"}","Mechanics:struct":"{\"ActionSpeed\":\"\",\"AllowRandomSpeed:eval\":\"false\",\"SyncBuffExpire:eval\":\"false\",\"CalcActionSpeedJS:func\":\"\\\"// Declare Constants\\\\nconst agi = this.subject().agi;\\\\n\\\\n// Create Speed\\\\nlet speed = agi;\\\\nif (this.allowRandomSpeed()) {\\\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\\\n}\\\\nif (this.item()) {\\\\n    speed += this.item().speed;\\\\n}\\\\nif (this.isAttack()) {\\\\n    speed += this.subject().attackSpeed();\\\\n}\\\\n\\\\n// Return Speed\\\\nreturn speed;\\\"\",\"BaseTroop\":\"\",\"BaseTroopIDs:arraynum\":\"[\\\"1\\\"]\",\"CommonEvents\":\"\",\"BattleStartEvent:num\":\"0\",\"BattleEndEvent:num\":\"0\",\"VictoryEvent:num\":\"0\",\"DefeatEvent:num\":\"0\",\"EscapeSuccessEvent:num\":\"0\",\"EscapeFailEvent:num\":\"0\",\"Escape\":\"\",\"CalcEscapeRatioJS:func\":\"\\\"// Calculate Escape Ratio\\\\nlet ratio = 0.5;\\\\nratio *= $gameParty.agility();\\\\nratio /= $gameTroop.agility();\\\\n\\\\n// Return Ratio\\\\nreturn ratio;\\\"\",\"CalcEscapeRaiseJS:func\":\"\\\"// Calculate Escape Ratio\\\\nlet value = 0.1;\\\\nvalue += $gameParty.aliveMembers().length;\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"Switches\":\"\",\"SwitchCritical:num\":\"0\",\"SwitchMissEvade:num\":\"0\",\"Variables\":\"\",\"VariableDmg:num\":\"0\",\"VariableHeal:num\":\"0\",\"BattleJS\":\"\",\"PreStartBattleJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostStartBattleJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"BattleVictoryJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"EscapeSuccessJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"EscapeFailureJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"BattleDefeatJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PreEndBattleJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostEndBattleJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"TurnJS\":\"\",\"PreStartTurnJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostStartTurnJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PreEndTurnJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostEndTurnJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PreRegenerateJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostRegenerateJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"ActionJS\":\"\",\"PreStartActionJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst user = this.subject();\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostStartActionJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst user = this.subject();\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PreApplyJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst target = arguments[1];\\\\nconst user = this.subject();\\\\nconst a = user;\\\\nconst b = target;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"PreDamageJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst target = arguments[1];\\\\nconst user = this.subject();\\\\nconst a = user;\\\\nconst b = target;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"PostDamageJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst target = arguments[1];\\\\nconst user = this.subject();\\\\nconst a = user;\\\\nconst b = target;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"PostApplyJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst target = arguments[1];\\\\nconst user = this.subject();\\\\nconst a = user;\\\\nconst b = target;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"PreEndActionJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst user = this.subject();\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostEndActionJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst user = this.subject();\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\"\"}","CmdWindows":"----------------------------------","BattleLayout:struct":"{\"Style:str\":\"default\",\"ListStyle\":\"\",\"ShowFacesListStyle:eval\":\"true\",\"CommandWidth:num\":\"192\",\"XPStyle\":\"\",\"XPActorCommandLines:num\":\"4\",\"XPActorDefaultHeight:num\":\"64\",\"XPSpriteYLocation:str\":\"name\",\"PotraitStyle\":\"\",\"ShowPortraits:eval\":\"true\",\"PortraitScale:num\":\"0.5\",\"BorderStyle\":\"\",\"SkillItemBorderCols:num\":\"1\",\"ShowPortraitsBorderStyle:eval\":\"true\",\"PortraitScaleBorderStyle:num\":\"1.25\",\"SkillItemWindows\":\"\",\"SkillItemMiddleLayout:eval\":\"false\",\"SkillItemStandardCols:num\":\"2\",\"StatusWindow\":\"\",\"StatusWindowName\":\"\",\"NameOffsetX:num\":\"+0\",\"NameOffsetY:num\":\"+0\",\"StatusWindowHpGauge\":\"\",\"HpGaugeOffsetX:num\":\"+0\",\"HpGaugeOffsetY:num\":\"+0\",\"StatusWindowMpGauge\":\"\",\"MpGaugeOffsetX:num\":\"+0\",\"MpGaugeOffsetY:num\":\"+0\",\"StatusWindowTpGauge\":\"\",\"TpGaugeOffsetX:num\":\"+0\",\"TpGaugeOffsetY:num\":\"+0\",\"StatusWindowStateIcon\":\"\",\"StateIconOffsetX:num\":\"+0\",\"StateIconOffsetY:num\":\"+0\",\"StatusWindowTpbGauge\":\"\",\"TpbGaugeOffsetX:num\":\"+0\",\"TpbGaugeOffsetY:num\":\"+0\",\"StatusWindowSkin\":\"\",\"StatusWindowSkinFilename:str\":\"\",\"StatusWindowSkinHide:eval\":\"false\",\"StatusWindowSelectBack\":\"\",\"StatusWindowSelectableBackHide:eval\":\"false\",\"StatusWindowAttachments\":\"\",\"StatusWindowBackAttachment\":\"\",\"StatusWindowAttachmentBack:str\":\"\",\"StatusWindowAttachmentBackOffsetX:num\":\"+0\",\"StatusWindowAttachmentBackOffsetY:num\":\"+0\",\"StatusWindowFrontAttachment\":\"\",\"StatusWindowAttachmentFront:str\":\"\",\"StatusWindowAttachmentFrontOffsetX:num\":\"+0\",\"StatusWindowAttachmentFrontOffsetY:num\":\"+0\",\"UiElements\":\"\",\"AntiTintUiElements:eval\":\"true\"}","BattleLog:struct":"{\"General\":\"\",\"BackColor:str\":\"#000000\",\"MaxLines:num\":\"10\",\"MessageWait:num\":\"16\",\"TextAlign:str\":\"center\",\"BattleLogRectJS:func\":\"\\\"const wx = 0;\\\\nconst wy = 0;\\\\nconst ww = Graphics.boxWidth;\\\\nconst wh = this.calcWindowHeight(10, false);\\\\nreturn new Rectangle(wx, wy, ww, wh);\\\"\",\"StartTurn\":\"\",\"StartTurnShow:eval\":\"true\",\"StartTurnMsg:str\":\"Turn %1\",\"StartTurnWait:num\":\"40\",\"DisplayAction\":\"\",\"ActionCenteredName:eval\":\"true\",\"ActionSkillMsg1:eval\":\"false\",\"ActionSkillMsg2:eval\":\"true\",\"ActionItemMsg:eval\":\"false\",\"ActionChanges\":\"\",\"ShowCounter:eval\":\"true\",\"ShowReflect:eval\":\"true\",\"ShowSubstitute:eval\":\"true\",\"ActionResults\":\"\",\"ShowFailure:eval\":\"false\",\"ShowCritical:eval\":\"false\",\"ShowMissEvasion:eval\":\"false\",\"ShowHpDmg:eval\":\"false\",\"ShowMpDmg:eval\":\"false\",\"ShowTpDmg:eval\":\"false\",\"DisplayStates\":\"\",\"ShowAddedState:eval\":\"false\",\"ShowRemovedState:eval\":\"false\",\"ShowCurrentState:eval\":\"false\",\"ShowAddedBuff:eval\":\"false\",\"ShowAddedDebuff:eval\":\"false\",\"ShowRemovedBuff:eval\":\"false\"}","BattlebackScale:struct":"{\"DefaultStyle:str\":\"MZ\",\"jsOneForOne:func\":\"\\\"// Adjust Size\\\\nthis.width = Graphics.width;\\\\nthis.height = Graphics.height;\\\\n\\\\n// Adjust Scale\\\\nconst scale = 1.0;\\\\nthis.scale.x = scale;\\\\nthis.scale.y = scale;\\\\n\\\\n// Adjust Coordinates\\\\nthis.x = 0;\\\\nthis.y = 0;\\\"\",\"jsScaleToFit:func\":\"\\\"// Adjust Size\\\\nthis.width = Graphics.width;\\\\nthis.height = Graphics.height;\\\\n\\\\n// Adjust Scale\\\\nconst ratioX = this.width / this.bitmap.width;\\\\nconst ratioY = this.height / this.bitmap.height;\\\\nconst scale = Math.max(ratioX, ratioY);\\\\nthis.scale.x = scale;\\\\nthis.scale.y = scale;\\\\n\\\\n// Adjust Coordinates\\\\nthis.x = (Graphics.width - this.width) / 2;\\\\nthis.y = Graphics.height - this.height;\\\"\",\"jsScaleDown:func\":\"\\\"// Adjust Size\\\\nthis.width = Graphics.width;\\\\nthis.height = Graphics.height;\\\\n\\\\n// Adjust Scale\\\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\\\nconst scale = Math.max(ratioX, ratioY);\\\\nthis.scale.x = scale;\\\\nthis.scale.y = scale;\\\\n\\\\n// Adjust Coordinates\\\\nthis.x = (Graphics.width - this.width) / 2;\\\\nthis.y = Graphics.height - this.height;\\\"\",\"jsScaleUp:func\":\"\\\"// Adjust Size\\\\nthis.width = Graphics.width;\\\\nthis.height = Graphics.height;\\\\n\\\\n// Adjust Scale\\\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\\\nconst scale = Math.max(ratioX, ratioY);\\\\nthis.scale.x = scale;\\\\nthis.scale.y = scale;\\\\n\\\\n// Adjust Coordinates\\\\nthis.x = (Graphics.width - this.width) / 2;\\\\nthis.y = Graphics.height - this.height;\\\"\"}","PartyCmd:struct":"{\"Cmd\":\"\",\"CmdStyle:str\":\"auto\",\"CmdTextAlign:str\":\"left\",\"CmdIconFight:num\":\"76\",\"CommandAddAutoBattle:eval\":\"true\",\"CmdIconAutoBattle:num\":\"78\",\"CmdTextAutoBattle:str\":\"Auto\",\"CommandAddStatus:eval\":\"true\",\"CmdIconStatus:num\":\"87\",\"CommandAddOptions:eval\":\"true\",\"CmdIconOptions:num\":\"83\",\"ActiveTpbOptionsMessage:str\":\"Options Menu queued after action is complete.\",\"CmdIconEscape:num\":\"82\",\"Access\":\"\",\"SkipPartyCmd:eval\":\"true\",\"DisablePartyCmd:eval\":\"false\",\"HelpWindow\":\"\",\"HelpFight:str\":\"Select actions to fight.\",\"HelpAutoBattle:str\":\"Sets party to Auto Battle mode.\",\"HelpOptions:str\":\"Opens up the Options Menu.\",\"HelpEscape:str\":\"Attempt to escape the battle.\"}","ActorCmd:struct":"{\"Cmd\":\"\",\"CmdStyle:str\":\"auto\",\"CmdTextAlign:str\":\"left\",\"CmdIconItem:num\":\"176\",\"IconStypeNorm:num\":\"78\",\"IconStypeMagic:num\":\"79\",\"BattleCmd\":\"\",\"BattleCmdList:arraystr\":\"[\\\"attack\\\",\\\"skills\\\",\\\"guard\\\",\\\"item\\\",\\\"escape\\\"]\",\"ShowCosts:eval\":\"true\",\"HelpWindow\":\"\",\"HelpSkillType:str\":\"Opens up a list of skills under the \\\\C[16]%1\\\\C[0] category.\",\"HelpItem:str\":\"Opens up a list of items that you can use.\",\"HelpEscape:str\":\"Attempt to escape the battle.\",\"HelpAutoBattle:str\":\"Automatically choose an action suitable for combat.\",\"HelpParty:str\":\"Automatically choose an action suitable for combat.\"}","InBattleStatus:struct":"{\"General\":\"\",\"CmdIconStatus:num\":\"87\",\"StatusGraphic:str\":\"face\",\"HelpStatus:str\":\"View battle member status.\",\"Enemy\":\"\",\"enemyStatus:eval\":\"true\",\"enemyShowLevel:eval\":\"true\",\"enemyHiddenParameter:str\":\"???\",\"enemyShowParametersAlways:eval\":\"false\",\"enemyShowParametersIfBattleTest:eval\":\"true\",\"enemyShowParametersIfDefeated:eval\":\"true\",\"PageButtons\":\"\",\"pageButtons:eval\":\"true\",\"pageButtonPosition:str\":\"left\",\"pageOffsetX:num\":\"+0\",\"pageOffsetY:num\":\"+0\",\"Parameters\":\"\",\"buffValueFmt:str\":\"‚ñ≤%1\",\"debuffValueFmt:str\":\"‚ñº%1\",\"States\":\"\",\"statesMaxWidth:num\":\"384\",\"drawStates:eval\":\"true\",\"drawBuffs:eval\":\"true\",\"drawDebuffs:eval\":\"true\",\"BuffsDebuffs\":\"\",\"buffNameFmt:str\":\"%1‚ñ≤\",\"debuffNameFmt:str\":\"%1‚ñº\",\"NormalState\":\"\",\"normalIcon:num\":\"84\",\"normalText:str\":\"Normal\",\"HelpDesc\":\"\",\"stateHelpFmt:json\":\"\\\"%1 %2\\\"\",\"buffHelpFmt:json\":\"\\\"Increases %1 to %3%2\\\\\\\\C[0]. %4\\\"\",\"debuffHelpFmt:json\":\"\\\"Decreases %1 to %3%2\\\\\\\\C[0]. %4\\\"\",\"normalHelp:json\":\"\\\"Status is currently normal.\\\"\",\"TurnHelpDesc\":\"\",\"actionsFmt:str\":\"\\\\C[6](Actions %2%1\\\\C[6])\\\\C[0]\",\"TurnsFmt:str\":\"\\\\C[5](Turns %2%1\\\\C[5])\\\\C[0]\",\"passiveText:str\":\"\\\\C[4](Passive)\\\\C[0]\",\"Window\":\"\",\"StatusWindow_BgType:num\":\"0\",\"StatusWindow_DrawJS:func\":\"\\\"{ // Draw Face and Simple Status\\\\n    const x = this.colSpacing() / 2;\\\\n    const h = ImageManager.faceHeight;\\\\n    const y = h / 2 - this.lineHeight() * 1.5;\\\\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\\\\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\\\\n}\\\\n{ // Draw Actor Parameters\\\\n    let maxWidth = this.drawingAreaWidth();\\\\n    let x1 = 0;\\\\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\\\\n\\\\n    let counter = 0;\\\\n    const params = this.displayedParams();\\\\n\\\\n    let px = x1;\\\\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\\\\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\\\\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\\\\n    let pw = Math.floor(maxWidth / 2);\\\\n\\\\n    if (this._statesWindow.y !== 0) {\\\\n        this._statesWindow.y = py;\\\\n    }\\\\n\\\\n    for (const param of params) {\\\\n        this.drawDarkRect(px, py, pw, this.lineHeight());\\\\n        this.drawParamData(param, px, py, pw);\\\\n        counter++;\\\\n        if (counter % 2 === 0) {\\\\n            px = x1;\\\\n            py += this.lineHeight();\\\\n        } else {\\\\n            px = x2;\\\\n        }\\\\n    }\\\\n}\\\"\",\"StatusWindow_RectJS:func\":\"\\\"const wx = Graphics.boxWidth > 1000 ? 120 : 0;\\\\nconst wy = this._helpWindow.y + this._helpWindow.height;\\\\nconst ww = Graphics.boxWidth - (wx * 2);\\\\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\\\\nreturn new Rectangle(wx, wy, ww, wh);\\\"\"}","MultiTarget:struct":"{\"Properties\":\"\",\"WindowWidth:num\":\"280\",\"BgType:num\":\"2\",\"ShowButton:eval\":\"true\",\"Vocab\":\"\",\"AllActorsText:str\":\"All Allies\",\"AllEnemiesText:str\":\"All Enemies\",\"Offsets\":\"\",\"ActorOffsets\":\"\",\"ActorOffsetX:num\":\"0.5\",\"ActorOffsetY:num\":\"0.5\",\"EnemyOffsets\":\"\",\"EnemyOffsetX:num\":\"0.5\",\"EnemyOffsetY:num\":\"0.5\"}","ComboWindow:struct":"{\"General\":\"\",\"Enable:eval\":\"false\",\"Appearance\":\"\",\"CustomFontFace:str\":\"Arial\",\"TextAlign:str\":\"left\",\"ComboWindow_DrawJS:func\":\"\\\"// Declare Coordinates\\\\nlet x = 0;\\\\nlet y = 0;\\\\n\\\\n// Hit Text\\\\nconst hitText = this.hitText();\\\\nconst hitTextSize = this.textSizeEx(hitText);\\\\nif (this.textAlignment() === 'right') {\\\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\\\n} else if (this.textAlignment() === 'center') {\\\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\\\n} else {\\\\n    x = this.itemPadding();\\\\n}\\\\nthis.drawTextEx(hitText, x, y);\\\\n\\\\n// New Line\\\\ny += Math.ceil(this.lineHeight() * 2/3);\\\\n\\\\n// Damage Text\\\\nconst dmgText = this.damageText();\\\\nconst dmgTextSize = this.textSizeEx(dmgText);\\\\nif (this.textAlignment() === 'right') {\\\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\\\n} else if (this.textAlignment() === 'center') {\\\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\\\n} else {\\\\n    x = this.itemPadding();\\\\n}\\\\nthis.drawTextEx(dmgText, x, y);\\\"\",\"Vocab\":\"\",\"hitsDmgFmt:str\":\"\\\\C[6]%1\\\\} \\\\C[4]Hit Combo\\\\C[0]\\\\{\",\"hitsHealFmt:str\":\"\\\\C[6]%1\\\\} \\\\C[4]Heal Combo\\\\C[0]\\\\{\",\"totalDmgFmt:str\":\"\\\\}\\\\C[21]Total Damage: \\\\{\\\\C[0]%1\",\"totalHealFmt:str\":\"\\\\}\\\\C[21]Total Healing: \\\\{\\\\C[24]+%1\\\\C[0]\",\"Position\":\"\",\"fadeShiftX:num\":\"-2\",\"fadeShiftY:num\":\"+0\",\"PosOffsetX:num\":\"+0\",\"PosOffsetY:num\":\"+0\",\"ComboWindow_RectJS:func\":\"\\\"const ww = Math.ceil(Graphics.width / 4);\\\\nconst wh = this.calcWindowHeight(2, true);\\\\nconst wx = 0 + this.comboWindowOffsetX();\\\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\\\nreturn new Rectangle(wx, wy, ww, wh);\\\"\",\"Update\":\"\",\"updateDuration:num\":\"20\",\"minimumStayDuration:num\":\"40\",\"minimumHits:num\":\"1\",\"opacitySpeed:num\":\"16\"}","VisualBreak":"----------------------------------","Actor:struct":"{\"Flinch\":\"\",\"FlinchDistanceX:num\":\"40\",\"FlinchDistanceY:num\":\"0\",\"FlinchDuration:num\":\"6\",\"ShakeFlinch:eval\":\"false\",\"ShakeFlinchDuration:num\":\"24\",\"ShakeFlinchPower:num\":\"48\",\"FvBattlers\":\"\",\"FvPortraitAni\":\"\",\"FvAniEachTarget:eval\":\"true\",\"FvAniCenterAll:eval\":\"true\",\"FvAniCenterScreen:eval\":\"false\",\"SvBattlers\":\"\",\"SvAnchor\":\"\",\"AnchorX:num\":\"0.5\",\"AnchorY:num\":\"0.5\",\"ChantStyle:eval\":\"true\",\"MotionSpeed:num\":\"24\",\"SvPosition\":\"\",\"OffsetX:num\":\"-84\",\"OffsetY:num\":\"-60\",\"PrioritySortActive:eval\":\"false\",\"PrioritySortActors:eval\":\"true\",\"Shadow:eval\":\"false\",\"SvStateOverlay\":\"\",\"StateOverlayOffsetX:num\":\"0\",\"StateOverlayOffsetY:num\":\"0\",\"SmoothImage:eval\":\"false\",\"HomePosJS:func\":\"\\\"// Declare Constants\\\\nconst sprite = this;\\\\nconst actor = this._actor;\\\\nconst index = arguments[0];\\\\n\\\\n// Make Calculations\\\\nlet x = Math.round((Graphics.width / 2) + 192)\\\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\\\nx += index * 32;\\\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 76);\\\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\\\ny += index * 76;\\\\n\\\\n// Home Position Offsets\\\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+),[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)>/i;\\\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\\\n\\\\n// Set Home Position\\\\nthis.setHome(x, y);\\\"\"}","Enemy:struct":"{\"Visual\":\"\",\"AttackAnimation:num\":\"1\",\"EmergeText:eval\":\"false\",\"OffsetX:num\":\"0\",\"OffsetY:num\":\"0\",\"SmoothImage:eval\":\"false\",\"SelectWindow\":\"\",\"LastSelected:eval\":\"true\",\"FrontViewSelect:eval\":\"false\",\"SideviewSelect:eval\":\"true\",\"Name\":\"\",\"NameLegacy:eval\":\"false\",\"NameFontSize:num\":\"22\",\"NamePosition\":\"\",\"NameOffsetX:num\":\"0.5\",\"NameOffsetY:num\":\"0.5\",\"NameAttachStateIcon:eval\":\"false\",\"AttachStateOffsetX:num\":\"0.5\",\"AttachStateOffsetY:num\":\"0.5\",\"NameVisibility\":\"\",\"NameAlwaysHidden:eval\":\"true\",\"NameAlwaysVisible:eval\":\"false\",\"NameAsTarget:eval\":\"false\",\"NameAlwaysSelectOnly:eval\":\"false\",\"NameDamageVisibility:num\":\"0\",\"SvBattlers\":\"\",\"AllowCollapse:eval\":\"false\",\"AnchorX:num\":\"0.5\",\"AnchorY:num\":\"0.5\",\"MotionIdle:str\":\"walk\",\"Shadow:eval\":\"false\",\"Width:num\":\"64\",\"Height:num\":\"64\",\"WtypeId:num\":\"0\",\"Aspect\":\"\",\"AspectNameFmt:str\":\"%1 Aspect\",\"AspectColor:str\":\"2\",\"AspectIcon:num\":\"26\"}","HpGauge:struct":"{\"Display\":\"\",\"ShowActorGauge:eval\":\"false\",\"ShowEnemyGauge:eval\":\"false\",\"RequiresDefeat:eval\":\"false\",\"BTestBypass:eval\":\"false\",\"Settings\":\"\",\"AniDuration:num\":\"20\",\"AnchorX:num\":\"0.5\",\"AnchorY:num\":\"1.0\",\"Scale:num\":\"0.5\",\"OffsetX:num\":\"0\",\"OffsetY:num\":\"-3\",\"Options\":\"\",\"AddHpGaugeOption:eval\":\"true\",\"AdjustRect:eval\":\"true\",\"Name:str\":\"Show HP Gauge\"}","ActionSequence:struct":"{\"AutoSequences\":\"\",\"AutoMeleeSolo:eval\":\"true\",\"AutoMeleeAoE:eval\":\"true\",\"QoL\":\"\",\"AutoNotetag:eval\":\"true\",\"CastAnimations\":\"\",\"CastCertain:num\":\"120\",\"CastPhysical:num\":\"52\",\"CastMagical:num\":\"51\",\"CounterReflection\":\"\",\"CounterPlayback:eval\":\"true\",\"ReflectAnimation:num\":\"53\",\"ReflectPlayback:eval\":\"true\",\"Stepping\":\"\",\"MeleeDistance:num\":\"0\",\"StepDistanceX:num\":\"0\",\"StepDistanceY:num\":\"0\",\"StepDuration:num\":\"10\"}","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"MOG_BattlebackEX","status":true,"description":"(v1.0) Adiciona multiplos battlebacks no campo de batalha.","parameters":{}},
{"name":"CTB_DisableTouchInputMZ","status":true,"description":"v1.00 CT_Bolt's Disable Touch/Mouse Input[RMMZ]","parameters":{"Default Touch Input Setting":"false"}},
{"name":"ODUE_BattleBack","status":true,"description":"(ver1.2) Battle Background effects plugin","parameters":{}},
{"name":"SRD_UltraBase","status":true,"description":"Contains code required for HUD Maker Ultra. Does not affect the RPG Maker codebase.","parameters":{}},
{"name":"SRD_HUDMakerUltra","status":true,"description":"Allows you to create and use HUDs for the map and battles.\r\nRequires the HUD Maker Ultra editor.","parameters":{"Auto-Reload HUD Data":"false","Enable Screenshots":"false","Hide Battle Status Window":"true","Hide Battle Selection Window":"false","Fade During Events":"true","Event Fade Opacity":"125","Fade Duration":"10","Map Visibility Code":"return true;","Battle Visibility Code":"return true;"}},
{"name":"TDDP_PixelPerfect","status":true,"description":"1.1.1 Enable pixel perfect scaling mode for your game","parameters":{"enableIngameOptions":"false","labels":"","en":"Pixel Perfect Mode","ja":"„Éî„ÇØ„Çª„É´„Éë„Éº„Éï„Çß„ÇØ„Éà„É¢„Éº„Éâ","zh":"ÂÉèÁ¥†ÂÆåÁæéÊ®°Âºè","ko":"ÌîΩÏÖÄ ÌçºÌéôÌä∏ Î™®Îìú","ru":"–†–µ–∂–∏–º Pixel Perfect"}},
{"name":"AltMenuScreen","status":true,"description":"Alternative menu screen layout.","parameters":{}},
{"name":"MechPen_SharpText","status":true,"description":"v0.96 Text Sharpen plugin beta","parameters":{"outlineSharp":"true","textThickness":"0.50"}},
{"name":"soundbattle","status":true,"description":"","parameters":{}},
{"name":"anim_speed","status":false,"description":"","parameters":{}},
{"name":"NoEmergeBattleLog","status":true,"description":"","parameters":{}},
{"name":"SRD_IndividualSkinsForWindows","status":true,"description":"Using this Plugin allows you to customize the Window Skin used by each, individual Window in your game.","parameters":{"== Main Windows ==":"","Help":"","Gold":"","== Event Windows ==":"","Message":"","Choice List":"","Number Input":"","Event Item":"","== Battle Windows ==":"","Party Command":"Windowtitle","Actor Command":"Windowtitle","Battle Status":"","Battle Actor":"","Battle Enemy":"","Battle Skill":"","Battle Item":"","== Title Windows ==":"","Title Command":"","== Menu Windows ==":"","Menu Command":"","Menu Status":"","Menu Actor":"","== Item Windows ==":"","Item Category":"","Item List":"","== Skill Windows ==":"","Skill Type":"","Skill Status":"","Skill List":"","== Equip Windows ==":"","Equip Status":"","Equip Command":"","Equip Slot":"","Equip Item":"","== Status Windows ==":"","Status":"","== Options Windows ==":"","Options":"","== End Windows ==":"","Game End":"","== Shop Windows ==":"","Shop Command":"","Shop Buy":"","Shop Sell":"","Shop Number":"","Shop Status":"","== Name Windows ==":"","Name Edit":"","Name Input":"","== Save Windows ==":"","Save/Load List":"","== Debug Windows ==":"","Debug Range":"","Debug Edit":"","== Custom Windows ==":"","Custom Window 1":"","Custom Skin 1":"","Custom Window 2":"","Custom Skin 2":"","Custom Window 3":"","Custom Skin 3":"","Custom Window 4":"","Custom Skin 4":"","Custom Window 5":"","Custom Skin 5":"","Custom Window 6":"","Custom Skin 6":"","Custom Window 7":"","Custom Skin 7":"","Custom Window 8":"","Custom Skin 8":"","Custom Window 9":"","Custom Skin 9":"","Custom Window 10":"","Custom Skin 10":"","Custom Window 11":"","Custom Skin 11":"","Custom Window 12":"","Custom Skin 12":"","Custom Window 13":"","Custom Skin 13":"","Custom Window 14":"","Custom Skin 14":"","Custom Window 15":"","Custom Skin 15":"","Custom Window 16":"","Custom Skin 16":"","Custom Window 17":"","Custom Skin 17":"","Custom Window 18":"","Custom Skin 18":"","Custom Window 19":"","Custom Skin 19":"","Custom Window 20":"","Custom Skin 20":""}},
{"name":"shakeanimation","status":true,"description":"Shake the target battler when they gets hit.","parameters":{"Shake":"","pwr":"7","dur":"40","dim":"true"}},
{"name":"SRD_TitleMapBackground","status":true,"description":"Allows developers to set a map to be used as the background of their title screen.","parameters":{"Map ID":"2"}},
{"name":"GALV_CustomTitle","status":true,"description":"(v.1.5) A plugin to allow you to modify aesthetics of the default title screen.","parameters":{"-- Command Window --":"","Cmd Width":"240","Cmd Position X":"(Graphics.boxWidth - this.width) / 2","Cmd Position Y":"Graphics.boxHeight - this.height - 96","Cmd Windowskin":"Windowtitle","Cmd Window Opacity":"255","Cmd Text Align":"center","Cmd Font Name":"","Cmd Font File":"","Cmd Font Size":"28","Cmd Color":"#ffffff","Cmd Outline Width":"4","Cmd Outline Color":"#000000","Cmd Button Size":"36","-- Title Text --":"","Title Position X":"20","Title Position Y":"Graphics.height / 4","Title Width":"Graphics.width - x * 2;","Title Text Align":"center","Title Font Name":"","Title Font File":"","Title Font Size":"72","Title Color":"#ffffff","Title Outline Width":"8","Title Outline Color":"#000000","-- Press Start --":"","Start Image":"Weapons1","Start Position X":"(Graphics.boxWidth - this.pStart.width) / 2","Start Position Y":"Graphics.boxHeight - this.pStart.height - 96","Start Blinking":"5,10,10,120","Start Show Once":"true","-- Advanced --":"","Layer Graphics":"","Animated Sprites":""}},
{"name":"Cae_MenuDisplayOpts","status":true,"description":"v1.4 - Various menu-related display and control options.","parameters":{"--- Menu Cursor ---":"","Text-Width Cursor":"true","No Menu Cursor Blink":"true","No Cursor Wrap Up/Down":"false","No Cursor Wrap Left/Right":"false","Scroll Can Change Column":"false","--- Game Windows ---":"","Instant Open":"false","Instant Close":"false","Release OK Before Choice":"true","Choice Text Alignment":"left","Align Choice to Message":"false","Only Choice Y Alignment":"Default","--- Messages ---":"","Random Msg Splitter":"|","Empty Help Text":"{\"Generic\":\"Navigate using the arrow keys.\\nPress \\\\c[4]Z\\\\c[0] or \\\\c[4]Enter\\\\c[0] to select, \\\\c[4]X\\\\c[0] or \\\\c[4]Esc\\\\c[0] to go back.\",\"ItemCategory\":\"Select an item category!\\nPress \\\\c[4]X\\\\c[0] or \\\\c[4]Esc\\\\c[0] to go back.\",\"ItemList\":\"No items to see here.\\nPress \\\\c[4]X\\\\c[0] or \\\\c[4]Esc\\\\c[0] to go back.\",\"SkillType\":\"Select a skill type!\\nPress \\\\c[4]X\\\\c[0] or \\\\c[4]Esc\\\\c[0] to go back.\",\"SkillList\":\"No skills to see here.\\nPress \\\\c[4]X\\\\c[0] or \\\\c[4]Esc\\\\c[0] to go back.\",\"EquipCommand\":\"\",\"EquipSlot\":\"This equip slot is empty.\\nPress \\\\c[4]Z\\\\c[0] or \\\\c[4]Enter\\\\c[0] to choose an item to equip!\",\"EquipItem\":\"You have nothing to equip in this slot.\\nPress \\\\c[4]X\\\\c[0] or \\\\c[4]Esc\\\\c[0] to go back.\",\"ShopCommand\":\"\",\"ShopBuy\":\"There's nothing here to purchase.\\nPress \\\\c[4]X\\\\c[0] or \\\\c[4]Esc\\\\c[0] to go back.\",\"ShopSell\":\"You have no items of this type to sell.\\nPress \\\\c[4]X\\\\c[0] or \\\\c[4]Esc\\\\c[0] to go back.\"}","Show Text \\v[x][y]":"false","Currency Text Codes":"false","--- ColorManager ---":"","Outline Colour":"{\"R\":\"0\",\"G\":\"0\",\"B\":\"0\",\"A\":\"0.6\"}","Dim Colour 1":"{\"R\":\"0\",\"G\":\"0\",\"B\":\"0\",\"A\":\"0.6\"}","Dim Colour 2":"{\"R\":\"0\",\"G\":\"0\",\"B\":\"0\",\"A\":\"0\"}","Item Back Colour 1":"{\"R\":\"32\",\"G\":\"32\",\"B\":\"32\",\"A\":\"0.5\"}","Item Back Colour 2":"{\"R\":\"0\",\"G\":\"0\",\"B\":\"0\",\"A\":\"0.5\"}","--- Other ---":"","Hidden Item A Name":"","Hidden Item B Name":"","Volume Divisions":"5","Pause Menu Swap":"No Swap","Disabled Pause Menu":"Options","Hide Gauges":"[]","Hide Options":"[]","--- Advanced ---":"","Hidden Item A Symbol":"hiddenItemA","Hidden Item B Symbol":"hiddenItemB"}},
{"name":"boxfix","status":true,"description":"","parameters":{}},
{"name":"NPCDialogueShop","status":true,"description":"A dialogue-focused custom shop scene.\r\nRequires MV 1.5+","parameters":{"Shopkeepers":"[\"{\\\"image\\\":\\\"spr_shop1\\\",\\\"position\\\":\\\"{\\\\\\\"x\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"y\\\\\\\":\\\\\\\"0\\\\\\\"}\\\",\\\"dialogue\\\":\\\"{\\\\\\\"buy\\\\\\\":\\\\\\\"Anything catch your eye?\\\\\\\",\\\\\\\"sell\\\\\\\":\\\\\\\"I see you have something for me!\\\\\\\",\\\\\\\"buy amount\\\\\\\":\\\\\\\"How many would you like?\\\\\\\",\\\\\\\"sell amount\\\\\\\":\\\\\\\"Here, let me take that off you.\\\\\\\",\\\\\\\"event\\\\\\\":\\\\\\\"I heard something the other day...\\\\\\\",\\\\\\\"cancel\\\\\\\":\\\\\\\"Leaving already?\\\\\\\"}\\\"}\"]","Shopkeep Variable":"1","Layout":"Default 720p","Command Window":"{\"x\":\"10\",\"y\":\"10\",\"width\":\"500\"}","Gold Window":"{\"x\":\"510\",\"y\":\"10\",\"width\":\"240\"}","Item List":"{\"x\":\"10\",\"y\":\"82\",\"width\":\"500\",\"height\":\"350\"}","Sell Item List":"{\"x\":\"10\",\"y\":\"154\",\"width\":\"500\",\"height\":\"278\"}","Possessed Items":"{\"x\":\"510\",\"y\":\"82\",\"width\":\"240\"}","Actor Stat Window":"{\"x\":\"510\",\"y\":\"154\",\"width\":\"295\",\"height\":\"218\"}","Help Window Lines":"4","No Equip Name":"None","Font Params Decrement":"5","Common Event Name":"Talk","Common Event ID":"0","Common Event Switch":"","":""}},
{"name":"blur_off","status":true,"description":"","parameters":{}},
{"name":"max_partymember","status":true,"description":"","parameters":{}},
{"name":"SRD_CEBattleIntro","status":true,"description":"Allows you to use a Common Event as your battle intro.","parameters":{"Common Event ID":"62","Auto Transition":"false","Normal BI Duration":"60"}},
{"name":"PictureWaveFilter","status":true,"description":"Apply a sine wave to the picture.","parameters":{"scale":"1"}},
{"name":"VisuMZ_4_MapEventEffects","status":true,"description":"[RPG Maker MZ] [Tier 4] [Version 1.03] [MapEventEffects]","parameters":{"BreakHead":"----------------------------------","MapEventEffects":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","Defaults":"","breathingSpeedX:num":"0.08","breathingSpeedY:num":"0.08","flashDuration:num":"20","flashCycle:num":"60","floatSpeed:num":"0.04","repeatAniCycle:num":"60","repeatAniMirror:eval":"false","repeatAniMute:eval":"true","sidestepSpeed:num":"0.04","Settings":"","floatHeightChangeZ:num":"42","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"GALV_CharacterAnimationsMZ","status":true,"description":"(v.1.3) Make the player and follower characters use different\r\ngraphics for idle, walk and run. View HELP for more info.","parameters":{"useJumpGraphic":"true","vehicles":"false","commonEventId":"0","commonEventTime":"0","repeatCommonEvent":"true"}},
{"name":"MPP_MessageSE","status":true,"description":"Add the function to sound SE to [Display text].","parameters":{"Character Ses":"[\"{\\\"name\\\":\\\"sfx_text\\\",\\\"volume\\\":\\\"100\\\",\\\"pitch\\\":\\\"100\\\",\\\"pan\\\":\\\"0\\\"}\",\"{\\\"name\\\":\\\"sfx_nestext\\\",\\\"volume\\\":\\\"90\\\",\\\"pitch\\\":\\\"100\\\",\\\"pan\\\":\\\"0\\\"}\"]","Se Interval":"3","Stop Se When Skip":"false"}},
{"name":"Synrec_Pause","status":true,"description":"v1.0 Pause the game when on map (When menu disabled and pause switch on)","parameters":{"Pause Switch":"3","Pause Graphics":"[\"{\\\"Image\\\":\\\"spr_nesminigamePAUSE\\\",\\\"Rotation\\\":\\\"0\\\",\\\"Anchor X\\\":\\\"0\\\",\\\"Anchor Y\\\":\\\"0\\\",\\\"Position X\\\":\\\"0\\\",\\\"Position Y\\\":\\\"0\\\",\\\"Scroll X\\\":\\\"0\\\",\\\"Scroll Y\\\":\\\"0\\\"}\"]","Pause BGM":"{\"name\":\"mus_pausenes\",\"volume\":\"90\",\"pitch\":\"100\",\"pan\":\"0\"}"}},
{"name":"float_anim","status":true,"description":"Adds a floating animation to enemies with the <floating> notetag. v1.0","parameters":{}},
{"name":"horizontaleightmovement","status":true,"description":"Horizontal 8 + Shake + Smooth Pushback to the left on hit. v1.5 üåÄ‚ÜîÔ∏èüí•üõ∑ Deslizamiento real al ser golpeado (notetag configurable) by ChatGPT","parameters":{}},
{"name":"rmmz_movement","status":true,"description":"(v1.0.4) 8 direction movement and pixel movement for RPG Maker MZ.","parameters":{}},
{"name":"movementslideaddon","status":true,"description":"Addon for rmmz_movement.js ‚Äî player walks a bit more after stopping (momentum effect).","parameters":{"InertiaFrames":"54"}},
{"name":"walkdashtrans","status":true,"description":"v1.0 - Smooth transition for player movement and animation between walking and dashing on the map.","parameters":{"Walk Speed":"6","Dash Speed":"2","Walk Animation Speed":"6","Dash Animation Speed":"5","Transition Frames":"30"}},
{"name":"offset","status":true,"description":"[v1.1.0] Map-only sprite Y offset (configurable in Plugin Manager). Applies to player, followers and/or events.","parameters":{"Offset Y":"6","Affect Player":"true","Affect Followers":"true","Affect Events":"true","Debug":"false"}},
{"name":"jumpplatformer","status":true,"description":"(v1.4) Mario-style jump with gravity, SE, and custom jump/fall sprites. Addon for rmmz_movement.js. Place BELOW it.","parameters":{"JumpKey":"ok","JumpStrength":"8.0","Gravity":"0.30","JumpSE":"{\"name\":\"sfx_jump\",\"volume\":\"90\",\"pitch\":\"100\",\"pan\":\"0\"}","JumpSprite":"spr_travelerjump","FallSprite":"spr_travelerfall"}},
{"name":"VisuMZ_4_VisualParallaxes","status":true,"description":"[RPG Maker MZ] [Tier 4] [Version 1.13] [VisualParallaxes]","parameters":{"BreakHead":"----------------------------------","VisualParallaxes":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","WaterReflect:struct":"{\"Markers\":\"\",\"Regions:arraynum\":\"[]\",\"TerrainTags:arraynum\":\"[\\\"1\\\"]\",\"Positioning\":\"\",\"Top:eval\":\"true\",\"Appearance\":\"\",\"Blur:num\":\"0.8\",\"Opacity:num\":\"128\",\"Boundary:num\":\"0.1\",\"AmpStart:num\":\"2\",\"AmpEnd:num\":\"4\",\"WaveStart:num\":\"4\",\"WaveEnd:num\":\"16\"}","SolidReflect:struct":"{\"Markers\":\"\",\"Regions:arraynum\":\"[]\",\"TerrainTags:arraynum\":\"[\\\"2\\\"]\",\"Positioning\":\"\",\"Top:eval\":\"true\",\"Appearance\":\"\",\"Blur:num\":\"0.8\",\"Opacity:num\":\"128\"}","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}}
];
